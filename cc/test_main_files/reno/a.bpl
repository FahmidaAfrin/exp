// generated by SMACK version 2.4.0 for corral
// via /usr/local/bin/smack --ll-file reno.ll --no-verify reno_undo.bc

// Basic types
type i1 = int;
type i5 = int;
type i6 = int;
type i8 = int;
type i16 = int;
type i24 = int;
type i32 = int;
type i40 = int;
type i48 = int;
type i56 = int;
type i64 = int;
type i80 = int;
type i88 = int;
type i96 = int;
type i128 = int;
type i160 = int;
type i256 = int;
type ref = i64;
type float;

// Basic constants
const $0: i32;
axiom ($0 == 0);
const $1: i32;
axiom ($1 == 1);
const $0.ref: ref;
axiom ($0.ref == 0);
const $1.ref: ref;
axiom ($1.ref == 1);
const $1024.ref: ref;
axiom ($1024.ref == 1024);
// Memory model constants
const $GLOBALS_BOTTOM: ref;
const $EXTERNS_BOTTOM: ref;
const $MALLOC_TOP: ref;

// Memory maps (121 regions)
var $M.0: [ref] ref;
var $M.1: [ref] i8;
var $M.2: [ref] ref;
var $M.3: [ref] ref;
var $M.4: [ref] i32;
var $M.5: [ref] i32;
var $M.6: [ref] ref;
var $M.7: [ref] ref;
var $M.8: [ref] ref;
var $M.9: [ref] ref;
var $M.10: [ref] i32;
var $M.11: [ref] i32;
var $M.12: [ref] i32;
var $M.13: [ref] ref;
var $M.14: [ref] ref;
var $M.15: [ref] i1;
var $M.16: [ref] ref;
var $M.17: [ref] ref;
var $M.18: [ref] i32;
var $M.19: [ref] i32;
var $M.20: [ref] ref;
var $M.21: [ref] i32;
var $M.22: [ref] i32;
var $M.23: [ref] i32;
var $M.24: [ref] i32;
var $M.25: [ref] i32;
var $M.26: [ref] i32;
var $M.27: [ref] ref;
var $M.28: [ref] ref;
var $M.29: [ref] ref;
var $M.30: [ref] i8;
var $M.31: [ref] ref;
var $M.32: [ref] ref;
var $M.33: [ref] ref;
var $M.34: [ref] ref;
var $M.35: [ref] ref;
var $M.36: [ref] ref;
var $M.37: [ref] ref;
var $M.38: [ref] ref;
var $M.39: [ref] i32;
var $M.40: [ref] ref;
var $M.41: [ref] ref;
var $M.42: [ref] ref;
var $M.43: [ref] i32;
var $M.44: [ref] i32;
var $M.45: [ref] ref;
var $M.46: [ref] ref;
var $M.47: [ref] i32;
var $M.48: [ref] i32;
var $M.49: [ref] ref;
var $M.50: [ref] ref;
var $M.51: [ref] ref;
var $M.52: [ref] i8;
var $M.53: [ref] ref;
var $M.54: [ref] ref;
var $M.55: [ref] ref;
var $M.56: [ref] ref;
var $M.57: [ref] i32;
var $M.58: [ref] i32;
var $M.59: [ref] ref;
var $M.60: [ref] ref;
var $M.61: [ref] ref;
var $M.62: i64;
var $M.63: [ref] i8;
var $M.64: [ref] i32;
var $M.65: [ref] i32;
var $M.66: [ref] i32;
var $M.67: [ref] i32;
var $M.68: [ref] i32;
var $M.69: [ref] i32;
var $M.70: [ref] i32;
var $M.71: [ref] ref;
var $M.72: [ref] i32;
var $M.73: [ref] i32;
var $M.74: [ref] ref;
var $M.75: [ref] i32;
var $M.76: [ref] ref;
var $M.77: [ref] ref;
var $M.78: [ref] i32;
var $M.79: [ref] i32;
var $M.80: [ref] ref;
var $M.81: [ref] ref;
var $M.82: [ref] i8;
var $M.83: [ref] i8;
var $M.84: [ref] i8;
var $M.85: [ref] i8;
var $M.86: i32;
var $M.87: i32;
var $M.88: i32;
var $M.89: i32;
var $M.90: i32;
var $M.91: i32;
var $M.92: i32;
var $M.93: i32;
var $M.94: i32;
var $M.95: i32;
var $M.96: i32;
var $M.97: i32;
var $M.98: i32;
var $M.99: i32;
var $M.100: i32;
var $M.101: i32;
var $M.102: [ref] i64;
var $M.103: i32;
var $M.104: i32;
var $M.105: i32;
var $M.106: [ref] i8;
var $M.107: [ref] i8;
var $M.108: [ref] i8;
var $M.109: [ref] i8;
var $M.110: [ref] i8;
var $M.111: [ref] i8;
var $M.112: [ref] i8;
var $M.113: [ref] i8;
var $M.114: [ref] i8;
var $M.115: [ref] i8;
var $M.116: [ref] i8;
var $M.117: [ref] i8;
var $M.118: [ref] i8;
var $M.119: ref;
var $M.120: i32;

// Memory address bounds
axiom ($GLOBALS_BOTTOM == $sub.ref(0, 125421));
axiom ($EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776)));
axiom ($MALLOC_TOP == 9223372036854775807);
function $isExternal(p: ref) returns (bool) { $slt.ref.bool(p, $EXTERNS_BOTTOM) }

// SMT bit-vector/integer conversion
function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) returns (bv64);
function {:builtin "bv2int"} $bv2int.64(i: bv64) returns (i64);

// Integer arithmetic operations
function {:inline} $add.i1(i1: i1, i2: i1) returns (i1) { (i1 + i2) }
function {:inline} $add.i5(i1: i5, i2: i5) returns (i5) { (i1 + i2) }
function {:inline} $add.i6(i1: i6, i2: i6) returns (i6) { (i1 + i2) }
function {:inline} $add.i8(i1: i8, i2: i8) returns (i8) { (i1 + i2) }
function {:inline} $add.i16(i1: i16, i2: i16) returns (i16) { (i1 + i2) }
function {:inline} $add.i24(i1: i24, i2: i24) returns (i24) { (i1 + i2) }
function {:inline} $add.i32(i1: i32, i2: i32) returns (i32) { (i1 + i2) }
function {:inline} $add.i40(i1: i40, i2: i40) returns (i40) { (i1 + i2) }
function {:inline} $add.i48(i1: i48, i2: i48) returns (i48) { (i1 + i2) }
function {:inline} $add.i56(i1: i56, i2: i56) returns (i56) { (i1 + i2) }
function {:inline} $add.i64(i1: i64, i2: i64) returns (i64) { (i1 + i2) }
function {:inline} $add.i80(i1: i80, i2: i80) returns (i80) { (i1 + i2) }
function {:inline} $add.i88(i1: i88, i2: i88) returns (i88) { (i1 + i2) }
function {:inline} $add.i96(i1: i96, i2: i96) returns (i96) { (i1 + i2) }
function {:inline} $add.i128(i1: i128, i2: i128) returns (i128) { (i1 + i2) }
function {:inline} $add.i160(i1: i160, i2: i160) returns (i160) { (i1 + i2) }
function {:inline} $add.i256(i1: i256, i2: i256) returns (i256) { (i1 + i2) }
function {:inline} $sub.i1(i1: i1, i2: i1) returns (i1) { (i1 - i2) }
function {:inline} $sub.i5(i1: i5, i2: i5) returns (i5) { (i1 - i2) }
function {:inline} $sub.i6(i1: i6, i2: i6) returns (i6) { (i1 - i2) }
function {:inline} $sub.i8(i1: i8, i2: i8) returns (i8) { (i1 - i2) }
function {:inline} $sub.i16(i1: i16, i2: i16) returns (i16) { (i1 - i2) }
function {:inline} $sub.i24(i1: i24, i2: i24) returns (i24) { (i1 - i2) }
function {:inline} $sub.i32(i1: i32, i2: i32) returns (i32) { (i1 - i2) }
function {:inline} $sub.i40(i1: i40, i2: i40) returns (i40) { (i1 - i2) }
function {:inline} $sub.i48(i1: i48, i2: i48) returns (i48) { (i1 - i2) }
function {:inline} $sub.i56(i1: i56, i2: i56) returns (i56) { (i1 - i2) }
function {:inline} $sub.i64(i1: i64, i2: i64) returns (i64) { (i1 - i2) }
function {:inline} $sub.i80(i1: i80, i2: i80) returns (i80) { (i1 - i2) }
function {:inline} $sub.i88(i1: i88, i2: i88) returns (i88) { (i1 - i2) }
function {:inline} $sub.i96(i1: i96, i2: i96) returns (i96) { (i1 - i2) }
function {:inline} $sub.i128(i1: i128, i2: i128) returns (i128) { (i1 - i2) }
function {:inline} $sub.i160(i1: i160, i2: i160) returns (i160) { (i1 - i2) }
function {:inline} $sub.i256(i1: i256, i2: i256) returns (i256) { (i1 - i2) }
function {:inline} $mul.i1(i1: i1, i2: i1) returns (i1) { (i1 * i2) }
function {:inline} $mul.i5(i1: i5, i2: i5) returns (i5) { (i1 * i2) }
function {:inline} $mul.i6(i1: i6, i2: i6) returns (i6) { (i1 * i2) }
function {:inline} $mul.i8(i1: i8, i2: i8) returns (i8) { (i1 * i2) }
function {:inline} $mul.i16(i1: i16, i2: i16) returns (i16) { (i1 * i2) }
function {:inline} $mul.i24(i1: i24, i2: i24) returns (i24) { (i1 * i2) }
function {:inline} $mul.i32(i1: i32, i2: i32) returns (i32) { (i1 * i2) }
function {:inline} $mul.i40(i1: i40, i2: i40) returns (i40) { (i1 * i2) }
function {:inline} $mul.i48(i1: i48, i2: i48) returns (i48) { (i1 * i2) }
function {:inline} $mul.i56(i1: i56, i2: i56) returns (i56) { (i1 * i2) }
function {:inline} $mul.i64(i1: i64, i2: i64) returns (i64) { (i1 * i2) }
function {:inline} $mul.i80(i1: i80, i2: i80) returns (i80) { (i1 * i2) }
function {:inline} $mul.i88(i1: i88, i2: i88) returns (i88) { (i1 * i2) }
function {:inline} $mul.i96(i1: i96, i2: i96) returns (i96) { (i1 * i2) }
function {:inline} $mul.i128(i1: i128, i2: i128) returns (i128) { (i1 * i2) }
function {:inline} $mul.i160(i1: i160, i2: i160) returns (i160) { (i1 * i2) }
function {:inline} $mul.i256(i1: i256, i2: i256) returns (i256) { (i1 * i2) }
function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) returns (i1);
function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) returns (i5);
function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) returns (i6);
function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) returns (i8);
function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) returns (i16);
function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) returns (i24);
function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) returns (i32);
function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) returns (i40);
function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) returns (i48);
function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) returns (i56);
function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) returns (i64);
function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) returns (i80);
function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) returns (i88);
function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) returns (i96);
function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) returns (i128);
function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) returns (i160);
function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) returns (i256);
function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) returns (i1);
function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) returns (i5);
function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) returns (i6);
function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) returns (i8);
function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) returns (i16);
function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) returns (i24);
function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) returns (i32);
function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) returns (i40);
function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) returns (i48);
function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) returns (i56);
function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) returns (i64);
function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) returns (i80);
function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) returns (i88);
function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) returns (i96);
function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) returns (i128);
function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) returns (i160);
function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) returns (i256);
function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) returns (i1);
function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) returns (i5);
function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) returns (i6);
function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) returns (i8);
function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) returns (i16);
function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) returns (i24);
function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) returns (i32);
function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) returns (i40);
function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) returns (i48);
function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) returns (i56);
function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) returns (i64);
function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) returns (i80);
function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) returns (i88);
function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) returns (i96);
function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) returns (i128);
function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) returns (i160);
function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) returns (i256);
function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) returns (i1);
function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) returns (i5);
function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) returns (i6);
function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) returns (i8);
function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) returns (i16);
function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) returns (i24);
function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) returns (i32);
function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) returns (i40);
function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) returns (i48);
function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) returns (i56);
function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) returns (i64);
function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) returns (i80);
function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) returns (i88);
function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) returns (i96);
function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) returns (i128);
function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) returns (i160);
function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) returns (i256);
function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) returns (i1);
function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) returns (i5);
function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) returns (i6);
function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) returns (i8);
function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) returns (i16);
function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) returns (i24);
function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) returns (i32);
function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) returns (i40);
function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) returns (i48);
function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) returns (i56);
function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) returns (i64);
function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) returns (i80);
function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) returns (i88);
function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) returns (i96);
function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) returns (i128);
function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) returns (i160);
function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) returns (i256);
function $shl.i1(i1: i1, i2: i1) returns (i1);
function $shl.i5(i1: i5, i2: i5) returns (i5);
function $shl.i6(i1: i6, i2: i6) returns (i6);
function $shl.i8(i1: i8, i2: i8) returns (i8);
function $shl.i16(i1: i16, i2: i16) returns (i16);
function $shl.i24(i1: i24, i2: i24) returns (i24);
function $shl.i32(i1: i32, i2: i32) returns (i32);
function $shl.i40(i1: i40, i2: i40) returns (i40);
function $shl.i48(i1: i48, i2: i48) returns (i48);
function $shl.i56(i1: i56, i2: i56) returns (i56);
function $shl.i64(i1: i64, i2: i64) returns (i64);
function $shl.i80(i1: i80, i2: i80) returns (i80);
function $shl.i88(i1: i88, i2: i88) returns (i88);
function $shl.i96(i1: i96, i2: i96) returns (i96);
function $shl.i128(i1: i128, i2: i128) returns (i128);
function $shl.i160(i1: i160, i2: i160) returns (i160);
function $shl.i256(i1: i256, i2: i256) returns (i256);
function $lshr.i1(i1: i1, i2: i1) returns (i1);
function $lshr.i5(i1: i5, i2: i5) returns (i5);
function $lshr.i6(i1: i6, i2: i6) returns (i6);
function $lshr.i8(i1: i8, i2: i8) returns (i8);
function $lshr.i16(i1: i16, i2: i16) returns (i16);
function $lshr.i24(i1: i24, i2: i24) returns (i24);
function $lshr.i32(i1: i32, i2: i32) returns (i32);
function $lshr.i40(i1: i40, i2: i40) returns (i40);
function $lshr.i48(i1: i48, i2: i48) returns (i48);
function $lshr.i56(i1: i56, i2: i56) returns (i56);
function $lshr.i64(i1: i64, i2: i64) returns (i64);
function $lshr.i80(i1: i80, i2: i80) returns (i80);
function $lshr.i88(i1: i88, i2: i88) returns (i88);
function $lshr.i96(i1: i96, i2: i96) returns (i96);
function $lshr.i128(i1: i128, i2: i128) returns (i128);
function $lshr.i160(i1: i160, i2: i160) returns (i160);
function $lshr.i256(i1: i256, i2: i256) returns (i256);
function $ashr.i1(i1: i1, i2: i1) returns (i1);
function $ashr.i5(i1: i5, i2: i5) returns (i5);
function $ashr.i6(i1: i6, i2: i6) returns (i6);
function $ashr.i8(i1: i8, i2: i8) returns (i8);
function $ashr.i16(i1: i16, i2: i16) returns (i16);
function $ashr.i24(i1: i24, i2: i24) returns (i24);
function $ashr.i32(i1: i32, i2: i32) returns (i32);
function $ashr.i40(i1: i40, i2: i40) returns (i40);
function $ashr.i48(i1: i48, i2: i48) returns (i48);
function $ashr.i56(i1: i56, i2: i56) returns (i56);
function $ashr.i64(i1: i64, i2: i64) returns (i64);
function $ashr.i80(i1: i80, i2: i80) returns (i80);
function $ashr.i88(i1: i88, i2: i88) returns (i88);
function $ashr.i96(i1: i96, i2: i96) returns (i96);
function $ashr.i128(i1: i128, i2: i128) returns (i128);
function $ashr.i160(i1: i160, i2: i160) returns (i160);
function $ashr.i256(i1: i256, i2: i256) returns (i256);
function $and.i1(i1: i1, i2: i1) returns (i1);
function $and.i5(i1: i5, i2: i5) returns (i5);
function $and.i6(i1: i6, i2: i6) returns (i6);
function $and.i8(i1: i8, i2: i8) returns (i8);
function $and.i16(i1: i16, i2: i16) returns (i16);
function $and.i24(i1: i24, i2: i24) returns (i24);
function $and.i32(i1: i32, i2: i32) returns (i32);
function $and.i40(i1: i40, i2: i40) returns (i40);
function $and.i48(i1: i48, i2: i48) returns (i48);
function $and.i56(i1: i56, i2: i56) returns (i56);
function $and.i64(i1: i64, i2: i64) returns (i64);
function $and.i80(i1: i80, i2: i80) returns (i80);
function $and.i88(i1: i88, i2: i88) returns (i88);
function $and.i96(i1: i96, i2: i96) returns (i96);
function $and.i128(i1: i128, i2: i128) returns (i128);
function $and.i160(i1: i160, i2: i160) returns (i160);
function $and.i256(i1: i256, i2: i256) returns (i256);
function $or.i1(i1: i1, i2: i1) returns (i1);
function $or.i5(i1: i5, i2: i5) returns (i5);
function $or.i6(i1: i6, i2: i6) returns (i6);
function $or.i8(i1: i8, i2: i8) returns (i8);
function $or.i16(i1: i16, i2: i16) returns (i16);
function $or.i24(i1: i24, i2: i24) returns (i24);
function $or.i32(i1: i32, i2: i32) returns (i32);
function $or.i40(i1: i40, i2: i40) returns (i40);
function $or.i48(i1: i48, i2: i48) returns (i48);
function $or.i56(i1: i56, i2: i56) returns (i56);
function $or.i64(i1: i64, i2: i64) returns (i64);
function $or.i80(i1: i80, i2: i80) returns (i80);
function $or.i88(i1: i88, i2: i88) returns (i88);
function $or.i96(i1: i96, i2: i96) returns (i96);
function $or.i128(i1: i128, i2: i128) returns (i128);
function $or.i160(i1: i160, i2: i160) returns (i160);
function $or.i256(i1: i256, i2: i256) returns (i256);
function $xor.i1(i1: i1, i2: i1) returns (i1);
function $xor.i5(i1: i5, i2: i5) returns (i5);
function $xor.i6(i1: i6, i2: i6) returns (i6);
function $xor.i8(i1: i8, i2: i8) returns (i8);
function $xor.i16(i1: i16, i2: i16) returns (i16);
function $xor.i24(i1: i24, i2: i24) returns (i24);
function $xor.i32(i1: i32, i2: i32) returns (i32);
function $xor.i40(i1: i40, i2: i40) returns (i40);
function $xor.i48(i1: i48, i2: i48) returns (i48);
function $xor.i56(i1: i56, i2: i56) returns (i56);
function $xor.i64(i1: i64, i2: i64) returns (i64);
function $xor.i80(i1: i80, i2: i80) returns (i80);
function $xor.i88(i1: i88, i2: i88) returns (i88);
function $xor.i96(i1: i96, i2: i96) returns (i96);
function $xor.i128(i1: i128, i2: i128) returns (i128);
function $xor.i160(i1: i160, i2: i160) returns (i160);
function $xor.i256(i1: i256, i2: i256) returns (i256);
function $nand.i1(i1: i1, i2: i1) returns (i1);
function $nand.i5(i1: i5, i2: i5) returns (i5);
function $nand.i6(i1: i6, i2: i6) returns (i6);
function $nand.i8(i1: i8, i2: i8) returns (i8);
function $nand.i16(i1: i16, i2: i16) returns (i16);
function $nand.i24(i1: i24, i2: i24) returns (i24);
function $nand.i32(i1: i32, i2: i32) returns (i32);
function $nand.i40(i1: i40, i2: i40) returns (i40);
function $nand.i48(i1: i48, i2: i48) returns (i48);
function $nand.i56(i1: i56, i2: i56) returns (i56);
function $nand.i64(i1: i64, i2: i64) returns (i64);
function $nand.i80(i1: i80, i2: i80) returns (i80);
function $nand.i88(i1: i88, i2: i88) returns (i88);
function $nand.i96(i1: i96, i2: i96) returns (i96);
function $nand.i128(i1: i128, i2: i128) returns (i128);
function $nand.i160(i1: i160, i2: i160) returns (i160);
function $nand.i256(i1: i256, i2: i256) returns (i256);
function $not.i1(i: i1) returns (i1);
function $not.i5(i: i5) returns (i5);
function $not.i6(i: i6) returns (i6);
function $not.i8(i: i8) returns (i8);
function $not.i16(i: i16) returns (i16);
function $not.i24(i: i24) returns (i24);
function $not.i32(i: i32) returns (i32);
function $not.i40(i: i40) returns (i40);
function $not.i48(i: i48) returns (i48);
function $not.i56(i: i56) returns (i56);
function $not.i64(i: i64) returns (i64);
function $not.i80(i: i80) returns (i80);
function $not.i88(i: i88) returns (i88);
function $not.i96(i: i96) returns (i96);
function $not.i128(i: i128) returns (i128);
function $not.i160(i: i160) returns (i160);
function $not.i256(i: i256) returns (i256);
function {:inline} $smin.i1(i1: i1, i2: i1) returns (i1) { if (i1 < i2) then i1 else i2 }
function {:inline} $smin.i5(i1: i5, i2: i5) returns (i5) { if (i1 < i2) then i1 else i2 }
function {:inline} $smin.i6(i1: i6, i2: i6) returns (i6) { if (i1 < i2) then i1 else i2 }
function {:inline} $smin.i8(i1: i8, i2: i8) returns (i8) { if (i1 < i2) then i1 else i2 }
function {:inline} $smin.i16(i1: i16, i2: i16) returns (i16) { if (i1 < i2) then i1 else i2 }
function {:inline} $smin.i24(i1: i24, i2: i24) returns (i24) { if (i1 < i2) then i1 else i2 }
function {:inline} $smin.i32(i1: i32, i2: i32) returns (i32) { if (i1 < i2) then i1 else i2 }
function {:inline} $smin.i40(i1: i40, i2: i40) returns (i40) { if (i1 < i2) then i1 else i2 }
function {:inline} $smin.i48(i1: i48, i2: i48) returns (i48) { if (i1 < i2) then i1 else i2 }
function {:inline} $smin.i56(i1: i56, i2: i56) returns (i56) { if (i1 < i2) then i1 else i2 }
function {:inline} $smin.i64(i1: i64, i2: i64) returns (i64) { if (i1 < i2) then i1 else i2 }
function {:inline} $smin.i80(i1: i80, i2: i80) returns (i80) { if (i1 < i2) then i1 else i2 }
function {:inline} $smin.i88(i1: i88, i2: i88) returns (i88) { if (i1 < i2) then i1 else i2 }
function {:inline} $smin.i96(i1: i96, i2: i96) returns (i96) { if (i1 < i2) then i1 else i2 }
function {:inline} $smin.i128(i1: i128, i2: i128) returns (i128) { if (i1 < i2) then i1 else i2 }
function {:inline} $smin.i160(i1: i160, i2: i160) returns (i160) { if (i1 < i2) then i1 else i2 }
function {:inline} $smin.i256(i1: i256, i2: i256) returns (i256) { if (i1 < i2) then i1 else i2 }
function {:inline} $smax.i1(i1: i1, i2: i1) returns (i1) { if (i2 < i1) then i1 else i2 }
function {:inline} $smax.i5(i1: i5, i2: i5) returns (i5) { if (i2 < i1) then i1 else i2 }
function {:inline} $smax.i6(i1: i6, i2: i6) returns (i6) { if (i2 < i1) then i1 else i2 }
function {:inline} $smax.i8(i1: i8, i2: i8) returns (i8) { if (i2 < i1) then i1 else i2 }
function {:inline} $smax.i16(i1: i16, i2: i16) returns (i16) { if (i2 < i1) then i1 else i2 }
function {:inline} $smax.i24(i1: i24, i2: i24) returns (i24) { if (i2 < i1) then i1 else i2 }
function {:inline} $smax.i32(i1: i32, i2: i32) returns (i32) { if (i2 < i1) then i1 else i2 }
function {:inline} $smax.i40(i1: i40, i2: i40) returns (i40) { if (i2 < i1) then i1 else i2 }
function {:inline} $smax.i48(i1: i48, i2: i48) returns (i48) { if (i2 < i1) then i1 else i2 }
function {:inline} $smax.i56(i1: i56, i2: i56) returns (i56) { if (i2 < i1) then i1 else i2 }
function {:inline} $smax.i64(i1: i64, i2: i64) returns (i64) { if (i2 < i1) then i1 else i2 }
function {:inline} $smax.i80(i1: i80, i2: i80) returns (i80) { if (i2 < i1) then i1 else i2 }
function {:inline} $smax.i88(i1: i88, i2: i88) returns (i88) { if (i2 < i1) then i1 else i2 }
function {:inline} $smax.i96(i1: i96, i2: i96) returns (i96) { if (i2 < i1) then i1 else i2 }
function {:inline} $smax.i128(i1: i128, i2: i128) returns (i128) { if (i2 < i1) then i1 else i2 }
function {:inline} $smax.i160(i1: i160, i2: i160) returns (i160) { if (i2 < i1) then i1 else i2 }
function {:inline} $smax.i256(i1: i256, i2: i256) returns (i256) { if (i2 < i1) then i1 else i2 }
function {:inline} $umin.i1(i1: i1, i2: i1) returns (i1) { if (i1 < i2) then i1 else i2 }
function {:inline} $umin.i5(i1: i5, i2: i5) returns (i5) { if (i1 < i2) then i1 else i2 }
function {:inline} $umin.i6(i1: i6, i2: i6) returns (i6) { if (i1 < i2) then i1 else i2 }
function {:inline} $umin.i8(i1: i8, i2: i8) returns (i8) { if (i1 < i2) then i1 else i2 }
function {:inline} $umin.i16(i1: i16, i2: i16) returns (i16) { if (i1 < i2) then i1 else i2 }
function {:inline} $umin.i24(i1: i24, i2: i24) returns (i24) { if (i1 < i2) then i1 else i2 }
function {:inline} $umin.i32(i1: i32, i2: i32) returns (i32) { if (i1 < i2) then i1 else i2 }
function {:inline} $umin.i40(i1: i40, i2: i40) returns (i40) { if (i1 < i2) then i1 else i2 }
function {:inline} $umin.i48(i1: i48, i2: i48) returns (i48) { if (i1 < i2) then i1 else i2 }
function {:inline} $umin.i56(i1: i56, i2: i56) returns (i56) { if (i1 < i2) then i1 else i2 }
function {:inline} $umin.i64(i1: i64, i2: i64) returns (i64) { if (i1 < i2) then i1 else i2 }
function {:inline} $umin.i80(i1: i80, i2: i80) returns (i80) { if (i1 < i2) then i1 else i2 }
function {:inline} $umin.i88(i1: i88, i2: i88) returns (i88) { if (i1 < i2) then i1 else i2 }
function {:inline} $umin.i96(i1: i96, i2: i96) returns (i96) { if (i1 < i2) then i1 else i2 }
function {:inline} $umin.i128(i1: i128, i2: i128) returns (i128) { if (i1 < i2) then i1 else i2 }
function {:inline} $umin.i160(i1: i160, i2: i160) returns (i160) { if (i1 < i2) then i1 else i2 }
function {:inline} $umin.i256(i1: i256, i2: i256) returns (i256) { if (i1 < i2) then i1 else i2 }
function {:inline} $umax.i1(i1: i1, i2: i1) returns (i1) { if (i2 < i1) then i1 else i2 }
function {:inline} $umax.i5(i1: i5, i2: i5) returns (i5) { if (i2 < i1) then i1 else i2 }
function {:inline} $umax.i6(i1: i6, i2: i6) returns (i6) { if (i2 < i1) then i1 else i2 }
function {:inline} $umax.i8(i1: i8, i2: i8) returns (i8) { if (i2 < i1) then i1 else i2 }
function {:inline} $umax.i16(i1: i16, i2: i16) returns (i16) { if (i2 < i1) then i1 else i2 }
function {:inline} $umax.i24(i1: i24, i2: i24) returns (i24) { if (i2 < i1) then i1 else i2 }
function {:inline} $umax.i32(i1: i32, i2: i32) returns (i32) { if (i2 < i1) then i1 else i2 }
function {:inline} $umax.i40(i1: i40, i2: i40) returns (i40) { if (i2 < i1) then i1 else i2 }
function {:inline} $umax.i48(i1: i48, i2: i48) returns (i48) { if (i2 < i1) then i1 else i2 }
function {:inline} $umax.i56(i1: i56, i2: i56) returns (i56) { if (i2 < i1) then i1 else i2 }
function {:inline} $umax.i64(i1: i64, i2: i64) returns (i64) { if (i2 < i1) then i1 else i2 }
function {:inline} $umax.i80(i1: i80, i2: i80) returns (i80) { if (i2 < i1) then i1 else i2 }
function {:inline} $umax.i88(i1: i88, i2: i88) returns (i88) { if (i2 < i1) then i1 else i2 }
function {:inline} $umax.i96(i1: i96, i2: i96) returns (i96) { if (i2 < i1) then i1 else i2 }
function {:inline} $umax.i128(i1: i128, i2: i128) returns (i128) { if (i2 < i1) then i1 else i2 }
function {:inline} $umax.i160(i1: i160, i2: i160) returns (i160) { if (i2 < i1) then i1 else i2 }
function {:inline} $umax.i256(i1: i256, i2: i256) returns (i256) { if (i2 < i1) then i1 else i2 }
axiom ($and.i1(0, 0) == 0);
axiom ($or.i1(0, 0) == 0);
axiom ($xor.i1(0, 0) == 0);
axiom ($and.i1(0, 1) == 0);
axiom ($or.i1(0, 1) == 1);
axiom ($xor.i1(0, 1) == 1);
axiom ($and.i1(1, 0) == 0);
axiom ($or.i1(1, 0) == 1);
axiom ($xor.i1(1, 0) == 1);
axiom ($and.i1(1, 1) == 1);
axiom ($or.i1(1, 1) == 1);
axiom ($xor.i1(1, 1) == 0);
axiom ($and.i32(32, 16) == 0);
// Integer predicates
function {:inline} $ule.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i1(i1: i1, i2: i1) returns (i1) { if $ule.i1.bool(i1, i2) then 1 else 0 }
function {:inline} $ule.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i5(i1: i5, i2: i5) returns (i1) { if $ule.i5.bool(i1, i2) then 1 else 0 }
function {:inline} $ule.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i6(i1: i6, i2: i6) returns (i1) { if $ule.i6.bool(i1, i2) then 1 else 0 }
function {:inline} $ule.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i8(i1: i8, i2: i8) returns (i1) { if $ule.i8.bool(i1, i2) then 1 else 0 }
function {:inline} $ule.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i16(i1: i16, i2: i16) returns (i1) { if $ule.i16.bool(i1, i2) then 1 else 0 }
function {:inline} $ule.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i24(i1: i24, i2: i24) returns (i1) { if $ule.i24.bool(i1, i2) then 1 else 0 }
function {:inline} $ule.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i32(i1: i32, i2: i32) returns (i1) { if $ule.i32.bool(i1, i2) then 1 else 0 }
function {:inline} $ule.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i40(i1: i40, i2: i40) returns (i1) { if $ule.i40.bool(i1, i2) then 1 else 0 }
function {:inline} $ule.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i48(i1: i48, i2: i48) returns (i1) { if $ule.i48.bool(i1, i2) then 1 else 0 }
function {:inline} $ule.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i56(i1: i56, i2: i56) returns (i1) { if $ule.i56.bool(i1, i2) then 1 else 0 }
function {:inline} $ule.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i64(i1: i64, i2: i64) returns (i1) { if $ule.i64.bool(i1, i2) then 1 else 0 }
function {:inline} $ule.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i80(i1: i80, i2: i80) returns (i1) { if $ule.i80.bool(i1, i2) then 1 else 0 }
function {:inline} $ule.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i88(i1: i88, i2: i88) returns (i1) { if $ule.i88.bool(i1, i2) then 1 else 0 }
function {:inline} $ule.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i96(i1: i96, i2: i96) returns (i1) { if $ule.i96.bool(i1, i2) then 1 else 0 }
function {:inline} $ule.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i128(i1: i128, i2: i128) returns (i1) { if $ule.i128.bool(i1, i2) then 1 else 0 }
function {:inline} $ule.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i160(i1: i160, i2: i160) returns (i1) { if $ule.i160.bool(i1, i2) then 1 else 0 }
function {:inline} $ule.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i256(i1: i256, i2: i256) returns (i1) { if $ule.i256.bool(i1, i2) then 1 else 0 }
function {:inline} $ult.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 < i2) }
function {:inline} $ult.i1(i1: i1, i2: i1) returns (i1) { if $ult.i1.bool(i1, i2) then 1 else 0 }
function {:inline} $ult.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 < i2) }
function {:inline} $ult.i5(i1: i5, i2: i5) returns (i1) { if $ult.i5.bool(i1, i2) then 1 else 0 }
function {:inline} $ult.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 < i2) }
function {:inline} $ult.i6(i1: i6, i2: i6) returns (i1) { if $ult.i6.bool(i1, i2) then 1 else 0 }
function {:inline} $ult.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 < i2) }
function {:inline} $ult.i8(i1: i8, i2: i8) returns (i1) { if $ult.i8.bool(i1, i2) then 1 else 0 }
function {:inline} $ult.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 < i2) }
function {:inline} $ult.i16(i1: i16, i2: i16) returns (i1) { if $ult.i16.bool(i1, i2) then 1 else 0 }
function {:inline} $ult.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 < i2) }
function {:inline} $ult.i24(i1: i24, i2: i24) returns (i1) { if $ult.i24.bool(i1, i2) then 1 else 0 }
function {:inline} $ult.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 < i2) }
function {:inline} $ult.i32(i1: i32, i2: i32) returns (i1) { if $ult.i32.bool(i1, i2) then 1 else 0 }
function {:inline} $ult.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 < i2) }
function {:inline} $ult.i40(i1: i40, i2: i40) returns (i1) { if $ult.i40.bool(i1, i2) then 1 else 0 }
function {:inline} $ult.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 < i2) }
function {:inline} $ult.i48(i1: i48, i2: i48) returns (i1) { if $ult.i48.bool(i1, i2) then 1 else 0 }
function {:inline} $ult.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 < i2) }
function {:inline} $ult.i56(i1: i56, i2: i56) returns (i1) { if $ult.i56.bool(i1, i2) then 1 else 0 }
function {:inline} $ult.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 < i2) }
function {:inline} $ult.i64(i1: i64, i2: i64) returns (i1) { if $ult.i64.bool(i1, i2) then 1 else 0 }
function {:inline} $ult.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 < i2) }
function {:inline} $ult.i80(i1: i80, i2: i80) returns (i1) { if $ult.i80.bool(i1, i2) then 1 else 0 }
function {:inline} $ult.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 < i2) }
function {:inline} $ult.i88(i1: i88, i2: i88) returns (i1) { if $ult.i88.bool(i1, i2) then 1 else 0 }
function {:inline} $ult.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 < i2) }
function {:inline} $ult.i96(i1: i96, i2: i96) returns (i1) { if $ult.i96.bool(i1, i2) then 1 else 0 }
function {:inline} $ult.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 < i2) }
function {:inline} $ult.i128(i1: i128, i2: i128) returns (i1) { if $ult.i128.bool(i1, i2) then 1 else 0 }
function {:inline} $ult.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 < i2) }
function {:inline} $ult.i160(i1: i160, i2: i160) returns (i1) { if $ult.i160.bool(i1, i2) then 1 else 0 }
function {:inline} $ult.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 < i2) }
function {:inline} $ult.i256(i1: i256, i2: i256) returns (i1) { if $ult.i256.bool(i1, i2) then 1 else 0 }
function {:inline} $uge.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i1(i1: i1, i2: i1) returns (i1) { if $uge.i1.bool(i1, i2) then 1 else 0 }
function {:inline} $uge.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i5(i1: i5, i2: i5) returns (i1) { if $uge.i5.bool(i1, i2) then 1 else 0 }
function {:inline} $uge.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i6(i1: i6, i2: i6) returns (i1) { if $uge.i6.bool(i1, i2) then 1 else 0 }
function {:inline} $uge.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i8(i1: i8, i2: i8) returns (i1) { if $uge.i8.bool(i1, i2) then 1 else 0 }
function {:inline} $uge.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i16(i1: i16, i2: i16) returns (i1) { if $uge.i16.bool(i1, i2) then 1 else 0 }
function {:inline} $uge.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i24(i1: i24, i2: i24) returns (i1) { if $uge.i24.bool(i1, i2) then 1 else 0 }
function {:inline} $uge.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i32(i1: i32, i2: i32) returns (i1) { if $uge.i32.bool(i1, i2) then 1 else 0 }
function {:inline} $uge.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i40(i1: i40, i2: i40) returns (i1) { if $uge.i40.bool(i1, i2) then 1 else 0 }
function {:inline} $uge.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i48(i1: i48, i2: i48) returns (i1) { if $uge.i48.bool(i1, i2) then 1 else 0 }
function {:inline} $uge.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i56(i1: i56, i2: i56) returns (i1) { if $uge.i56.bool(i1, i2) then 1 else 0 }
function {:inline} $uge.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i64(i1: i64, i2: i64) returns (i1) { if $uge.i64.bool(i1, i2) then 1 else 0 }
function {:inline} $uge.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i80(i1: i80, i2: i80) returns (i1) { if $uge.i80.bool(i1, i2) then 1 else 0 }
function {:inline} $uge.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i88(i1: i88, i2: i88) returns (i1) { if $uge.i88.bool(i1, i2) then 1 else 0 }
function {:inline} $uge.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i96(i1: i96, i2: i96) returns (i1) { if $uge.i96.bool(i1, i2) then 1 else 0 }
function {:inline} $uge.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i128(i1: i128, i2: i128) returns (i1) { if $uge.i128.bool(i1, i2) then 1 else 0 }
function {:inline} $uge.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i160(i1: i160, i2: i160) returns (i1) { if $uge.i160.bool(i1, i2) then 1 else 0 }
function {:inline} $uge.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i256(i1: i256, i2: i256) returns (i1) { if $uge.i256.bool(i1, i2) then 1 else 0 }
function {:inline} $ugt.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i1(i1: i1, i2: i1) returns (i1) { if $ugt.i1.bool(i1, i2) then 1 else 0 }
function {:inline} $ugt.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i5(i1: i5, i2: i5) returns (i1) { if $ugt.i5.bool(i1, i2) then 1 else 0 }
function {:inline} $ugt.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i6(i1: i6, i2: i6) returns (i1) { if $ugt.i6.bool(i1, i2) then 1 else 0 }
function {:inline} $ugt.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i8(i1: i8, i2: i8) returns (i1) { if $ugt.i8.bool(i1, i2) then 1 else 0 }
function {:inline} $ugt.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i16(i1: i16, i2: i16) returns (i1) { if $ugt.i16.bool(i1, i2) then 1 else 0 }
function {:inline} $ugt.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i24(i1: i24, i2: i24) returns (i1) { if $ugt.i24.bool(i1, i2) then 1 else 0 }
function {:inline} $ugt.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i32(i1: i32, i2: i32) returns (i1) { if $ugt.i32.bool(i1, i2) then 1 else 0 }
function {:inline} $ugt.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i40(i1: i40, i2: i40) returns (i1) { if $ugt.i40.bool(i1, i2) then 1 else 0 }
function {:inline} $ugt.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i48(i1: i48, i2: i48) returns (i1) { if $ugt.i48.bool(i1, i2) then 1 else 0 }
function {:inline} $ugt.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i56(i1: i56, i2: i56) returns (i1) { if $ugt.i56.bool(i1, i2) then 1 else 0 }
function {:inline} $ugt.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i64(i1: i64, i2: i64) returns (i1) { if $ugt.i64.bool(i1, i2) then 1 else 0 }
function {:inline} $ugt.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i80(i1: i80, i2: i80) returns (i1) { if $ugt.i80.bool(i1, i2) then 1 else 0 }
function {:inline} $ugt.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i88(i1: i88, i2: i88) returns (i1) { if $ugt.i88.bool(i1, i2) then 1 else 0 }
function {:inline} $ugt.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i96(i1: i96, i2: i96) returns (i1) { if $ugt.i96.bool(i1, i2) then 1 else 0 }
function {:inline} $ugt.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i128(i1: i128, i2: i128) returns (i1) { if $ugt.i128.bool(i1, i2) then 1 else 0 }
function {:inline} $ugt.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i160(i1: i160, i2: i160) returns (i1) { if $ugt.i160.bool(i1, i2) then 1 else 0 }
function {:inline} $ugt.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i256(i1: i256, i2: i256) returns (i1) { if $ugt.i256.bool(i1, i2) then 1 else 0 }
function {:inline} $sle.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i1(i1: i1, i2: i1) returns (i1) { if $sle.i1.bool(i1, i2) then 1 else 0 }
function {:inline} $sle.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i5(i1: i5, i2: i5) returns (i1) { if $sle.i5.bool(i1, i2) then 1 else 0 }
function {:inline} $sle.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i6(i1: i6, i2: i6) returns (i1) { if $sle.i6.bool(i1, i2) then 1 else 0 }
function {:inline} $sle.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i8(i1: i8, i2: i8) returns (i1) { if $sle.i8.bool(i1, i2) then 1 else 0 }
function {:inline} $sle.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i16(i1: i16, i2: i16) returns (i1) { if $sle.i16.bool(i1, i2) then 1 else 0 }
function {:inline} $sle.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i24(i1: i24, i2: i24) returns (i1) { if $sle.i24.bool(i1, i2) then 1 else 0 }
function {:inline} $sle.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i32(i1: i32, i2: i32) returns (i1) { if $sle.i32.bool(i1, i2) then 1 else 0 }
function {:inline} $sle.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i40(i1: i40, i2: i40) returns (i1) { if $sle.i40.bool(i1, i2) then 1 else 0 }
function {:inline} $sle.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i48(i1: i48, i2: i48) returns (i1) { if $sle.i48.bool(i1, i2) then 1 else 0 }
function {:inline} $sle.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i56(i1: i56, i2: i56) returns (i1) { if $sle.i56.bool(i1, i2) then 1 else 0 }
function {:inline} $sle.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i64(i1: i64, i2: i64) returns (i1) { if $sle.i64.bool(i1, i2) then 1 else 0 }
function {:inline} $sle.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i80(i1: i80, i2: i80) returns (i1) { if $sle.i80.bool(i1, i2) then 1 else 0 }
function {:inline} $sle.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i88(i1: i88, i2: i88) returns (i1) { if $sle.i88.bool(i1, i2) then 1 else 0 }
function {:inline} $sle.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i96(i1: i96, i2: i96) returns (i1) { if $sle.i96.bool(i1, i2) then 1 else 0 }
function {:inline} $sle.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i128(i1: i128, i2: i128) returns (i1) { if $sle.i128.bool(i1, i2) then 1 else 0 }
function {:inline} $sle.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i160(i1: i160, i2: i160) returns (i1) { if $sle.i160.bool(i1, i2) then 1 else 0 }
function {:inline} $sle.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i256(i1: i256, i2: i256) returns (i1) { if $sle.i256.bool(i1, i2) then 1 else 0 }
function {:inline} $slt.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 < i2) }
function {:inline} $slt.i1(i1: i1, i2: i1) returns (i1) { if $slt.i1.bool(i1, i2) then 1 else 0 }
function {:inline} $slt.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 < i2) }
function {:inline} $slt.i5(i1: i5, i2: i5) returns (i1) { if $slt.i5.bool(i1, i2) then 1 else 0 }
function {:inline} $slt.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 < i2) }
function {:inline} $slt.i6(i1: i6, i2: i6) returns (i1) { if $slt.i6.bool(i1, i2) then 1 else 0 }
function {:inline} $slt.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 < i2) }
function {:inline} $slt.i8(i1: i8, i2: i8) returns (i1) { if $slt.i8.bool(i1, i2) then 1 else 0 }
function {:inline} $slt.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 < i2) }
function {:inline} $slt.i16(i1: i16, i2: i16) returns (i1) { if $slt.i16.bool(i1, i2) then 1 else 0 }
function {:inline} $slt.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 < i2) }
function {:inline} $slt.i24(i1: i24, i2: i24) returns (i1) { if $slt.i24.bool(i1, i2) then 1 else 0 }
function {:inline} $slt.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 < i2) }
function {:inline} $slt.i32(i1: i32, i2: i32) returns (i1) { if $slt.i32.bool(i1, i2) then 1 else 0 }
function {:inline} $slt.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 < i2) }
function {:inline} $slt.i40(i1: i40, i2: i40) returns (i1) { if $slt.i40.bool(i1, i2) then 1 else 0 }
function {:inline} $slt.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 < i2) }
function {:inline} $slt.i48(i1: i48, i2: i48) returns (i1) { if $slt.i48.bool(i1, i2) then 1 else 0 }
function {:inline} $slt.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 < i2) }
function {:inline} $slt.i56(i1: i56, i2: i56) returns (i1) { if $slt.i56.bool(i1, i2) then 1 else 0 }
function {:inline} $slt.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 < i2) }
function {:inline} $slt.i64(i1: i64, i2: i64) returns (i1) { if $slt.i64.bool(i1, i2) then 1 else 0 }
function {:inline} $slt.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 < i2) }
function {:inline} $slt.i80(i1: i80, i2: i80) returns (i1) { if $slt.i80.bool(i1, i2) then 1 else 0 }
function {:inline} $slt.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 < i2) }
function {:inline} $slt.i88(i1: i88, i2: i88) returns (i1) { if $slt.i88.bool(i1, i2) then 1 else 0 }
function {:inline} $slt.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 < i2) }
function {:inline} $slt.i96(i1: i96, i2: i96) returns (i1) { if $slt.i96.bool(i1, i2) then 1 else 0 }
function {:inline} $slt.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 < i2) }
function {:inline} $slt.i128(i1: i128, i2: i128) returns (i1) { if $slt.i128.bool(i1, i2) then 1 else 0 }
function {:inline} $slt.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 < i2) }
function {:inline} $slt.i160(i1: i160, i2: i160) returns (i1) { if $slt.i160.bool(i1, i2) then 1 else 0 }
function {:inline} $slt.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 < i2) }
function {:inline} $slt.i256(i1: i256, i2: i256) returns (i1) { if $slt.i256.bool(i1, i2) then 1 else 0 }
function {:inline} $sge.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i1(i1: i1, i2: i1) returns (i1) { if $sge.i1.bool(i1, i2) then 1 else 0 }
function {:inline} $sge.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i5(i1: i5, i2: i5) returns (i1) { if $sge.i5.bool(i1, i2) then 1 else 0 }
function {:inline} $sge.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i6(i1: i6, i2: i6) returns (i1) { if $sge.i6.bool(i1, i2) then 1 else 0 }
function {:inline} $sge.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i8(i1: i8, i2: i8) returns (i1) { if $sge.i8.bool(i1, i2) then 1 else 0 }
function {:inline} $sge.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i16(i1: i16, i2: i16) returns (i1) { if $sge.i16.bool(i1, i2) then 1 else 0 }
function {:inline} $sge.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i24(i1: i24, i2: i24) returns (i1) { if $sge.i24.bool(i1, i2) then 1 else 0 }
function {:inline} $sge.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i32(i1: i32, i2: i32) returns (i1) { if $sge.i32.bool(i1, i2) then 1 else 0 }
function {:inline} $sge.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i40(i1: i40, i2: i40) returns (i1) { if $sge.i40.bool(i1, i2) then 1 else 0 }
function {:inline} $sge.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i48(i1: i48, i2: i48) returns (i1) { if $sge.i48.bool(i1, i2) then 1 else 0 }
function {:inline} $sge.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i56(i1: i56, i2: i56) returns (i1) { if $sge.i56.bool(i1, i2) then 1 else 0 }
function {:inline} $sge.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i64(i1: i64, i2: i64) returns (i1) { if $sge.i64.bool(i1, i2) then 1 else 0 }
function {:inline} $sge.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i80(i1: i80, i2: i80) returns (i1) { if $sge.i80.bool(i1, i2) then 1 else 0 }
function {:inline} $sge.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i88(i1: i88, i2: i88) returns (i1) { if $sge.i88.bool(i1, i2) then 1 else 0 }
function {:inline} $sge.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i96(i1: i96, i2: i96) returns (i1) { if $sge.i96.bool(i1, i2) then 1 else 0 }
function {:inline} $sge.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i128(i1: i128, i2: i128) returns (i1) { if $sge.i128.bool(i1, i2) then 1 else 0 }
function {:inline} $sge.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i160(i1: i160, i2: i160) returns (i1) { if $sge.i160.bool(i1, i2) then 1 else 0 }
function {:inline} $sge.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i256(i1: i256, i2: i256) returns (i1) { if $sge.i256.bool(i1, i2) then 1 else 0 }
function {:inline} $sgt.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i1(i1: i1, i2: i1) returns (i1) { if $sgt.i1.bool(i1, i2) then 1 else 0 }
function {:inline} $sgt.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i5(i1: i5, i2: i5) returns (i1) { if $sgt.i5.bool(i1, i2) then 1 else 0 }
function {:inline} $sgt.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i6(i1: i6, i2: i6) returns (i1) { if $sgt.i6.bool(i1, i2) then 1 else 0 }
function {:inline} $sgt.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i8(i1: i8, i2: i8) returns (i1) { if $sgt.i8.bool(i1, i2) then 1 else 0 }
function {:inline} $sgt.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i16(i1: i16, i2: i16) returns (i1) { if $sgt.i16.bool(i1, i2) then 1 else 0 }
function {:inline} $sgt.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i24(i1: i24, i2: i24) returns (i1) { if $sgt.i24.bool(i1, i2) then 1 else 0 }
function {:inline} $sgt.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i32(i1: i32, i2: i32) returns (i1) { if $sgt.i32.bool(i1, i2) then 1 else 0 }
function {:inline} $sgt.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i40(i1: i40, i2: i40) returns (i1) { if $sgt.i40.bool(i1, i2) then 1 else 0 }
function {:inline} $sgt.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i48(i1: i48, i2: i48) returns (i1) { if $sgt.i48.bool(i1, i2) then 1 else 0 }
function {:inline} $sgt.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i56(i1: i56, i2: i56) returns (i1) { if $sgt.i56.bool(i1, i2) then 1 else 0 }
function {:inline} $sgt.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i64(i1: i64, i2: i64) returns (i1) { if $sgt.i64.bool(i1, i2) then 1 else 0 }
function {:inline} $sgt.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i80(i1: i80, i2: i80) returns (i1) { if $sgt.i80.bool(i1, i2) then 1 else 0 }
function {:inline} $sgt.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i88(i1: i88, i2: i88) returns (i1) { if $sgt.i88.bool(i1, i2) then 1 else 0 }
function {:inline} $sgt.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i96(i1: i96, i2: i96) returns (i1) { if $sgt.i96.bool(i1, i2) then 1 else 0 }
function {:inline} $sgt.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i128(i1: i128, i2: i128) returns (i1) { if $sgt.i128.bool(i1, i2) then 1 else 0 }
function {:inline} $sgt.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i160(i1: i160, i2: i160) returns (i1) { if $sgt.i160.bool(i1, i2) then 1 else 0 }
function {:inline} $sgt.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i256(i1: i256, i2: i256) returns (i1) { if $sgt.i256.bool(i1, i2) then 1 else 0 }
function {:inline} $eq.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 == i2) }
function {:inline} $eq.i1(i1: i1, i2: i1) returns (i1) { if $eq.i1.bool(i1, i2) then 1 else 0 }
function {:inline} $eq.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 == i2) }
function {:inline} $eq.i5(i1: i5, i2: i5) returns (i1) { if $eq.i5.bool(i1, i2) then 1 else 0 }
function {:inline} $eq.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 == i2) }
function {:inline} $eq.i6(i1: i6, i2: i6) returns (i1) { if $eq.i6.bool(i1, i2) then 1 else 0 }
function {:inline} $eq.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 == i2) }
function {:inline} $eq.i8(i1: i8, i2: i8) returns (i1) { if $eq.i8.bool(i1, i2) then 1 else 0 }
function {:inline} $eq.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 == i2) }
function {:inline} $eq.i16(i1: i16, i2: i16) returns (i1) { if $eq.i16.bool(i1, i2) then 1 else 0 }
function {:inline} $eq.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 == i2) }
function {:inline} $eq.i24(i1: i24, i2: i24) returns (i1) { if $eq.i24.bool(i1, i2) then 1 else 0 }
function {:inline} $eq.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 == i2) }
function {:inline} $eq.i32(i1: i32, i2: i32) returns (i1) { if $eq.i32.bool(i1, i2) then 1 else 0 }
function {:inline} $eq.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 == i2) }
function {:inline} $eq.i40(i1: i40, i2: i40) returns (i1) { if $eq.i40.bool(i1, i2) then 1 else 0 }
function {:inline} $eq.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 == i2) }
function {:inline} $eq.i48(i1: i48, i2: i48) returns (i1) { if $eq.i48.bool(i1, i2) then 1 else 0 }
function {:inline} $eq.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 == i2) }
function {:inline} $eq.i56(i1: i56, i2: i56) returns (i1) { if $eq.i56.bool(i1, i2) then 1 else 0 }
function {:inline} $eq.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 == i2) }
function {:inline} $eq.i64(i1: i64, i2: i64) returns (i1) { if $eq.i64.bool(i1, i2) then 1 else 0 }
function {:inline} $eq.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 == i2) }
function {:inline} $eq.i80(i1: i80, i2: i80) returns (i1) { if $eq.i80.bool(i1, i2) then 1 else 0 }
function {:inline} $eq.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 == i2) }
function {:inline} $eq.i88(i1: i88, i2: i88) returns (i1) { if $eq.i88.bool(i1, i2) then 1 else 0 }
function {:inline} $eq.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 == i2) }
function {:inline} $eq.i96(i1: i96, i2: i96) returns (i1) { if $eq.i96.bool(i1, i2) then 1 else 0 }
function {:inline} $eq.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 == i2) }
function {:inline} $eq.i128(i1: i128, i2: i128) returns (i1) { if $eq.i128.bool(i1, i2) then 1 else 0 }
function {:inline} $eq.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 == i2) }
function {:inline} $eq.i160(i1: i160, i2: i160) returns (i1) { if $eq.i160.bool(i1, i2) then 1 else 0 }
function {:inline} $eq.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 == i2) }
function {:inline} $eq.i256(i1: i256, i2: i256) returns (i1) { if $eq.i256.bool(i1, i2) then 1 else 0 }
function {:inline} $ne.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 != i2) }
function {:inline} $ne.i1(i1: i1, i2: i1) returns (i1) { if $ne.i1.bool(i1, i2) then 1 else 0 }
function {:inline} $ne.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 != i2) }
function {:inline} $ne.i5(i1: i5, i2: i5) returns (i1) { if $ne.i5.bool(i1, i2) then 1 else 0 }
function {:inline} $ne.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 != i2) }
function {:inline} $ne.i6(i1: i6, i2: i6) returns (i1) { if $ne.i6.bool(i1, i2) then 1 else 0 }
function {:inline} $ne.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 != i2) }
function {:inline} $ne.i8(i1: i8, i2: i8) returns (i1) { if $ne.i8.bool(i1, i2) then 1 else 0 }
function {:inline} $ne.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 != i2) }
function {:inline} $ne.i16(i1: i16, i2: i16) returns (i1) { if $ne.i16.bool(i1, i2) then 1 else 0 }
function {:inline} $ne.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 != i2) }
function {:inline} $ne.i24(i1: i24, i2: i24) returns (i1) { if $ne.i24.bool(i1, i2) then 1 else 0 }
function {:inline} $ne.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 != i2) }
function {:inline} $ne.i32(i1: i32, i2: i32) returns (i1) { if $ne.i32.bool(i1, i2) then 1 else 0 }
function {:inline} $ne.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 != i2) }
function {:inline} $ne.i40(i1: i40, i2: i40) returns (i1) { if $ne.i40.bool(i1, i2) then 1 else 0 }
function {:inline} $ne.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 != i2) }
function {:inline} $ne.i48(i1: i48, i2: i48) returns (i1) { if $ne.i48.bool(i1, i2) then 1 else 0 }
function {:inline} $ne.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 != i2) }
function {:inline} $ne.i56(i1: i56, i2: i56) returns (i1) { if $ne.i56.bool(i1, i2) then 1 else 0 }
function {:inline} $ne.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 != i2) }
function {:inline} $ne.i64(i1: i64, i2: i64) returns (i1) { if $ne.i64.bool(i1, i2) then 1 else 0 }
function {:inline} $ne.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 != i2) }
function {:inline} $ne.i80(i1: i80, i2: i80) returns (i1) { if $ne.i80.bool(i1, i2) then 1 else 0 }
function {:inline} $ne.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 != i2) }
function {:inline} $ne.i88(i1: i88, i2: i88) returns (i1) { if $ne.i88.bool(i1, i2) then 1 else 0 }
function {:inline} $ne.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 != i2) }
function {:inline} $ne.i96(i1: i96, i2: i96) returns (i1) { if $ne.i96.bool(i1, i2) then 1 else 0 }
function {:inline} $ne.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 != i2) }
function {:inline} $ne.i128(i1: i128, i2: i128) returns (i1) { if $ne.i128.bool(i1, i2) then 1 else 0 }
function {:inline} $ne.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 != i2) }
function {:inline} $ne.i160(i1: i160, i2: i160) returns (i1) { if $ne.i160.bool(i1, i2) then 1 else 0 }
function {:inline} $ne.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 != i2) }
function {:inline} $ne.i256(i1: i256, i2: i256) returns (i1) { if $ne.i256.bool(i1, i2) then 1 else 0 }
// Integer load/store operations
function {:inline} $load.i1(M: [ref] i1, p: ref) returns (i1) { M[p] }
function {:inline} $store.i1(M: [ref] i1, p: ref, i: i1) returns ([ref] i1) { M[p := i] }
function {:inline} $load.i5(M: [ref] i5, p: ref) returns (i5) { M[p] }
function {:inline} $store.i5(M: [ref] i5, p: ref, i: i5) returns ([ref] i5) { M[p := i] }
function {:inline} $load.i6(M: [ref] i6, p: ref) returns (i6) { M[p] }
function {:inline} $store.i6(M: [ref] i6, p: ref, i: i6) returns ([ref] i6) { M[p := i] }
function {:inline} $load.i8(M: [ref] i8, p: ref) returns (i8) { M[p] }
function {:inline} $store.i8(M: [ref] i8, p: ref, i: i8) returns ([ref] i8) { M[p := i] }
function {:inline} $load.i16(M: [ref] i16, p: ref) returns (i16) { M[p] }
function {:inline} $store.i16(M: [ref] i16, p: ref, i: i16) returns ([ref] i16) { M[p := i] }
function {:inline} $load.i24(M: [ref] i24, p: ref) returns (i24) { M[p] }
function {:inline} $store.i24(M: [ref] i24, p: ref, i: i24) returns ([ref] i24) { M[p := i] }
function {:inline} $load.i32(M: [ref] i32, p: ref) returns (i32) { M[p] }
function {:inline} $store.i32(M: [ref] i32, p: ref, i: i32) returns ([ref] i32) { M[p := i] }
function {:inline} $load.i40(M: [ref] i40, p: ref) returns (i40) { M[p] }
function {:inline} $store.i40(M: [ref] i40, p: ref, i: i40) returns ([ref] i40) { M[p := i] }
function {:inline} $load.i48(M: [ref] i48, p: ref) returns (i48) { M[p] }
function {:inline} $store.i48(M: [ref] i48, p: ref, i: i48) returns ([ref] i48) { M[p := i] }
function {:inline} $load.i56(M: [ref] i56, p: ref) returns (i56) { M[p] }
function {:inline} $store.i56(M: [ref] i56, p: ref, i: i56) returns ([ref] i56) { M[p := i] }
function {:inline} $load.i64(M: [ref] i64, p: ref) returns (i64) { M[p] }
function {:inline} $store.i64(M: [ref] i64, p: ref, i: i64) returns ([ref] i64) { M[p := i] }
function {:inline} $load.i80(M: [ref] i80, p: ref) returns (i80) { M[p] }
function {:inline} $store.i80(M: [ref] i80, p: ref, i: i80) returns ([ref] i80) { M[p := i] }
function {:inline} $load.i88(M: [ref] i88, p: ref) returns (i88) { M[p] }
function {:inline} $store.i88(M: [ref] i88, p: ref, i: i88) returns ([ref] i88) { M[p := i] }
function {:inline} $load.i96(M: [ref] i96, p: ref) returns (i96) { M[p] }
function {:inline} $store.i96(M: [ref] i96, p: ref, i: i96) returns ([ref] i96) { M[p := i] }
function {:inline} $load.i128(M: [ref] i128, p: ref) returns (i128) { M[p] }
function {:inline} $store.i128(M: [ref] i128, p: ref, i: i128) returns ([ref] i128) { M[p := i] }
function {:inline} $load.i160(M: [ref] i160, p: ref) returns (i160) { M[p] }
function {:inline} $store.i160(M: [ref] i160, p: ref, i: i160) returns ([ref] i160) { M[p := i] }
function {:inline} $load.i256(M: [ref] i256, p: ref) returns (i256) { M[p] }
function {:inline} $store.i256(M: [ref] i256, p: ref, i: i256) returns ([ref] i256) { M[p := i] }
// Conversion between integer types
function {:inline} $trunc.i5.i1(i: i5) returns (i1) { i }
function {:inline} $trunc.i6.i1(i: i6) returns (i1) { i }
function {:inline} $trunc.i8.i1(i: i8) returns (i1) { i }
function {:inline} $trunc.i16.i1(i: i16) returns (i1) { i }
function {:inline} $trunc.i24.i1(i: i24) returns (i1) { i }
function {:inline} $trunc.i32.i1(i: i32) returns (i1) { i }
function {:inline} $trunc.i40.i1(i: i40) returns (i1) { i }
function {:inline} $trunc.i48.i1(i: i48) returns (i1) { i }
function {:inline} $trunc.i56.i1(i: i56) returns (i1) { i }
function {:inline} $trunc.i64.i1(i: i64) returns (i1) { i }
function {:inline} $trunc.i80.i1(i: i80) returns (i1) { i }
function {:inline} $trunc.i88.i1(i: i88) returns (i1) { i }
function {:inline} $trunc.i96.i1(i: i96) returns (i1) { i }
function {:inline} $trunc.i128.i1(i: i128) returns (i1) { i }
function {:inline} $trunc.i160.i1(i: i160) returns (i1) { i }
function {:inline} $trunc.i256.i1(i: i256) returns (i1) { i }
function {:inline} $trunc.i6.i5(i: i6) returns (i5) { i }
function {:inline} $trunc.i8.i5(i: i8) returns (i5) { i }
function {:inline} $trunc.i16.i5(i: i16) returns (i5) { i }
function {:inline} $trunc.i24.i5(i: i24) returns (i5) { i }
function {:inline} $trunc.i32.i5(i: i32) returns (i5) { i }
function {:inline} $trunc.i40.i5(i: i40) returns (i5) { i }
function {:inline} $trunc.i48.i5(i: i48) returns (i5) { i }
function {:inline} $trunc.i56.i5(i: i56) returns (i5) { i }
function {:inline} $trunc.i64.i5(i: i64) returns (i5) { i }
function {:inline} $trunc.i80.i5(i: i80) returns (i5) { i }
function {:inline} $trunc.i88.i5(i: i88) returns (i5) { i }
function {:inline} $trunc.i96.i5(i: i96) returns (i5) { i }
function {:inline} $trunc.i128.i5(i: i128) returns (i5) { i }
function {:inline} $trunc.i160.i5(i: i160) returns (i5) { i }
function {:inline} $trunc.i256.i5(i: i256) returns (i5) { i }
function {:inline} $trunc.i8.i6(i: i8) returns (i6) { i }
function {:inline} $trunc.i16.i6(i: i16) returns (i6) { i }
function {:inline} $trunc.i24.i6(i: i24) returns (i6) { i }
function {:inline} $trunc.i32.i6(i: i32) returns (i6) { i }
function {:inline} $trunc.i40.i6(i: i40) returns (i6) { i }
function {:inline} $trunc.i48.i6(i: i48) returns (i6) { i }
function {:inline} $trunc.i56.i6(i: i56) returns (i6) { i }
function {:inline} $trunc.i64.i6(i: i64) returns (i6) { i }
function {:inline} $trunc.i80.i6(i: i80) returns (i6) { i }
function {:inline} $trunc.i88.i6(i: i88) returns (i6) { i }
function {:inline} $trunc.i96.i6(i: i96) returns (i6) { i }
function {:inline} $trunc.i128.i6(i: i128) returns (i6) { i }
function {:inline} $trunc.i160.i6(i: i160) returns (i6) { i }
function {:inline} $trunc.i256.i6(i: i256) returns (i6) { i }
function {:inline} $trunc.i16.i8(i: i16) returns (i8) { i }
function {:inline} $trunc.i24.i8(i: i24) returns (i8) { i }
function {:inline} $trunc.i32.i8(i: i32) returns (i8) { i }
function {:inline} $trunc.i40.i8(i: i40) returns (i8) { i }
function {:inline} $trunc.i48.i8(i: i48) returns (i8) { i }
function {:inline} $trunc.i56.i8(i: i56) returns (i8) { i }
function {:inline} $trunc.i64.i8(i: i64) returns (i8) { i }
function {:inline} $trunc.i80.i8(i: i80) returns (i8) { i }
function {:inline} $trunc.i88.i8(i: i88) returns (i8) { i }
function {:inline} $trunc.i96.i8(i: i96) returns (i8) { i }
function {:inline} $trunc.i128.i8(i: i128) returns (i8) { i }
function {:inline} $trunc.i160.i8(i: i160) returns (i8) { i }
function {:inline} $trunc.i256.i8(i: i256) returns (i8) { i }
function {:inline} $trunc.i24.i16(i: i24) returns (i16) { i }
function {:inline} $trunc.i32.i16(i: i32) returns (i16) { i }
function {:inline} $trunc.i40.i16(i: i40) returns (i16) { i }
function {:inline} $trunc.i48.i16(i: i48) returns (i16) { i }
function {:inline} $trunc.i56.i16(i: i56) returns (i16) { i }
function {:inline} $trunc.i64.i16(i: i64) returns (i16) { i }
function {:inline} $trunc.i80.i16(i: i80) returns (i16) { i }
function {:inline} $trunc.i88.i16(i: i88) returns (i16) { i }
function {:inline} $trunc.i96.i16(i: i96) returns (i16) { i }
function {:inline} $trunc.i128.i16(i: i128) returns (i16) { i }
function {:inline} $trunc.i160.i16(i: i160) returns (i16) { i }
function {:inline} $trunc.i256.i16(i: i256) returns (i16) { i }
function {:inline} $trunc.i32.i24(i: i32) returns (i24) { i }
function {:inline} $trunc.i40.i24(i: i40) returns (i24) { i }
function {:inline} $trunc.i48.i24(i: i48) returns (i24) { i }
function {:inline} $trunc.i56.i24(i: i56) returns (i24) { i }
function {:inline} $trunc.i64.i24(i: i64) returns (i24) { i }
function {:inline} $trunc.i80.i24(i: i80) returns (i24) { i }
function {:inline} $trunc.i88.i24(i: i88) returns (i24) { i }
function {:inline} $trunc.i96.i24(i: i96) returns (i24) { i }
function {:inline} $trunc.i128.i24(i: i128) returns (i24) { i }
function {:inline} $trunc.i160.i24(i: i160) returns (i24) { i }
function {:inline} $trunc.i256.i24(i: i256) returns (i24) { i }
function {:inline} $trunc.i40.i32(i: i40) returns (i32) { i }
function {:inline} $trunc.i48.i32(i: i48) returns (i32) { i }
function {:inline} $trunc.i56.i32(i: i56) returns (i32) { i }
function {:inline} $trunc.i64.i32(i: i64) returns (i32) { i }
function {:inline} $trunc.i80.i32(i: i80) returns (i32) { i }
function {:inline} $trunc.i88.i32(i: i88) returns (i32) { i }
function {:inline} $trunc.i96.i32(i: i96) returns (i32) { i }
function {:inline} $trunc.i128.i32(i: i128) returns (i32) { i }
function {:inline} $trunc.i160.i32(i: i160) returns (i32) { i }
function {:inline} $trunc.i256.i32(i: i256) returns (i32) { i }
function {:inline} $trunc.i48.i40(i: i48) returns (i40) { i }
function {:inline} $trunc.i56.i40(i: i56) returns (i40) { i }
function {:inline} $trunc.i64.i40(i: i64) returns (i40) { i }
function {:inline} $trunc.i80.i40(i: i80) returns (i40) { i }
function {:inline} $trunc.i88.i40(i: i88) returns (i40) { i }
function {:inline} $trunc.i96.i40(i: i96) returns (i40) { i }
function {:inline} $trunc.i128.i40(i: i128) returns (i40) { i }
function {:inline} $trunc.i160.i40(i: i160) returns (i40) { i }
function {:inline} $trunc.i256.i40(i: i256) returns (i40) { i }
function {:inline} $trunc.i56.i48(i: i56) returns (i48) { i }
function {:inline} $trunc.i64.i48(i: i64) returns (i48) { i }
function {:inline} $trunc.i80.i48(i: i80) returns (i48) { i }
function {:inline} $trunc.i88.i48(i: i88) returns (i48) { i }
function {:inline} $trunc.i96.i48(i: i96) returns (i48) { i }
function {:inline} $trunc.i128.i48(i: i128) returns (i48) { i }
function {:inline} $trunc.i160.i48(i: i160) returns (i48) { i }
function {:inline} $trunc.i256.i48(i: i256) returns (i48) { i }
function {:inline} $trunc.i64.i56(i: i64) returns (i56) { i }
function {:inline} $trunc.i80.i56(i: i80) returns (i56) { i }
function {:inline} $trunc.i88.i56(i: i88) returns (i56) { i }
function {:inline} $trunc.i96.i56(i: i96) returns (i56) { i }
function {:inline} $trunc.i128.i56(i: i128) returns (i56) { i }
function {:inline} $trunc.i160.i56(i: i160) returns (i56) { i }
function {:inline} $trunc.i256.i56(i: i256) returns (i56) { i }
function {:inline} $trunc.i80.i64(i: i80) returns (i64) { i }
function {:inline} $trunc.i88.i64(i: i88) returns (i64) { i }
function {:inline} $trunc.i96.i64(i: i96) returns (i64) { i }
function {:inline} $trunc.i128.i64(i: i128) returns (i64) { i }
function {:inline} $trunc.i160.i64(i: i160) returns (i64) { i }
function {:inline} $trunc.i256.i64(i: i256) returns (i64) { i }
function {:inline} $trunc.i88.i80(i: i88) returns (i80) { i }
function {:inline} $trunc.i96.i80(i: i96) returns (i80) { i }
function {:inline} $trunc.i128.i80(i: i128) returns (i80) { i }
function {:inline} $trunc.i160.i80(i: i160) returns (i80) { i }
function {:inline} $trunc.i256.i80(i: i256) returns (i80) { i }
function {:inline} $trunc.i96.i88(i: i96) returns (i88) { i }
function {:inline} $trunc.i128.i88(i: i128) returns (i88) { i }
function {:inline} $trunc.i160.i88(i: i160) returns (i88) { i }
function {:inline} $trunc.i256.i88(i: i256) returns (i88) { i }
function {:inline} $trunc.i128.i96(i: i128) returns (i96) { i }
function {:inline} $trunc.i160.i96(i: i160) returns (i96) { i }
function {:inline} $trunc.i256.i96(i: i256) returns (i96) { i }
function {:inline} $trunc.i160.i128(i: i160) returns (i128) { i }
function {:inline} $trunc.i256.i128(i: i256) returns (i128) { i }
function {:inline} $trunc.i256.i160(i: i256) returns (i160) { i }
function {:inline} $sext.i1.i5(i: i1) returns (i5) { i }
function {:inline} $sext.i1.i6(i: i1) returns (i6) { i }
function {:inline} $sext.i1.i8(i: i1) returns (i8) { i }
function {:inline} $sext.i1.i16(i: i1) returns (i16) { i }
function {:inline} $sext.i1.i24(i: i1) returns (i24) { i }
function {:inline} $sext.i1.i32(i: i1) returns (i32) { i }
function {:inline} $sext.i1.i40(i: i1) returns (i40) { i }
function {:inline} $sext.i1.i48(i: i1) returns (i48) { i }
function {:inline} $sext.i1.i56(i: i1) returns (i56) { i }
function {:inline} $sext.i1.i64(i: i1) returns (i64) { i }
function {:inline} $sext.i1.i80(i: i1) returns (i80) { i }
function {:inline} $sext.i1.i88(i: i1) returns (i88) { i }
function {:inline} $sext.i1.i96(i: i1) returns (i96) { i }
function {:inline} $sext.i1.i128(i: i1) returns (i128) { i }
function {:inline} $sext.i1.i160(i: i1) returns (i160) { i }
function {:inline} $sext.i1.i256(i: i1) returns (i256) { i }
function {:inline} $sext.i5.i6(i: i5) returns (i6) { i }
function {:inline} $sext.i5.i8(i: i5) returns (i8) { i }
function {:inline} $sext.i5.i16(i: i5) returns (i16) { i }
function {:inline} $sext.i5.i24(i: i5) returns (i24) { i }
function {:inline} $sext.i5.i32(i: i5) returns (i32) { i }
function {:inline} $sext.i5.i40(i: i5) returns (i40) { i }
function {:inline} $sext.i5.i48(i: i5) returns (i48) { i }
function {:inline} $sext.i5.i56(i: i5) returns (i56) { i }
function {:inline} $sext.i5.i64(i: i5) returns (i64) { i }
function {:inline} $sext.i5.i80(i: i5) returns (i80) { i }
function {:inline} $sext.i5.i88(i: i5) returns (i88) { i }
function {:inline} $sext.i5.i96(i: i5) returns (i96) { i }
function {:inline} $sext.i5.i128(i: i5) returns (i128) { i }
function {:inline} $sext.i5.i160(i: i5) returns (i160) { i }
function {:inline} $sext.i5.i256(i: i5) returns (i256) { i }
function {:inline} $sext.i6.i8(i: i6) returns (i8) { i }
function {:inline} $sext.i6.i16(i: i6) returns (i16) { i }
function {:inline} $sext.i6.i24(i: i6) returns (i24) { i }
function {:inline} $sext.i6.i32(i: i6) returns (i32) { i }
function {:inline} $sext.i6.i40(i: i6) returns (i40) { i }
function {:inline} $sext.i6.i48(i: i6) returns (i48) { i }
function {:inline} $sext.i6.i56(i: i6) returns (i56) { i }
function {:inline} $sext.i6.i64(i: i6) returns (i64) { i }
function {:inline} $sext.i6.i80(i: i6) returns (i80) { i }
function {:inline} $sext.i6.i88(i: i6) returns (i88) { i }
function {:inline} $sext.i6.i96(i: i6) returns (i96) { i }
function {:inline} $sext.i6.i128(i: i6) returns (i128) { i }
function {:inline} $sext.i6.i160(i: i6) returns (i160) { i }
function {:inline} $sext.i6.i256(i: i6) returns (i256) { i }
function {:inline} $sext.i8.i16(i: i8) returns (i16) { i }
function {:inline} $sext.i8.i24(i: i8) returns (i24) { i }
function {:inline} $sext.i8.i32(i: i8) returns (i32) { i }
function {:inline} $sext.i8.i40(i: i8) returns (i40) { i }
function {:inline} $sext.i8.i48(i: i8) returns (i48) { i }
function {:inline} $sext.i8.i56(i: i8) returns (i56) { i }
function {:inline} $sext.i8.i64(i: i8) returns (i64) { i }
function {:inline} $sext.i8.i80(i: i8) returns (i80) { i }
function {:inline} $sext.i8.i88(i: i8) returns (i88) { i }
function {:inline} $sext.i8.i96(i: i8) returns (i96) { i }
function {:inline} $sext.i8.i128(i: i8) returns (i128) { i }
function {:inline} $sext.i8.i160(i: i8) returns (i160) { i }
function {:inline} $sext.i8.i256(i: i8) returns (i256) { i }
function {:inline} $sext.i16.i24(i: i16) returns (i24) { i }
function {:inline} $sext.i16.i32(i: i16) returns (i32) { i }
function {:inline} $sext.i16.i40(i: i16) returns (i40) { i }
function {:inline} $sext.i16.i48(i: i16) returns (i48) { i }
function {:inline} $sext.i16.i56(i: i16) returns (i56) { i }
function {:inline} $sext.i16.i64(i: i16) returns (i64) { i }
function {:inline} $sext.i16.i80(i: i16) returns (i80) { i }
function {:inline} $sext.i16.i88(i: i16) returns (i88) { i }
function {:inline} $sext.i16.i96(i: i16) returns (i96) { i }
function {:inline} $sext.i16.i128(i: i16) returns (i128) { i }
function {:inline} $sext.i16.i160(i: i16) returns (i160) { i }
function {:inline} $sext.i16.i256(i: i16) returns (i256) { i }
function {:inline} $sext.i24.i32(i: i24) returns (i32) { i }
function {:inline} $sext.i24.i40(i: i24) returns (i40) { i }
function {:inline} $sext.i24.i48(i: i24) returns (i48) { i }
function {:inline} $sext.i24.i56(i: i24) returns (i56) { i }
function {:inline} $sext.i24.i64(i: i24) returns (i64) { i }
function {:inline} $sext.i24.i80(i: i24) returns (i80) { i }
function {:inline} $sext.i24.i88(i: i24) returns (i88) { i }
function {:inline} $sext.i24.i96(i: i24) returns (i96) { i }
function {:inline} $sext.i24.i128(i: i24) returns (i128) { i }
function {:inline} $sext.i24.i160(i: i24) returns (i160) { i }
function {:inline} $sext.i24.i256(i: i24) returns (i256) { i }
function {:inline} $sext.i32.i40(i: i32) returns (i40) { i }
function {:inline} $sext.i32.i48(i: i32) returns (i48) { i }
function {:inline} $sext.i32.i56(i: i32) returns (i56) { i }
function {:inline} $sext.i32.i64(i: i32) returns (i64) { i }
function {:inline} $sext.i32.i80(i: i32) returns (i80) { i }
function {:inline} $sext.i32.i88(i: i32) returns (i88) { i }
function {:inline} $sext.i32.i96(i: i32) returns (i96) { i }
function {:inline} $sext.i32.i128(i: i32) returns (i128) { i }
function {:inline} $sext.i32.i160(i: i32) returns (i160) { i }
function {:inline} $sext.i32.i256(i: i32) returns (i256) { i }
function {:inline} $sext.i40.i48(i: i40) returns (i48) { i }
function {:inline} $sext.i40.i56(i: i40) returns (i56) { i }
function {:inline} $sext.i40.i64(i: i40) returns (i64) { i }
function {:inline} $sext.i40.i80(i: i40) returns (i80) { i }
function {:inline} $sext.i40.i88(i: i40) returns (i88) { i }
function {:inline} $sext.i40.i96(i: i40) returns (i96) { i }
function {:inline} $sext.i40.i128(i: i40) returns (i128) { i }
function {:inline} $sext.i40.i160(i: i40) returns (i160) { i }
function {:inline} $sext.i40.i256(i: i40) returns (i256) { i }
function {:inline} $sext.i48.i56(i: i48) returns (i56) { i }
function {:inline} $sext.i48.i64(i: i48) returns (i64) { i }
function {:inline} $sext.i48.i80(i: i48) returns (i80) { i }
function {:inline} $sext.i48.i88(i: i48) returns (i88) { i }
function {:inline} $sext.i48.i96(i: i48) returns (i96) { i }
function {:inline} $sext.i48.i128(i: i48) returns (i128) { i }
function {:inline} $sext.i48.i160(i: i48) returns (i160) { i }
function {:inline} $sext.i48.i256(i: i48) returns (i256) { i }
function {:inline} $sext.i56.i64(i: i56) returns (i64) { i }
function {:inline} $sext.i56.i80(i: i56) returns (i80) { i }
function {:inline} $sext.i56.i88(i: i56) returns (i88) { i }
function {:inline} $sext.i56.i96(i: i56) returns (i96) { i }
function {:inline} $sext.i56.i128(i: i56) returns (i128) { i }
function {:inline} $sext.i56.i160(i: i56) returns (i160) { i }
function {:inline} $sext.i56.i256(i: i56) returns (i256) { i }
function {:inline} $sext.i64.i80(i: i64) returns (i80) { i }
function {:inline} $sext.i64.i88(i: i64) returns (i88) { i }
function {:inline} $sext.i64.i96(i: i64) returns (i96) { i }
function {:inline} $sext.i64.i128(i: i64) returns (i128) { i }
function {:inline} $sext.i64.i160(i: i64) returns (i160) { i }
function {:inline} $sext.i64.i256(i: i64) returns (i256) { i }
function {:inline} $sext.i80.i88(i: i80) returns (i88) { i }
function {:inline} $sext.i80.i96(i: i80) returns (i96) { i }
function {:inline} $sext.i80.i128(i: i80) returns (i128) { i }
function {:inline} $sext.i80.i160(i: i80) returns (i160) { i }
function {:inline} $sext.i80.i256(i: i80) returns (i256) { i }
function {:inline} $sext.i88.i96(i: i88) returns (i96) { i }
function {:inline} $sext.i88.i128(i: i88) returns (i128) { i }
function {:inline} $sext.i88.i160(i: i88) returns (i160) { i }
function {:inline} $sext.i88.i256(i: i88) returns (i256) { i }
function {:inline} $sext.i96.i128(i: i96) returns (i128) { i }
function {:inline} $sext.i96.i160(i: i96) returns (i160) { i }
function {:inline} $sext.i96.i256(i: i96) returns (i256) { i }
function {:inline} $sext.i128.i160(i: i128) returns (i160) { i }
function {:inline} $sext.i128.i256(i: i128) returns (i256) { i }
function {:inline} $sext.i160.i256(i: i160) returns (i256) { i }
function {:inline} $zext.i1.i5(i: i1) returns (i5) { i }
function {:inline} $zext.i1.i6(i: i1) returns (i6) { i }
function {:inline} $zext.i1.i8(i: i1) returns (i8) { i }
function {:inline} $zext.i1.i16(i: i1) returns (i16) { i }
function {:inline} $zext.i1.i24(i: i1) returns (i24) { i }
function {:inline} $zext.i1.i32(i: i1) returns (i32) { i }
function {:inline} $zext.i1.i40(i: i1) returns (i40) { i }
function {:inline} $zext.i1.i48(i: i1) returns (i48) { i }
function {:inline} $zext.i1.i56(i: i1) returns (i56) { i }
function {:inline} $zext.i1.i64(i: i1) returns (i64) { i }
function {:inline} $zext.i1.i80(i: i1) returns (i80) { i }
function {:inline} $zext.i1.i88(i: i1) returns (i88) { i }
function {:inline} $zext.i1.i96(i: i1) returns (i96) { i }
function {:inline} $zext.i1.i128(i: i1) returns (i128) { i }
function {:inline} $zext.i1.i160(i: i1) returns (i160) { i }
function {:inline} $zext.i1.i256(i: i1) returns (i256) { i }
function {:inline} $zext.i5.i6(i: i5) returns (i6) { i }
function {:inline} $zext.i5.i8(i: i5) returns (i8) { i }
function {:inline} $zext.i5.i16(i: i5) returns (i16) { i }
function {:inline} $zext.i5.i24(i: i5) returns (i24) { i }
function {:inline} $zext.i5.i32(i: i5) returns (i32) { i }
function {:inline} $zext.i5.i40(i: i5) returns (i40) { i }
function {:inline} $zext.i5.i48(i: i5) returns (i48) { i }
function {:inline} $zext.i5.i56(i: i5) returns (i56) { i }
function {:inline} $zext.i5.i64(i: i5) returns (i64) { i }
function {:inline} $zext.i5.i80(i: i5) returns (i80) { i }
function {:inline} $zext.i5.i88(i: i5) returns (i88) { i }
function {:inline} $zext.i5.i96(i: i5) returns (i96) { i }
function {:inline} $zext.i5.i128(i: i5) returns (i128) { i }
function {:inline} $zext.i5.i160(i: i5) returns (i160) { i }
function {:inline} $zext.i5.i256(i: i5) returns (i256) { i }
function {:inline} $zext.i6.i8(i: i6) returns (i8) { i }
function {:inline} $zext.i6.i16(i: i6) returns (i16) { i }
function {:inline} $zext.i6.i24(i: i6) returns (i24) { i }
function {:inline} $zext.i6.i32(i: i6) returns (i32) { i }
function {:inline} $zext.i6.i40(i: i6) returns (i40) { i }
function {:inline} $zext.i6.i48(i: i6) returns (i48) { i }
function {:inline} $zext.i6.i56(i: i6) returns (i56) { i }
function {:inline} $zext.i6.i64(i: i6) returns (i64) { i }
function {:inline} $zext.i6.i80(i: i6) returns (i80) { i }
function {:inline} $zext.i6.i88(i: i6) returns (i88) { i }
function {:inline} $zext.i6.i96(i: i6) returns (i96) { i }
function {:inline} $zext.i6.i128(i: i6) returns (i128) { i }
function {:inline} $zext.i6.i160(i: i6) returns (i160) { i }
function {:inline} $zext.i6.i256(i: i6) returns (i256) { i }
function {:inline} $zext.i8.i16(i: i8) returns (i16) { i }
function {:inline} $zext.i8.i24(i: i8) returns (i24) { i }
function {:inline} $zext.i8.i32(i: i8) returns (i32) { i }
function {:inline} $zext.i8.i40(i: i8) returns (i40) { i }
function {:inline} $zext.i8.i48(i: i8) returns (i48) { i }
function {:inline} $zext.i8.i56(i: i8) returns (i56) { i }
function {:inline} $zext.i8.i64(i: i8) returns (i64) { i }
function {:inline} $zext.i8.i80(i: i8) returns (i80) { i }
function {:inline} $zext.i8.i88(i: i8) returns (i88) { i }
function {:inline} $zext.i8.i96(i: i8) returns (i96) { i }
function {:inline} $zext.i8.i128(i: i8) returns (i128) { i }
function {:inline} $zext.i8.i160(i: i8) returns (i160) { i }
function {:inline} $zext.i8.i256(i: i8) returns (i256) { i }
function {:inline} $zext.i16.i24(i: i16) returns (i24) { i }
function {:inline} $zext.i16.i32(i: i16) returns (i32) { i }
function {:inline} $zext.i16.i40(i: i16) returns (i40) { i }
function {:inline} $zext.i16.i48(i: i16) returns (i48) { i }
function {:inline} $zext.i16.i56(i: i16) returns (i56) { i }
function {:inline} $zext.i16.i64(i: i16) returns (i64) { i }
function {:inline} $zext.i16.i80(i: i16) returns (i80) { i }
function {:inline} $zext.i16.i88(i: i16) returns (i88) { i }
function {:inline} $zext.i16.i96(i: i16) returns (i96) { i }
function {:inline} $zext.i16.i128(i: i16) returns (i128) { i }
function {:inline} $zext.i16.i160(i: i16) returns (i160) { i }
function {:inline} $zext.i16.i256(i: i16) returns (i256) { i }
function {:inline} $zext.i24.i32(i: i24) returns (i32) { i }
function {:inline} $zext.i24.i40(i: i24) returns (i40) { i }
function {:inline} $zext.i24.i48(i: i24) returns (i48) { i }
function {:inline} $zext.i24.i56(i: i24) returns (i56) { i }
function {:inline} $zext.i24.i64(i: i24) returns (i64) { i }
function {:inline} $zext.i24.i80(i: i24) returns (i80) { i }
function {:inline} $zext.i24.i88(i: i24) returns (i88) { i }
function {:inline} $zext.i24.i96(i: i24) returns (i96) { i }
function {:inline} $zext.i24.i128(i: i24) returns (i128) { i }
function {:inline} $zext.i24.i160(i: i24) returns (i160) { i }
function {:inline} $zext.i24.i256(i: i24) returns (i256) { i }
function {:inline} $zext.i32.i40(i: i32) returns (i40) { i }
function {:inline} $zext.i32.i48(i: i32) returns (i48) { i }
function {:inline} $zext.i32.i56(i: i32) returns (i56) { i }
function {:inline} $zext.i32.i64(i: i32) returns (i64) { i }
function {:inline} $zext.i32.i80(i: i32) returns (i80) { i }
function {:inline} $zext.i32.i88(i: i32) returns (i88) { i }
function {:inline} $zext.i32.i96(i: i32) returns (i96) { i }
function {:inline} $zext.i32.i128(i: i32) returns (i128) { i }
function {:inline} $zext.i32.i160(i: i32) returns (i160) { i }
function {:inline} $zext.i32.i256(i: i32) returns (i256) { i }
function {:inline} $zext.i40.i48(i: i40) returns (i48) { i }
function {:inline} $zext.i40.i56(i: i40) returns (i56) { i }
function {:inline} $zext.i40.i64(i: i40) returns (i64) { i }
function {:inline} $zext.i40.i80(i: i40) returns (i80) { i }
function {:inline} $zext.i40.i88(i: i40) returns (i88) { i }
function {:inline} $zext.i40.i96(i: i40) returns (i96) { i }
function {:inline} $zext.i40.i128(i: i40) returns (i128) { i }
function {:inline} $zext.i40.i160(i: i40) returns (i160) { i }
function {:inline} $zext.i40.i256(i: i40) returns (i256) { i }
function {:inline} $zext.i48.i56(i: i48) returns (i56) { i }
function {:inline} $zext.i48.i64(i: i48) returns (i64) { i }
function {:inline} $zext.i48.i80(i: i48) returns (i80) { i }
function {:inline} $zext.i48.i88(i: i48) returns (i88) { i }
function {:inline} $zext.i48.i96(i: i48) returns (i96) { i }
function {:inline} $zext.i48.i128(i: i48) returns (i128) { i }
function {:inline} $zext.i48.i160(i: i48) returns (i160) { i }
function {:inline} $zext.i48.i256(i: i48) returns (i256) { i }
function {:inline} $zext.i56.i64(i: i56) returns (i64) { i }
function {:inline} $zext.i56.i80(i: i56) returns (i80) { i }
function {:inline} $zext.i56.i88(i: i56) returns (i88) { i }
function {:inline} $zext.i56.i96(i: i56) returns (i96) { i }
function {:inline} $zext.i56.i128(i: i56) returns (i128) { i }
function {:inline} $zext.i56.i160(i: i56) returns (i160) { i }
function {:inline} $zext.i56.i256(i: i56) returns (i256) { i }
function {:inline} $zext.i64.i80(i: i64) returns (i80) { i }
function {:inline} $zext.i64.i88(i: i64) returns (i88) { i }
function {:inline} $zext.i64.i96(i: i64) returns (i96) { i }
function {:inline} $zext.i64.i128(i: i64) returns (i128) { i }
function {:inline} $zext.i64.i160(i: i64) returns (i160) { i }
function {:inline} $zext.i64.i256(i: i64) returns (i256) { i }
function {:inline} $zext.i80.i88(i: i80) returns (i88) { i }
function {:inline} $zext.i80.i96(i: i80) returns (i96) { i }
function {:inline} $zext.i80.i128(i: i80) returns (i128) { i }
function {:inline} $zext.i80.i160(i: i80) returns (i160) { i }
function {:inline} $zext.i80.i256(i: i80) returns (i256) { i }
function {:inline} $zext.i88.i96(i: i88) returns (i96) { i }
function {:inline} $zext.i88.i128(i: i88) returns (i128) { i }
function {:inline} $zext.i88.i160(i: i88) returns (i160) { i }
function {:inline} $zext.i88.i256(i: i88) returns (i256) { i }
function {:inline} $zext.i96.i128(i: i96) returns (i128) { i }
function {:inline} $zext.i96.i160(i: i96) returns (i160) { i }
function {:inline} $zext.i96.i256(i: i96) returns (i256) { i }
function {:inline} $zext.i128.i160(i: i128) returns (i160) { i }
function {:inline} $zext.i128.i256(i: i128) returns (i256) { i }
function {:inline} $zext.i160.i256(i: i160) returns (i256) { i }
function $extractvalue.i1(p: ref, i: int) returns (i1);
function $extractvalue.i5(p: ref, i: int) returns (i5);
function $extractvalue.i6(p: ref, i: int) returns (i6);
function $extractvalue.i8(p: ref, i: int) returns (i8);
function $extractvalue.i16(p: ref, i: int) returns (i16);
function $extractvalue.i24(p: ref, i: int) returns (i24);
function $extractvalue.i32(p: ref, i: int) returns (i32);
function $extractvalue.i40(p: ref, i: int) returns (i40);
function $extractvalue.i48(p: ref, i: int) returns (i48);
function $extractvalue.i56(p: ref, i: int) returns (i56);
function $extractvalue.i64(p: ref, i: int) returns (i64);
function $extractvalue.i80(p: ref, i: int) returns (i80);
function $extractvalue.i88(p: ref, i: int) returns (i88);
function $extractvalue.i96(p: ref, i: int) returns (i96);
function $extractvalue.i128(p: ref, i: int) returns (i128);
function $extractvalue.i160(p: ref, i: int) returns (i160);
function $extractvalue.i256(p: ref, i: int) returns (i256);
// Pointer arithmetic operations
function {:inline} $add.ref(p1: ref, p2: ref) returns (ref) { $add.i64(p1, p2) }
function {:inline} $sub.ref(p1: ref, p2: ref) returns (ref) { $sub.i64(p1, p2) }
function {:inline} $mul.ref(p1: ref, p2: ref) returns (ref) { $mul.i64(p1, p2) }

// Pointer predicates
function {:inline} $eq.ref(p1: ref, p2: ref) returns (i1) { (if $eq.i64.bool(p1, p2) then 1 else 0) }
function {:inline} $eq.ref.bool(p1: ref, p2: ref) returns (bool) { $eq.i64.bool(p1, p2) }
function {:inline} $ne.ref(p1: ref, p2: ref) returns (i1) { (if $ne.i64.bool(p1, p2) then 1 else 0) }
function {:inline} $ne.ref.bool(p1: ref, p2: ref) returns (bool) { $ne.i64.bool(p1, p2) }
function {:inline} $ugt.ref(p1: ref, p2: ref) returns (i1) { (if $ugt.i64.bool(p1, p2) then 1 else 0) }
function {:inline} $ugt.ref.bool(p1: ref, p2: ref) returns (bool) { $ugt.i64.bool(p1, p2) }
function {:inline} $uge.ref(p1: ref, p2: ref) returns (i1) { (if $uge.i64.bool(p1, p2) then 1 else 0) }
function {:inline} $uge.ref.bool(p1: ref, p2: ref) returns (bool) { $uge.i64.bool(p1, p2) }
function {:inline} $ult.ref(p1: ref, p2: ref) returns (i1) { (if $ult.i64.bool(p1, p2) then 1 else 0) }
function {:inline} $ult.ref.bool(p1: ref, p2: ref) returns (bool) { $ult.i64.bool(p1, p2) }
function {:inline} $ule.ref(p1: ref, p2: ref) returns (i1) { (if $ule.i64.bool(p1, p2) then 1 else 0) }
function {:inline} $ule.ref.bool(p1: ref, p2: ref) returns (bool) { $ule.i64.bool(p1, p2) }
function {:inline} $sgt.ref(p1: ref, p2: ref) returns (i1) { (if $sgt.i64.bool(p1, p2) then 1 else 0) }
function {:inline} $sgt.ref.bool(p1: ref, p2: ref) returns (bool) { $sgt.i64.bool(p1, p2) }
function {:inline} $sge.ref(p1: ref, p2: ref) returns (i1) { (if $sge.i64.bool(p1, p2) then 1 else 0) }
function {:inline} $sge.ref.bool(p1: ref, p2: ref) returns (bool) { $sge.i64.bool(p1, p2) }
function {:inline} $slt.ref(p1: ref, p2: ref) returns (i1) { (if $slt.i64.bool(p1, p2) then 1 else 0) }
function {:inline} $slt.ref.bool(p1: ref, p2: ref) returns (bool) { $slt.i64.bool(p1, p2) }
function {:inline} $sle.ref(p1: ref, p2: ref) returns (i1) { (if $sle.i64.bool(p1, p2) then 1 else 0) }
function {:inline} $sle.ref.bool(p1: ref, p2: ref) returns (bool) { $sle.i64.bool(p1, p2) }

// Pointer load/store operations
function {:inline} $load.ref(M: [ref] ref, p: ref) returns (ref) { M[p] }
function {:inline} $store.ref(M: [ref] ref, p: ref, i: ref) returns ([ref] ref) { M[p := i] }

// Pointer conversion
function {:inline} $bitcast.ref.ref(p: ref) returns (ref) { p }
function $extractvalue.ref(p: ref, i: int) returns (ref);
// Pointer-number conversion
function {:inline} $p2i.ref.i8(p: ref) returns (i8) { $trunc.i64.i8(p) }
function {:inline} $i2p.i8.ref(i: i8) returns (ref) { $zext.i8.i64(i) }
function {:inline} $p2i.ref.i16(p: ref) returns (i16) { $trunc.i64.i16(p) }
function {:inline} $i2p.i16.ref(i: i16) returns (ref) { $zext.i16.i64(i) }
function {:inline} $p2i.ref.i32(p: ref) returns (i32) { $trunc.i64.i32(p) }
function {:inline} $i2p.i32.ref(i: i32) returns (ref) { $zext.i32.i64(i) }
function {:inline} $p2i.ref.i64(p: ref) returns (i64) { p }
function {:inline} $i2p.i64.ref(i: i64) returns (ref) { i }

function $fp(ipart: int, fpart: int, epart: int) returns (float);
// Floating-point arithmetic operations
function $abs.float(f: float) returns (float);
function $round.float(f: float) returns (float);
function $sqrt.float(f: float) returns (float);
function $fadd.float(f1: float, f2: float) returns (float);
function $fsub.float(f1: float, f2: float) returns (float);
function $fmul.float(f1: float, f2: float) returns (float);
function $fdiv.float(f1: float, f2: float) returns (float);
function $frem.float(f1: float, f2: float) returns (float);
function $min.float(f1: float, f2: float) returns (float);
function $max.float(f1: float, f2: float) returns (float);
function $fma.float(f1: float, f2: float, f3: float) returns (float);
// Floating-point predicates
function $foeq.float.bool(f1: float, f2: float) returns (bool);
function $fole.float.bool(f1: float, f2: float) returns (bool);
function $folt.float.bool(f1: float, f2: float) returns (bool);
function $foge.float.bool(f1: float, f2: float) returns (bool);
function $fogt.float.bool(f1: float, f2: float) returns (bool);
function $fone.float.bool(f1: float, f2: float) returns (bool);
function $ford.float.bool(f1: float, f2: float) returns (bool);
function $fueq.float.bool(f1: float, f2: float) returns (bool);
function $fugt.float.bool(f1: float, f2: float) returns (bool);
function $fuge.float.bool(f1: float, f2: float) returns (bool);
function $fult.float.bool(f1: float, f2: float) returns (bool);
function $fule.float.bool(f1: float, f2: float) returns (bool);
function $fune.float.bool(f1: float, f2: float) returns (bool);
function $funo.float.bool(f1: float, f2: float) returns (bool);
function $ffalse.float.bool(f1: float, f2: float) returns (bool);
function $ftrue.float.bool(f1: float, f2: float) returns (bool);
// Floating-point/integer conversion
function $bitcast.float.i8(f: float) returns (i8);
function $bitcast.float.i16(f: float) returns (i16);
function $bitcast.float.i32(f: float) returns (i32);
function $bitcast.float.i64(f: float) returns (i64);
function $bitcast.float.i80(f: float) returns (i80);
function $bitcast.i8.float(i: i8) returns (float);
function $bitcast.i16.float(i: i16) returns (float);
function $bitcast.i32.float(i: i32) returns (float);
function $bitcast.i64.float(i: i64) returns (float);
function $bitcast.i80.float(i: i80) returns (float);
function $fp2si.float.i1(f: float) returns (i1);
function $fp2si.float.i5(f: float) returns (i5);
function $fp2si.float.i6(f: float) returns (i6);
function $fp2si.float.i8(f: float) returns (i8);
function $fp2si.float.i16(f: float) returns (i16);
function $fp2si.float.i24(f: float) returns (i24);
function $fp2si.float.i32(f: float) returns (i32);
function $fp2si.float.i40(f: float) returns (i40);
function $fp2si.float.i48(f: float) returns (i48);
function $fp2si.float.i56(f: float) returns (i56);
function $fp2si.float.i64(f: float) returns (i64);
function $fp2si.float.i80(f: float) returns (i80);
function $fp2si.float.i88(f: float) returns (i88);
function $fp2si.float.i96(f: float) returns (i96);
function $fp2si.float.i128(f: float) returns (i128);
function $fp2si.float.i160(f: float) returns (i160);
function $fp2si.float.i256(f: float) returns (i256);
function $fp2ui.float.i1(f: float) returns (i1);
function $fp2ui.float.i5(f: float) returns (i5);
function $fp2ui.float.i6(f: float) returns (i6);
function $fp2ui.float.i8(f: float) returns (i8);
function $fp2ui.float.i16(f: float) returns (i16);
function $fp2ui.float.i24(f: float) returns (i24);
function $fp2ui.float.i32(f: float) returns (i32);
function $fp2ui.float.i40(f: float) returns (i40);
function $fp2ui.float.i48(f: float) returns (i48);
function $fp2ui.float.i56(f: float) returns (i56);
function $fp2ui.float.i64(f: float) returns (i64);
function $fp2ui.float.i80(f: float) returns (i80);
function $fp2ui.float.i88(f: float) returns (i88);
function $fp2ui.float.i96(f: float) returns (i96);
function $fp2ui.float.i128(f: float) returns (i128);
function $fp2ui.float.i160(f: float) returns (i160);
function $fp2ui.float.i256(f: float) returns (i256);
function $si2fp.i1.float(i: i1) returns (float);
function $si2fp.i5.float(i: i5) returns (float);
function $si2fp.i6.float(i: i6) returns (float);
function $si2fp.i8.float(i: i8) returns (float);
function $si2fp.i16.float(i: i16) returns (float);
function $si2fp.i24.float(i: i24) returns (float);
function $si2fp.i32.float(i: i32) returns (float);
function $si2fp.i40.float(i: i40) returns (float);
function $si2fp.i48.float(i: i48) returns (float);
function $si2fp.i56.float(i: i56) returns (float);
function $si2fp.i64.float(i: i64) returns (float);
function $si2fp.i80.float(i: i80) returns (float);
function $si2fp.i88.float(i: i88) returns (float);
function $si2fp.i96.float(i: i96) returns (float);
function $si2fp.i128.float(i: i128) returns (float);
function $si2fp.i160.float(i: i160) returns (float);
function $si2fp.i256.float(i: i256) returns (float);
function $ui2fp.i1.float(i: i1) returns (float);
function $ui2fp.i5.float(i: i5) returns (float);
function $ui2fp.i6.float(i: i6) returns (float);
function $ui2fp.i8.float(i: i8) returns (float);
function $ui2fp.i16.float(i: i16) returns (float);
function $ui2fp.i24.float(i: i24) returns (float);
function $ui2fp.i32.float(i: i32) returns (float);
function $ui2fp.i40.float(i: i40) returns (float);
function $ui2fp.i48.float(i: i48) returns (float);
function $ui2fp.i56.float(i: i56) returns (float);
function $ui2fp.i64.float(i: i64) returns (float);
function $ui2fp.i80.float(i: i80) returns (float);
function $ui2fp.i88.float(i: i88) returns (float);
function $ui2fp.i96.float(i: i96) returns (float);
function $ui2fp.i128.float(i: i128) returns (float);
function $ui2fp.i160.float(i: i160) returns (float);
function $ui2fp.i256.float(i: i256) returns (float);
// Floating-point conversion
function $fpext.float.float(f: float) returns (float);
function $fptrunc.float.float(f: float) returns (float);
// Floating-point load/store operations
function {:inline} $load.float(M: [ref] float, p: ref) returns (float) { M[p] }
function {:inline} $store.float(M: [ref] float, p: ref, f: float) returns ([ref] float) { M[p := f] }
function {:inline} $load.unsafe.float(M: [ref] i8, p: ref) returns (float) { $bitcast.i8.float(M[p]) }
function {:inline} $store.unsafe.float(M: [ref] i8, p: ref, f: float) returns ([ref] i8) { M[p := $bitcast.float.i8(f)] }
function $extractvalue.float(p: ref, i: int) returns (float);
const jiffies: ref;
axiom (jiffies == $sub.ref(0, 1032));
const tcp_reno: ref;
axiom (tcp_reno == $sub.ref(0, 2192));
const {:count 83} .str.2: ref;
axiom (.str.2 == $sub.ref(0, 3299));
const {:count 16} .str.3: ref;
axiom (.str.3 == $sub.ref(0, 4339));
const {:count 59} .str.1: ref;
axiom (.str.1 == $sub.ref(0, 5422));
const .str: ref;
axiom (.str == $sub.ref(0, 6520));
const {:count 3} sysctl_tcp_wmem: ref;
axiom (sysctl_tcp_wmem == $sub.ref(0, 7556));
const {:count 3} sysctl_tcp_rmem: ref;
axiom (sysctl_tcp_rmem == $sub.ref(0, 8592));
const sysctl_tcp_timestamps: ref;
axiom (sysctl_tcp_timestamps == $sub.ref(0, 9620));
const sysctl_tcp_window_scaling: ref;
axiom (sysctl_tcp_window_scaling == $sub.ref(0, 10648));
const sysctl_tcp_sack: ref;
axiom (sysctl_tcp_sack == $sub.ref(0, 11676));
const sysctl_tcp_max_reordering: ref;
axiom (sysctl_tcp_max_reordering == $sub.ref(0, 12704));
const sysctl_tcp_dsack: ref;
axiom (sysctl_tcp_dsack == $sub.ref(0, 13732));
const sysctl_tcp_app_win: ref;
axiom (sysctl_tcp_app_win == $sub.ref(0, 14760));
const sysctl_tcp_adv_win_scale: ref;
axiom (sysctl_tcp_adv_win_scale == $sub.ref(0, 15788));
const sysctl_tcp_challenge_ack_limit: ref;
axiom (sysctl_tcp_challenge_ack_limit == $sub.ref(0, 16816));
const sysctl_tcp_max_orphans: ref;
axiom (sysctl_tcp_max_orphans == $sub.ref(0, 17844));
const sysctl_tcp_frto: ref;
axiom (sysctl_tcp_frto == $sub.ref(0, 18872));
const sysctl_tcp_min_rtt_wlen: ref;
axiom (sysctl_tcp_min_rtt_wlen == $sub.ref(0, 19900));
const sysctl_tcp_moderate_rcvbuf: ref;
axiom (sysctl_tcp_moderate_rcvbuf == $sub.ref(0, 20928));
const sysctl_tcp_early_retrans: ref;
axiom (sysctl_tcp_early_retrans == $sub.ref(0, 21956));
const sysctl_tcp_invalid_ratelimit: ref;
axiom (sysctl_tcp_invalid_ratelimit == $sub.ref(0, 22984));
const sysctl_tcp_pacing_ss_ratio: ref;
axiom (sysctl_tcp_pacing_ss_ratio == $sub.ref(0, 24012));
const sysctl_tcp_pacing_ca_ratio: ref;
axiom (sysctl_tcp_pacing_ca_ratio == $sub.ref(0, 25040));
const {:count 3} sysctl_tcp_mem: ref;
axiom (sysctl_tcp_mem == $sub.ref(0, 26088));
const sysctl_tcp_fack: ref;
axiom (sysctl_tcp_fack == $sub.ref(0, 27116));
const sysctl_tcp_stdurg: ref;
axiom (sysctl_tcp_stdurg == $sub.ref(0, 28144));
const sysctl_tcp_rfc1337: ref;
axiom (sysctl_tcp_rfc1337 == $sub.ref(0, 29172));
const stderr: ref;
axiom (stderr == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776)));
const {:count 50} .str.4: ref;
axiom (.str.4 == $sub.ref(0, 30246));
const {:count 43} .str.5: ref;
axiom (.str.5 == $sub.ref(0, 31313));
const {:count 32} __func__.tcp_skb_mark_lost_uncond_verify: ref;
axiom (__func__.tcp_skb_mark_lost_uncond_verify == $sub.ref(0, 32369));
const {:count 15} __func__.tcp_enter_loss: ref;
axiom (__func__.tcp_enter_loss == $sub.ref(0, 33408));
const {:count 18} __func__.tcp_ecn_queue_cwr: ref;
axiom (__func__.tcp_ecn_queue_cwr == $sub.ref(0, 34450));
const {:count 22} __func__.tcp_simple_retransmit: ref;
axiom (__func__.tcp_simple_retransmit == $sub.ref(0, 35496));
const {:count 10} __func__.tcp_reset: ref;
axiom (__func__.tcp_reset == $sub.ref(0, 36530));
const {:count 62} .str.6: ref;
axiom (.str.6 == $sub.ref(0, 37616));
const {:count 61} .str.7: ref;
axiom (.str.7 == $sub.ref(0, 38701));
const {:count 22} .str.8: ref;
axiom (.str.8 == $sub.ref(0, 39747));
const {:count 16} .str.9: ref;
axiom (.str.9 == $sub.ref(0, 40787));
const {:count 6} .str.10: ref;
axiom (.str.10 == $sub.ref(0, 41817));
const {:count 17} .str.11: ref;
axiom (.str.11 == $sub.ref(0, 42858));
const {:count 14} .str.2.16: ref;
axiom (.str.2.16 == $sub.ref(0, 43896));
const env_value_str: ref;
axiom (env_value_str == $sub.ref(0, 44928));
const {:count 3} .str.1.28: ref;
axiom (.str.1.28 == $sub.ref(0, 45955));
const {:count 14} .str.29: ref;
axiom (.str.29 == $sub.ref(0, 46993));
const errno_global: ref;
axiom (errno_global == $sub.ref(0, 48021));
const tcp_reno_ssthresh: ref;
axiom (tcp_reno_ssthresh == $sub.ref(0, 49053));
procedure  tcp_reno_ssthresh($p0: ref)
  returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
$bb0:
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 235, 37} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  call $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  $M.0 := $store.ref($M.0, $p1, $p0);
  assume true;
  assume true;
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 235, 37} true;
  assume {:verifier.code 0} true;
  $p3 := $load.ref($M.0, $p1);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 235, 30} true;
  assume {:verifier.code 0} true;
  call $p4 := tcp_sk($p3);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 235, 25} true;
  assume {:verifier.code 0} true;
  $M.2 := $store.ref($M.2, $p2, $p4);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 237, 9} true;
  assume {:verifier.code 0} true;
  $p5 := $load.ref($M.2, $p2);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 237, 9} true;
  assume {:verifier.code 0} true;
  $p6 := $add.ref($add.ref($p5, $mul.ref(0, 784)), $mul.ref(452, 1));
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 237, 9} true;
  assume {:verifier.code 0} true;
  $i7 := $load.i32($M.1, $p6);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 237, 9} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: ../../stub_model/source/simple_tcp_cong.c:237:9: warning: over-approximating bitwise operation lshr;
  $i8 := $lshr.i32($i7, 1);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 237, 9} true;
  assume {:verifier.code 0} true;
  call $i9 := max_func($i8, 2);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 237, 2} true;
  assume {:verifier.code 0} true;
  $r := $i9;
  $exn := false;
  return;
}
const tcp_reno_cong_avoid: ref;
axiom (tcp_reno_cong_avoid == $sub.ref(0, 50085));
procedure  tcp_reno_cong_avoid($p0: ref, $i1: i32, $i2: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $p18: ref;
  var $i19: i1;
  var $p20: ref;
  var $i21: i1;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
$bb0:
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 211, 31} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  call $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p5 := $alloc($mul.ref(4, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  $M.3 := $store.ref($M.3, $p3, $p0);
  assume true;
  assume {:verifier.code 0} true;
  $M.4 := $store.i32($M.4, $p4, $i1);
  assume true;
  assume {:verifier.code 0} true;
  $M.5 := $store.i32($M.5, $p5, $i2);
  assume true;
  assume true;
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 211, 31} true;
  assume {:verifier.code 0} true;
  $p7 := $load.ref($M.3, $p3);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 211, 24} true;
  assume {:verifier.code 0} true;
  call $p8 := tcp_sk($p7);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 211, 19} true;
  assume {:verifier.code 0} true;
  $M.6 := $store.ref($M.6, $p6, $p8);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 214, 96} true;
  assume {:verifier.code 0} true;
  $i9 := $load.i32($M.4, $p4);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 214, 101} true;
  assume {:verifier.code 0} true;
  $i10 := $load.i32($M.5, $p5);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 214, 108} true;
  assume {:verifier.code 0} true;
  $p11 := $load.ref($M.6, $p6);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 214, 112} true;
  assume {:verifier.code 0} true;
  $p12 := $add.ref($add.ref($p11, $mul.ref(0, 784)), $mul.ref(456, 1));
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 214, 112} true;
  assume {:verifier.code 0} true;
  $i13 := $load.i32($M.1, $p12);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 214, 126} true;
  assume {:verifier.code 0} true;
  $p14 := $load.ref($M.6, $p6);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 214, 130} true;
  assume {:verifier.code 0} true;
  $p15 := $add.ref($add.ref($p14, $mul.ref(0, 784)), $mul.ref(396, 1));
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 214, 130} true;
  assume {:verifier.code 0} true;
  $i16 := $load.i32($M.1, $p15);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 214, 2} true;
  assume {:verifier.code 0} true;
  call $i17 := printf.ref.i32.i32.i32.i32(.str.2, $i9, $i10, $i13, $i16);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 217, 27} true;
  assume {:verifier.code 0} true;
  $p18 := $load.ref($M.3, $p3);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 217, 7} true;
  assume {:verifier.code 0} true;
  call $i19 := tcp_is_cwnd_limited($p18);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 217, 6} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i19} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i19 == 1);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 221, 24} true;
  assume {:verifier.code 0} true;
  $p20 := $load.ref($M.6, $p6);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 221, 6} true;
  assume {:verifier.code 0} true;
  call $i21 := tcp_in_slow_start($p20);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 221, 6} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i21} true;
  goto $bb4, $bb5;
$bb2:
  assume !(($i19 == 1));
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 218, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 229, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
$bb4:
  assume ($i21 == 1);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 222, 26} true;
  assume {:verifier.code 0} true;
  $p22 := $load.ref($M.6, $p6);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 222, 30} true;
  assume {:verifier.code 0} true;
  $i23 := $load.i32($M.5, $p5);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 222, 11} true;
  assume {:verifier.code 0} true;
  call $i24 := tcp_slow_start($p22, $i23);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 222, 9} true;
  assume {:verifier.code 0} true;
  $M.5 := $store.i32($M.5, $p5, $i24);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 223, 8} true;
  assume {:verifier.code 0} true;
  $i25 := $load.i32($M.5, $p5);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 223, 8} true;
  assume {:verifier.code 0} true;
  $i26 := $ne.i32($i25, 0);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 223, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i26} true;
  goto $bb7, $bb8;
$bb5:
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 221, 6} true;
  assume {:verifier.code 0} true;
  assume !(($i21 == 1));
  goto $bb6;
$bb6:
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 226, 2} true;
  assume {:verifier.code 0} true;
  call $i27 := printf.ref(.str.3);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 228, 20} true;
  assume {:verifier.code 0} true;
  $p28 := $load.ref($M.6, $p6);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 228, 24} true;
  assume {:verifier.code 0} true;
  $p29 := $load.ref($M.6, $p6);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 228, 28} true;
  assume {:verifier.code 0} true;
  $p30 := $add.ref($add.ref($p29, $mul.ref(0, 784)), $mul.ref(452, 1));
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 228, 28} true;
  assume {:verifier.code 0} true;
  $i31 := $load.i32($M.1, $p30);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 228, 38} true;
  assume {:verifier.code 0} true;
  $i32 := $load.i32($M.5, $p5);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 228, 2} true;
  assume {:verifier.code 0} true;
  call tcp_cong_avoid_ai($p28, $i31, $i32);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 229, 1} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb7:
  assume ($i26 == 1);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 225, 2} true;
  assume {:verifier.code 0} true;
  goto $bb6;
$bb8:
  assume !(($i26 == 1));
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 224, 4} true;
  assume {:verifier.code 0} true;
  goto $bb3;
}
const tcp_reno_undo_cwnd: ref;
axiom (tcp_reno_undo_cwnd == $sub.ref(0, 51117));
procedure  tcp_reno_undo_cwnd($p0: ref)
  returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
$bb0:
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 243, 37} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  call $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  $M.7 := $store.ref($M.7, $p1, $p0);
  assume true;
  assume true;
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 243, 37} true;
  assume {:verifier.code 0} true;
  $p3 := $load.ref($M.7, $p1);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 243, 30} true;
  assume {:verifier.code 0} true;
  call $p4 := tcp_sk($p3);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 243, 25} true;
  assume {:verifier.code 0} true;
  $M.8 := $store.ref($M.8, $p2, $p4);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 245, 9} true;
  assume {:verifier.code 0} true;
  $p5 := $load.ref($M.8, $p2);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 245, 9} true;
  assume {:verifier.code 0} true;
  $p6 := $add.ref($add.ref($p5, $mul.ref(0, 784)), $mul.ref(452, 1));
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 245, 9} true;
  assume {:verifier.code 0} true;
  $i7 := $load.i32($M.1, $p6);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 245, 9} true;
  assume {:verifier.code 0} true;
  $p8 := $load.ref($M.8, $p2);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 245, 9} true;
  assume {:verifier.code 0} true;
  $p9 := $add.ref($add.ref($p8, $mul.ref(0, 784)), $mul.ref(448, 1));
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 245, 9} true;
  assume {:verifier.code 0} true;
  $i10 := $load.i32($M.1, $p9);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 245, 9} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: ../../stub_model/source/simple_tcp_cong.c:245:9: warning: over-approximating bitwise operation shl;
  $i11 := $shl.i32($i10, 1);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 245, 9} true;
  assume {:verifier.code 0} true;
  call $i12 := max_func($i7, $i11);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 245, 2} true;
  assume {:verifier.code 0} true;
  $r := $i12;
  $exn := false;
  return;
}
const llvm.dbg.declare: ref;
axiom (llvm.dbg.declare == $sub.ref(0, 52149));
procedure  llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);
const tcp_sk: ref;
axiom (tcp_sk == $sub.ref(0, 53181));
procedure  tcp_sk($p0: ref)
  returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
$bb0:
  assume {:sourceloc "../../stub_model/header/simple_tcp_sock.h", 262, 28} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  call $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  $M.9 := $store.ref($M.9, $p1, $p0);
  assume true;
  assume {:sourceloc "../../stub_model/header/simple_tcp_sock.h", 262, 28} true;
  assume {:verifier.code 0} true;
  $p2 := $load.ref($M.9, $p1);
  assume {:sourceloc "../../stub_model/header/simple_tcp_sock.h", 262, 9} true;
  assume {:verifier.code 0} true;
  $p3 := $bitcast.ref.ref($p2);
  assume {:sourceloc "../../stub_model/header/simple_tcp_sock.h", 262, 2} true;
  assume {:verifier.code 0} true;
  $r := $p3;
  $exn := false;
  return;
}
const max_func: ref;
axiom (max_func == $sub.ref(0, 54213));
procedure  max_func($i0: i32, $i1: i32)
  returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
$bb0:
  assume {:sourceloc "../../stub_model/header/simple_kernel.h", 34, 6} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  call $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  $M.10 := $store.i32($M.10, $p3, $i0);
  assume true;
  assume {:verifier.code 0} true;
  $M.11 := $store.i32($M.11, $p4, $i1);
  assume true;
  assume {:sourceloc "../../stub_model/header/simple_kernel.h", 34, 6} true;
  assume {:verifier.code 0} true;
  $i5 := $load.i32($M.10, $p3);
  assume {:sourceloc "../../stub_model/header/simple_kernel.h", 34, 10} true;
  assume {:verifier.code 0} true;
  $i6 := $load.i32($M.11, $p4);
  assume {:sourceloc "../../stub_model/header/simple_kernel.h", 34, 8} true;
  assume {:verifier.code 0} true;
  $i7 := $ugt.i32($i5, $i6);
  assume {:sourceloc "../../stub_model/header/simple_kernel.h", 34, 6} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i7} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i7 == 1);
  assume {:sourceloc "../../stub_model/header/simple_kernel.h", 35, 10} true;
  assume {:verifier.code 0} true;
  $i8 := $load.i32($M.10, $p3);
  assume {:sourceloc "../../stub_model/header/simple_kernel.h", 35, 3} true;
  assume {:verifier.code 0} true;
  $M.12 := $store.i32($M.12, $p2, $i8);
  assume {:sourceloc "../../stub_model/header/simple_kernel.h", 35, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i7 == 1));
  assume {:sourceloc "../../stub_model/header/simple_kernel.h", 37, 10} true;
  assume {:verifier.code 0} true;
  $i9 := $load.i32($M.11, $p4);
  assume {:sourceloc "../../stub_model/header/simple_kernel.h", 37, 3} true;
  assume {:verifier.code 0} true;
  $M.12 := $store.i32($M.12, $p2, $i9);
  assume {:sourceloc "../../stub_model/header/simple_kernel.h", 37, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "../../stub_model/header/simple_kernel.h", 38, 1} true;
  assume {:verifier.code 0} true;
  $i10 := $load.i32($M.12, $p2);
  assume {:sourceloc "../../stub_model/header/simple_kernel.h", 38, 1} true;
  assume {:verifier.code 0} true;
  $r := $i10;
  $exn := false;
  return;
}
const printf: ref;
axiom (printf == $sub.ref(0, 55245));
procedure  printf.ref.i32($p0: ref, p.1: i32)
  returns ($r: i32);
procedure  printf.ref($p0: ref)
  returns ($r: i32);
procedure  printf.ref.i32.i32($p0: ref, p.1: i32, p.2: i32)
  returns ($r: i32);
procedure  printf.ref.i32.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32, p.4: i32)
  returns ($r: i32);
procedure  printf.ref.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32)
  returns ($r: i32);
const tcp_is_cwnd_limited: ref;
axiom (tcp_is_cwnd_limited == $sub.ref(0, 56277));
procedure  tcp_is_cwnd_limited($p0: ref)
  returns ($r: i1)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $i18: i8;
  var $i19: i8;
  var $i20: i8;
  var $i21: i1;
  var $i22: i1;
$bb0:
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 517, 37} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  call $p1 := $alloc($mul.ref(1, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  $M.13 := $store.ref($M.13, $p2, $p0);
  assume true;
  assume true;
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 517, 37} true;
  assume {:verifier.code 0} true;
  $p4 := $load.ref($M.13, $p2);
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 517, 30} true;
  assume {:verifier.code 0} true;
  call $p5 := tcp_sk($p4);
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 517, 25} true;
  assume {:verifier.code 0} true;
  $M.14 := $store.ref($M.14, $p3, $p5);
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 520, 24} true;
  assume {:verifier.code 0} true;
  $p6 := $load.ref($M.14, $p3);
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 520, 6} true;
  assume {:verifier.code 0} true;
  call $i7 := tcp_in_slow_start($p6);
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 520, 6} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i7} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i7 == 1);
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 521, 10} true;
  assume {:verifier.code 0} true;
  $p8 := $load.ref($M.14, $p3);
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 521, 14} true;
  assume {:verifier.code 0} true;
  $p9 := $add.ref($add.ref($p8, $mul.ref(0, 784)), $mul.ref(452, 1));
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 521, 14} true;
  assume {:verifier.code 0} true;
  $i10 := $load.i32($M.1, $p9);
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 521, 29} true;
  assume {:verifier.code 0} true;
  $p11 := $load.ref($M.14, $p3);
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 521, 33} true;
  assume {:verifier.code 0} true;
  $p12 := $add.ref($add.ref($p11, $mul.ref(0, 784)), $mul.ref(396, 1));
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 521, 33} true;
  assume {:verifier.code 0} true;
  $i13 := $load.i32($M.1, $p12);
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 521, 27} true;
  assume {:verifier.code 0} true;
  $i14 := $mul.i32(2, $i13);
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 521, 23} true;
  assume {:verifier.code 0} true;
  $i15 := $ult.i32($i10, $i14);
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 521, 3} true;
  assume {:verifier.code 0} true;
  $M.15 := $store.i1($M.15, $p1, $i15);
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 521, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i7 == 1));
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 523, 9} true;
  assume {:verifier.code 0} true;
  $p16 := $load.ref($M.14, $p3);
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 523, 13} true;
  assume {:verifier.code 0} true;
  $p17 := $add.ref($add.ref($p16, $mul.ref(0, 784)), $mul.ref(351, 1));
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 523, 13} true;
  assume {:verifier.code 0} true;
  $i18 := $load.i8($M.1, $p17);
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 523, 13} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: ../../stub_model/header/simple_tcp.h:523:13: warning: over-approximating bitwise operation lshr;
  $i19 := $lshr.i8($i18, 6);
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 523, 13} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: ../../stub_model/header/simple_tcp.h:523:13: warning: over-approximating bitwise operation and;
  $i20 := $and.i8($i19, 1);
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 523, 9} true;
  assume {:verifier.code 0} true;
  $i21 := $ne.i8($i20, 0);
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 523, 2} true;
  assume {:verifier.code 0} true;
  $M.15 := $store.i1($M.15, $p1, $i21);
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 523, 2} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 524, 1} true;
  assume {:verifier.code 0} true;
  $i22 := $load.i1($M.15, $p1);
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 524, 1} true;
  assume {:verifier.code 0} true;
  $r := $i22;
  $exn := false;
  return;
}
const tcp_in_slow_start: ref;
axiom (tcp_in_slow_start == $sub.ref(0, 57309));
procedure  tcp_in_slow_start($p0: ref)
  returns ($r: i1)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
$bb0:
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 456, 9} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  call $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  $M.16 := $store.ref($M.16, $p1, $p0);
  assume true;
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 456, 9} true;
  assume {:verifier.code 0} true;
  $p2 := $load.ref($M.16, $p1);
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 456, 13} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($add.ref($p2, $mul.ref(0, 784)), $mul.ref(452, 1));
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 456, 13} true;
  assume {:verifier.code 0} true;
  $i4 := $load.i32($M.1, $p3);
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 456, 24} true;
  assume {:verifier.code 0} true;
  $p5 := $load.ref($M.16, $p1);
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 456, 28} true;
  assume {:verifier.code 0} true;
  $p6 := $add.ref($add.ref($p5, $mul.ref(0, 784)), $mul.ref(448, 1));
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 456, 28} true;
  assume {:verifier.code 0} true;
  $i7 := $load.i32($M.1, $p6);
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 456, 22} true;
  assume {:verifier.code 0} true;
  $i8 := $ult.i32($i4, $i7);
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 456, 2} true;
  assume {:verifier.code 0} true;
  $r := $i8;
  $exn := false;
  return;
}
const tcp_slow_start: ref;
axiom (tcp_slow_start == $sub.ref(0, 58341));
procedure  tcp_slow_start($p0: ref, $i1: i32)
  returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $i20: i32;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i32;
  var $i37: i32;
$bb0:
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 163, 13} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  call $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  $M.17 := $store.ref($M.17, $p2, $p0);
  assume true;
  assume {:verifier.code 0} true;
  $M.18 := $store.i32($M.18, $p3, $i1);
  assume true;
  assume true;
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 163, 13} true;
  assume {:verifier.code 0} true;
  $p5 := $load.ref($M.17, $p2);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 163, 13} true;
  assume {:verifier.code 0} true;
  $p6 := $add.ref($add.ref($p5, $mul.ref(0, 784)), $mul.ref(452, 1));
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 163, 13} true;
  assume {:verifier.code 0} true;
  $i7 := $load.i32($M.1, $p6);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 163, 13} true;
  assume {:verifier.code 0} true;
  $i8 := $load.i32($M.18, $p3);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 163, 13} true;
  assume {:verifier.code 0} true;
  $i9 := $add.i32($i7, $i8);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 163, 13} true;
  assume {:verifier.code 0} true;
  $p10 := $load.ref($M.17, $p2);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 163, 13} true;
  assume {:verifier.code 0} true;
  $p11 := $add.ref($add.ref($p10, $mul.ref(0, 784)), $mul.ref(448, 1));
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 163, 13} true;
  assume {:verifier.code 0} true;
  $i12 := $load.i32($M.1, $p11);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 163, 13} true;
  assume {:verifier.code 0} true;
  call $i13 := min_func($i9, $i12);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 163, 6} true;
  assume {:verifier.code 0} true;
  $M.19 := $store.i32($M.19, $p4, $i13);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 165, 11} true;
  assume {:verifier.code 0} true;
  $i14 := $load.i32($M.19, $p4);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 165, 18} true;
  assume {:verifier.code 0} true;
  $p15 := $load.ref($M.17, $p2);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 165, 22} true;
  assume {:verifier.code 0} true;
  $p16 := $add.ref($add.ref($p15, $mul.ref(0, 784)), $mul.ref(452, 1));
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 165, 22} true;
  assume {:verifier.code 0} true;
  $i17 := $load.i32($M.1, $p16);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 165, 16} true;
  assume {:verifier.code 0} true;
  $i18 := $sub.i32($i14, $i17);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 165, 8} true;
  assume {:verifier.code 0} true;
  $i19 := $load.i32($M.18, $p3);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 165, 8} true;
  assume {:verifier.code 0} true;
  $i20 := $sub.i32($i19, $i18);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 165, 8} true;
  assume {:verifier.code 0} true;
  $M.18 := $store.i32($M.18, $p3, $i20);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 166, 17} true;
  assume {:verifier.code 0} true;
  $i21 := $load.i32($M.19, $p4);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 166, 17} true;
  assume {:verifier.code 0} true;
  $p22 := $load.ref($M.17, $p2);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 166, 17} true;
  assume {:verifier.code 0} true;
  $p23 := $add.ref($add.ref($p22, $mul.ref(0, 784)), $mul.ref(460, 1));
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 166, 17} true;
  assume {:verifier.code 0} true;
  $i24 := $load.i32($M.1, $p23);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 166, 17} true;
  assume {:verifier.code 0} true;
  call $i25 := min_func($i21, $i24);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 166, 2} true;
  assume {:verifier.code 0} true;
  $p26 := $load.ref($M.17, $p2);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 166, 6} true;
  assume {:verifier.code 0} true;
  $p27 := $add.ref($add.ref($p26, $mul.ref(0, 784)), $mul.ref(452, 1));
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 166, 15} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.i32($M.1, $p27, $i25);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 169, 87} true;
  assume {:verifier.code 0} true;
  $i28 := $load.i32($M.19, $p4);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 169, 93} true;
  assume {:verifier.code 0} true;
  $i29 := $load.i32($M.18, $p3);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 169, 100} true;
  assume {:verifier.code 0} true;
  $p30 := $load.ref($M.17, $p2);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 169, 104} true;
  assume {:verifier.code 0} true;
  $p31 := $add.ref($add.ref($p30, $mul.ref(0, 784)), $mul.ref(452, 1));
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 169, 104} true;
  assume {:verifier.code 0} true;
  $i32 := $load.i32($M.1, $p31);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 169, 114} true;
  assume {:verifier.code 0} true;
  $p33 := $load.ref($M.17, $p2);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 169, 118} true;
  assume {:verifier.code 0} true;
  $p34 := $add.ref($add.ref($p33, $mul.ref(0, 784)), $mul.ref(460, 1));
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 169, 118} true;
  assume {:verifier.code 0} true;
  $i35 := $load.i32($M.1, $p34);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 169, 2} true;
  assume {:verifier.code 0} true;
  call $i36 := printf.ref.i32.i32.i32.i32(.str, $i28, $i29, $i32, $i35);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 172, 9} true;
  assume {:verifier.code 0} true;
  $i37 := $load.i32($M.18, $p3);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 172, 2} true;
  assume {:verifier.code 0} true;
  $r := $i37;
  $exn := false;
  return;
}
const tcp_cong_avoid_ai: ref;
axiom (tcp_cong_avoid_ai == $sub.ref(0, 59373));
procedure  tcp_cong_avoid_ai($p0: ref, $i1: i32, $i2: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i32;
  var $i38: i32;
  var $i39: i32;
  var $i40: i32;
  var $i41: i32;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $i45: i32;
  var $i46: i32;
  var $p47: ref;
  var $p48: ref;
  var $i49: i32;
  var $i50: i32;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $p54: ref;
  var $p55: ref;
  var $i56: i32;
  var $i57: i32;
  var $p58: ref;
  var $p59: ref;
$bb0:
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 182, 72} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  call $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p5 := $alloc($mul.ref(4, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p6 := $alloc($mul.ref(4, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  $M.20 := $store.ref($M.20, $p3, $p0);
  assume true;
  assume {:verifier.code 0} true;
  $M.21 := $store.i32($M.21, $p4, $i1);
  assume true;
  assume {:verifier.code 0} true;
  $M.22 := $store.i32($M.22, $p5, $i2);
  assume true;
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 182, 72} true;
  assume {:verifier.code 0} true;
  $i7 := $load.i32($M.21, $p4);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 182, 75} true;
  assume {:verifier.code 0} true;
  $i8 := $load.i32($M.22, $p5);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 182, 82} true;
  assume {:verifier.code 0} true;
  $p9 := $load.ref($M.20, $p3);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 182, 86} true;
  assume {:verifier.code 0} true;
  $p10 := $add.ref($add.ref($p9, $mul.ref(0, 784)), $mul.ref(456, 1));
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 182, 86} true;
  assume {:verifier.code 0} true;
  $i11 := $load.i32($M.1, $p10);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 182, 2} true;
  assume {:verifier.code 0} true;
  call $i12 := printf.ref.i32.i32.i32(.str.1, $i7, $i8, $i11);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 186, 6} true;
  assume {:verifier.code 0} true;
  $p13 := $load.ref($M.20, $p3);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 186, 10} true;
  assume {:verifier.code 0} true;
  $p14 := $add.ref($add.ref($p13, $mul.ref(0, 784)), $mul.ref(456, 1));
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 186, 10} true;
  assume {:verifier.code 0} true;
  $i15 := $load.i32($M.1, $p14);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 186, 26} true;
  assume {:verifier.code 0} true;
  $i16 := $load.i32($M.21, $p4);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 186, 23} true;
  assume {:verifier.code 0} true;
  $i17 := $uge.i32($i15, $i16);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 186, 6} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i17} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i17 == 1);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 187, 3} true;
  assume {:verifier.code 0} true;
  $p18 := $load.ref($M.20, $p3);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 187, 7} true;
  assume {:verifier.code 0} true;
  $p19 := $add.ref($add.ref($p18, $mul.ref(0, 784)), $mul.ref(456, 1));
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 187, 20} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.i32($M.1, $p19, 0);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 188, 3} true;
  assume {:verifier.code 0} true;
  $p20 := $load.ref($M.20, $p3);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 188, 7} true;
  assume {:verifier.code 0} true;
  $p21 := $add.ref($add.ref($p20, $mul.ref(0, 784)), $mul.ref(452, 1));
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 188, 15} true;
  assume {:verifier.code 0} true;
  $i22 := $load.i32($M.1, $p21);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 188, 15} true;
  assume {:verifier.code 0} true;
  $i23 := $add.i32($i22, 1);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 188, 15} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.i32($M.1, $p21, $i23);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 189, 2} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 186, 6} true;
  assume {:verifier.code 0} true;
  assume !(($i17 == 1));
  goto $bb3;
$bb3:
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 191, 22} true;
  assume {:verifier.code 0} true;
  $i24 := $load.i32($M.22, $p5);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 191, 2} true;
  assume {:verifier.code 0} true;
  $p25 := $load.ref($M.20, $p3);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 191, 6} true;
  assume {:verifier.code 0} true;
  $p26 := $add.ref($add.ref($p25, $mul.ref(0, 784)), $mul.ref(456, 1));
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 191, 19} true;
  assume {:verifier.code 0} true;
  $i27 := $load.i32($M.1, $p26);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 191, 19} true;
  assume {:verifier.code 0} true;
  $i28 := $add.i32($i27, $i24);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 191, 19} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.i32($M.1, $p26, $i28);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 192, 6} true;
  assume {:verifier.code 0} true;
  $p29 := $load.ref($M.20, $p3);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 192, 10} true;
  assume {:verifier.code 0} true;
  $p30 := $add.ref($add.ref($p29, $mul.ref(0, 784)), $mul.ref(456, 1));
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 192, 10} true;
  assume {:verifier.code 0} true;
  $i31 := $load.i32($M.1, $p30);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 192, 26} true;
  assume {:verifier.code 0} true;
  $i32 := $load.i32($M.21, $p4);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 192, 23} true;
  assume {:verifier.code 0} true;
  $i33 := $uge.i32($i31, $i32);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 192, 6} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i33} true;
  goto $bb4, $bb5;
$bb4:
  assume ($i33 == 1);
  assume true;
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 193, 15} true;
  assume {:verifier.code 0} true;
  $p34 := $load.ref($M.20, $p3);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 193, 19} true;
  assume {:verifier.code 0} true;
  $p35 := $add.ref($add.ref($p34, $mul.ref(0, 784)), $mul.ref(456, 1));
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 193, 19} true;
  assume {:verifier.code 0} true;
  $i36 := $load.i32($M.1, $p35);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 193, 34} true;
  assume {:verifier.code 0} true;
  $i37 := $load.i32($M.21, $p4);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 193, 32} true;
  assume {:verifier.code 0} true;
  $i38 := $udiv.i32($i36, $i37);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 193, 7} true;
  assume {:verifier.code 0} true;
  $M.23 := $store.i32($M.23, $p6, $i38);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 195, 23} true;
  assume {:verifier.code 0} true;
  $i39 := $load.i32($M.23, $p6);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 195, 31} true;
  assume {:verifier.code 0} true;
  $i40 := $load.i32($M.21, $p4);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 195, 29} true;
  assume {:verifier.code 0} true;
  $i41 := $mul.i32($i39, $i40);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 195, 3} true;
  assume {:verifier.code 0} true;
  $p42 := $load.ref($M.20, $p3);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 195, 7} true;
  assume {:verifier.code 0} true;
  $p43 := $add.ref($add.ref($p42, $mul.ref(0, 784)), $mul.ref(456, 1));
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 195, 20} true;
  assume {:verifier.code 0} true;
  $i44 := $load.i32($M.1, $p43);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 195, 20} true;
  assume {:verifier.code 0} true;
  $i45 := $sub.i32($i44, $i41);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 195, 20} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.i32($M.1, $p43, $i45);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 196, 19} true;
  assume {:verifier.code 0} true;
  $i46 := $load.i32($M.23, $p6);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 196, 3} true;
  assume {:verifier.code 0} true;
  $p47 := $load.ref($M.20, $p3);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 196, 7} true;
  assume {:verifier.code 0} true;
  $p48 := $add.ref($add.ref($p47, $mul.ref(0, 784)), $mul.ref(452, 1));
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 196, 16} true;
  assume {:verifier.code 0} true;
  $i49 := $load.i32($M.1, $p48);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 196, 16} true;
  assume {:verifier.code 0} true;
  $i50 := $add.i32($i49, $i46);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 196, 16} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.i32($M.1, $p48, $i50);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 197, 2} true;
  assume {:verifier.code 0} true;
  goto $bb6;
$bb5:
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 192, 6} true;
  assume {:verifier.code 0} true;
  assume !(($i33 == 1));
  goto $bb6;
$bb6:
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 198, 17} true;
  assume {:verifier.code 0} true;
  $p51 := $load.ref($M.20, $p3);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 198, 17} true;
  assume {:verifier.code 0} true;
  $p52 := $add.ref($add.ref($p51, $mul.ref(0, 784)), $mul.ref(452, 1));
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 198, 17} true;
  assume {:verifier.code 0} true;
  $i53 := $load.i32($M.1, $p52);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 198, 17} true;
  assume {:verifier.code 0} true;
  $p54 := $load.ref($M.20, $p3);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 198, 17} true;
  assume {:verifier.code 0} true;
  $p55 := $add.ref($add.ref($p54, $mul.ref(0, 784)), $mul.ref(460, 1));
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 198, 17} true;
  assume {:verifier.code 0} true;
  $i56 := $load.i32($M.1, $p55);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 198, 17} true;
  assume {:verifier.code 0} true;
  call $i57 := min_func($i53, $i56);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 198, 2} true;
  assume {:verifier.code 0} true;
  $p58 := $load.ref($M.20, $p3);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 198, 6} true;
  assume {:verifier.code 0} true;
  $p59 := $add.ref($add.ref($p58, $mul.ref(0, 784)), $mul.ref(452, 1));
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 198, 15} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.i32($M.1, $p59, $i57);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 199, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const min_func: ref;
axiom (min_func == $sub.ref(0, 60405));
procedure  min_func($i0: i32, $i1: i32)
  returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
$bb0:
  assume {:sourceloc "../../stub_model/header/simple_kernel.h", 26, 6} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  call $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  $M.24 := $store.i32($M.24, $p3, $i0);
  assume true;
  assume {:verifier.code 0} true;
  $M.25 := $store.i32($M.25, $p4, $i1);
  assume true;
  assume {:sourceloc "../../stub_model/header/simple_kernel.h", 26, 6} true;
  assume {:verifier.code 0} true;
  $i5 := $load.i32($M.24, $p3);
  assume {:sourceloc "../../stub_model/header/simple_kernel.h", 26, 10} true;
  assume {:verifier.code 0} true;
  $i6 := $load.i32($M.25, $p4);
  assume {:sourceloc "../../stub_model/header/simple_kernel.h", 26, 8} true;
  assume {:verifier.code 0} true;
  $i7 := $ult.i32($i5, $i6);
  assume {:sourceloc "../../stub_model/header/simple_kernel.h", 26, 6} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i7} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i7 == 1);
  assume {:sourceloc "../../stub_model/header/simple_kernel.h", 27, 10} true;
  assume {:verifier.code 0} true;
  $i8 := $load.i32($M.24, $p3);
  assume {:sourceloc "../../stub_model/header/simple_kernel.h", 27, 3} true;
  assume {:verifier.code 0} true;
  $M.26 := $store.i32($M.26, $p2, $i8);
  assume {:sourceloc "../../stub_model/header/simple_kernel.h", 27, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i7 == 1));
  assume {:sourceloc "../../stub_model/header/simple_kernel.h", 29, 10} true;
  assume {:verifier.code 0} true;
  $i9 := $load.i32($M.25, $p4);
  assume {:sourceloc "../../stub_model/header/simple_kernel.h", 29, 3} true;
  assume {:verifier.code 0} true;
  $M.26 := $store.i32($M.26, $p2, $i9);
  assume {:sourceloc "../../stub_model/header/simple_kernel.h", 29, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "../../stub_model/header/simple_kernel.h", 30, 1} true;
  assume {:verifier.code 0} true;
  $i10 := $load.i32($M.26, $p2);
  assume {:sourceloc "../../stub_model/header/simple_kernel.h", 30, 1} true;
  assume {:verifier.code 0} true;
  $r := $i10;
  $exn := false;
  return;
}
const tcp_assign_congestion_control: ref;
axiom (tcp_assign_congestion_control == $sub.ref(0, 61437));
procedure  tcp_assign_congestion_control($p0: ref)
{
  var $p1: ref;
$bb0:
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 68, 2} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  call $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  $M.27 := $store.ref($M.27, $p1, $p0);
  assume true;
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 68, 2} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const tcp_init_congestion_control: ref;
axiom (tcp_init_congestion_control == $sub.ref(0, 62469));
procedure  tcp_init_congestion_control($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
$bb0:
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 73, 53} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  call $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  $M.28 := $store.ref($M.28, $p1, $p0);
  assume true;
  assume true;
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 73, 53} true;
  assume {:verifier.code 0} true;
  $p3 := $load.ref($M.28, $p1);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 73, 44} true;
  assume {:verifier.code 0} true;
  call $p4 := inet_csk($p3);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 73, 37} true;
  assume {:verifier.code 0} true;
  $M.29 := $store.ref($M.29, $p2, $p4);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 75, 9} true;
  assume {:verifier.code 0} true;
  $p5 := $load.ref($M.28, $p1);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 75, 2} true;
  assume {:verifier.code 0} true;
  call $p6 := tcp_sk($p5);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 75, 14} true;
  assume {:verifier.code 0} true;
  $p7 := $add.ref($add.ref($p6, $mul.ref(0, 784)), $mul.ref(668, 1));
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 75, 29} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.i32($M.1, $p7, 0);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 76, 6} true;
  assume {:verifier.code 0} true;
  $p8 := $load.ref($M.29, $p2);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 76, 12} true;
  assume {:verifier.code 0} true;
  $p9 := $add.ref($add.ref($p8, $mul.ref(0, 200)), $mul.ref(40, 1));
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 76, 12} true;
  assume {:verifier.code 0} true;
  $p10 := $load.ref($M.1, $p9);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 76, 25} true;
  assume {:verifier.code 0} true;
  $p11 := $add.ref($add.ref($p10, $mul.ref(0, 136)), $mul.ref(8, 1));
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 76, 25} true;
  assume {:verifier.code 0} true;
  $p12 := $load.ref($M.30, $p11);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 76, 6} true;
  assume {:verifier.code 0} true;
  $i13 := $ne.ref($p12, $0.ref);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 76, 6} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i13} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i13 == 1);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 77, 3} true;
  assume {:verifier.code 0} true;
  $p14 := $load.ref($M.29, $p2);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 77, 9} true;
  assume {:verifier.code 0} true;
  $p15 := $add.ref($add.ref($p14, $mul.ref(0, 200)), $mul.ref(40, 1));
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 77, 9} true;
  assume {:verifier.code 0} true;
  $p16 := $load.ref($M.1, $p15);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 77, 22} true;
  assume {:verifier.code 0} true;
  $p17 := $add.ref($add.ref($p16, $mul.ref(0, 136)), $mul.ref(8, 1));
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 77, 22} true;
  assume {:verifier.code 0} true;
  $p18 := $load.ref($M.30, $p17);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 77, 27} true;
  assume {:verifier.code 0} true;
  $p19 := $load.ref($M.28, $p1);
  call devirtbounce($p18, $p19);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 77, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 76, 6} true;
  assume {:verifier.code 0} true;
  assume !(($i13 == 1));
  goto $bb3;
$bb3:
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 83, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const inet_csk: ref;
axiom (inet_csk == $sub.ref(0, 63501));
procedure  inet_csk($p0: ref)
  returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
$bb0:
  assume {:sourceloc "../../stub_model/header/simple_inet_connection_sock.h", 65, 40} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  call $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  $M.31 := $store.ref($M.31, $p1, $p0);
  assume true;
  assume {:sourceloc "../../stub_model/header/simple_inet_connection_sock.h", 65, 40} true;
  assume {:verifier.code 0} true;
  $p2 := $load.ref($M.31, $p1);
  assume {:sourceloc "../../stub_model/header/simple_inet_connection_sock.h", 65, 9} true;
  assume {:verifier.code 0} true;
  $p3 := $bitcast.ref.ref($p2);
  assume {:sourceloc "../../stub_model/header/simple_inet_connection_sock.h", 65, 2} true;
  assume {:verifier.code 0} true;
  $r := $p3;
  $exn := false;
  return;
}
const tcp_cleanup_congestion_control: ref;
axiom (tcp_cleanup_congestion_control == $sub.ref(0, 64533));
procedure  tcp_cleanup_congestion_control($p0: ref)
{
  var $p1: ref;
$bb0:
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 88, 2} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  call $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  $M.32 := $store.ref($M.32, $p1, $p0);
  assume true;
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 88, 2} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const tcp_set_congestion_control: ref;
axiom (tcp_set_congestion_control == $sub.ref(0, 65565));
procedure  tcp_set_congestion_control($p0: ref, $p1: ref)
  returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
$bb0:
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 148, 32} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  call $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  $M.33 := $store.ref($M.33, $p2, $p0);
  assume true;
  assume {:verifier.code 0} true;
  $M.34 := $store.ref($M.34, $p3, $p1);
  assume true;
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 148, 32} true;
  assume {:verifier.code 0} true;
  $p4 := $load.ref($M.33, $p2);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 148, 36} true;
  assume {:verifier.code 0} true;
  $p5 := $load.ref($M.34, $p3);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 148, 2} true;
  assume {:verifier.code 0} true;
  call tcp_reinit_congestion_control($p4, $p5);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 149, 2} true;
  assume {:verifier.code 0} true;
  $r := 0;
  $exn := false;
  return;
}
const tcp_reinit_congestion_control: ref;
axiom (tcp_reinit_congestion_control == $sub.ref(0, 66597));
procedure  tcp_reinit_congestion_control($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $i14: i8;
  var $i15: i8;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i8;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
$bb0:
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 94, 47} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  call $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  $M.35 := $store.ref($M.35, $p2, $p0);
  assume true;
  assume {:verifier.code 0} true;
  $M.36 := $store.ref($M.36, $p3, $p1);
  assume true;
  assume true;
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 94, 47} true;
  assume {:verifier.code 0} true;
  $p5 := $load.ref($M.35, $p2);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 94, 38} true;
  assume {:verifier.code 0} true;
  call $p6 := inet_csk($p5);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 94, 31} true;
  assume {:verifier.code 0} true;
  $M.37 := $store.ref($M.37, $p4, $p6);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 96, 33} true;
  assume {:verifier.code 0} true;
  $p7 := $load.ref($M.35, $p2);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 96, 2} true;
  assume {:verifier.code 0} true;
  call tcp_cleanup_congestion_control($p7);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 97, 22} true;
  assume {:verifier.code 0} true;
  $p8 := $load.ref($M.36, $p3);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 97, 2} true;
  assume {:verifier.code 0} true;
  $p9 := $load.ref($M.37, $p4);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 97, 8} true;
  assume {:verifier.code 0} true;
  $p10 := $add.ref($add.ref($p9, $mul.ref(0, 200)), $mul.ref(40, 1));
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 97, 20} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.ref($M.1, $p10, $p8);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 98, 2} true;
  assume {:verifier.code 0} true;
  $p11 := $load.ref($M.37, $p4);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 98, 8} true;
  assume {:verifier.code 0} true;
  $p12 := $add.ref($add.ref($p11, $mul.ref(0, 200)), $mul.ref(56, 1));
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 98, 27} true;
  assume {:verifier.code 0} true;
  $i13 := $load.i8($M.1, $p12);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 98, 27} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: ../../stub_model/source/simple_tcp_cong.c:98:27: warning: over-approximating bitwise operation and;
  $i14 := $and.i8($i13, $sub.i8(0, 65));
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 98, 27} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: ../../stub_model/source/simple_tcp_cong.c:98:27: warning: over-approximating bitwise operation or;
  $i15 := $or.i8($i14, 64);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 98, 27} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.i8($M.1, $p12, $i15);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 99, 9} true;
  assume {:verifier.code 0} true;
  $p16 := $load.ref($M.37, $p4);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 99, 15} true;
  assume {:verifier.code 0} true;
  $p17 := $add.ref($add.ref($p16, $mul.ref(0, 200)), $mul.ref(112, 1));
  $p18 := $add.ref($add.ref($add.ref($p16, $mul.ref(0, 200)), $mul.ref(112, 1)), $mul.ref(0, 8));
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 99, 2} true;
  assume {:verifier.code 0} true;
  $p19 := $bitcast.ref.ref($p18);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 99, 2} true;
  assume {:verifier.code 0} true;
  call $M.1 := $memset.i8($M.1, $p19, 0, 88, false);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 101, 6} true;
  assume {:verifier.code 0} true;
  $p20 := $load.ref($M.35, $p2);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 101, 10} true;
  assume {:verifier.code 0} true;
  $p21 := $add.ref($add.ref($p20, $mul.ref(0, 32)), $mul.ref(0, 1));
  $p22 := $add.ref($add.ref($add.ref($p20, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 101, 10} true;
  assume {:verifier.code 0} true;
  $i23 := $load.i8($M.1, $p22);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 101, 6} true;
  assume {:verifier.code 0} true;
  $i24 := $zext.i8.i32($i23);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 101, 19} true;
  assume {:verifier.code 0} true;
  $i25 := $ne.i32($i24, 7);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 101, 6} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i25} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i25 == 1);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 102, 31} true;
  assume {:verifier.code 0} true;
  $p26 := $load.ref($M.35, $p2);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 102, 3} true;
  assume {:verifier.code 0} true;
  call tcp_init_congestion_control($p26);
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 102, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 101, 6} true;
  assume {:verifier.code 0} true;
  assume !(($i25 == 1));
  goto $bb3;
$bb3:
  assume {:sourceloc "../../stub_model/source/simple_tcp_cong.c", 104, 2} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const llvm.memset.p0i8.i64: ref;
axiom (llvm.memset.p0i8.i64 == $sub.ref(0, 67629));
procedure  llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i1);
const tcp_sync_mss: ref;
axiom (tcp_sync_mss == $sub.ref(0, 68661));
procedure  tcp_sync_mss($p0: ref, $i1: i32)
  returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
$bb0:
  assume {:sourceloc "../../stub_model/source/simple_tcp_output.c", 35, 2} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  call $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  $M.38 := $store.ref($M.38, $p2, $p0);
  assume true;
  assume {:verifier.code 0} true;
  $M.39 := $store.i32($M.39, $p3, $i1);
  assume true;
  assume {:sourceloc "../../stub_model/source/simple_tcp_output.c", 35, 2} true;
  assume {:verifier.code 0} true;
  $r := 0;
  $exn := false;
  return;
}
const tcp_init_sock: ref;
axiom (tcp_init_sock == $sub.ref(0, 69693));
procedure  tcp_init_sock($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $p38: ref;
  var $p39: ref;
$bb0:
  assume {:sourceloc "../../stub_model/source/simple_tcp.c", 27, 47} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  call $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  $M.40 := $store.ref($M.40, $p1, $p0);
  assume true;
  assume true;
  assume {:sourceloc "../../stub_model/source/simple_tcp.c", 27, 47} true;
  assume {:verifier.code 0} true;
  $p4 := $load.ref($M.40, $p1);
  assume {:sourceloc "../../stub_model/source/simple_tcp.c", 27, 38} true;
  assume {:verifier.code 0} true;
  call $p5 := inet_csk($p4);
  assume {:sourceloc "../../stub_model/source/simple_tcp.c", 27, 31} true;
  assume {:verifier.code 0} true;
  $M.41 := $store.ref($M.41, $p2, $p5);
  assume true;
  assume {:sourceloc "../../stub_model/source/simple_tcp.c", 28, 31} true;
  assume {:verifier.code 0} true;
  $p6 := $load.ref($M.40, $p1);
  assume {:sourceloc "../../stub_model/source/simple_tcp.c", 28, 24} true;
  assume {:verifier.code 0} true;
  call $p7 := tcp_sk($p6);
  assume {:sourceloc "../../stub_model/source/simple_tcp.c", 28, 19} true;
  assume {:verifier.code 0} true;
  $M.42 := $store.ref($M.42, $p3, $p7);
  assume {:sourceloc "../../stub_model/source/simple_tcp.c", 44, 2} true;
  assume {:verifier.code 0} true;
  $p8 := $load.ref($M.42, $p3);
  assume {:sourceloc "../../stub_model/source/simple_tcp.c", 44, 6} true;
  assume {:verifier.code 0} true;
  $p9 := $add.ref($add.ref($p8, $mul.ref(0, 784)), $mul.ref(452, 1));
  assume {:sourceloc "../../stub_model/source/simple_tcp.c", 44, 15} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.i32($M.1, $p9, 10);
  assume {:sourceloc "../../stub_model/source/simple_tcp.c", 47, 2} true;
  assume {:verifier.code 0} true;
  $p10 := $load.ref($M.42, $p3);
  assume {:sourceloc "../../stub_model/source/simple_tcp.c", 47, 6} true;
  assume {:verifier.code 0} true;
  $p11 := $add.ref($add.ref($p10, $mul.ref(0, 784)), $mul.ref(492, 1));
  assume {:sourceloc "../../stub_model/source/simple_tcp.c", 47, 18} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.i32($M.1, $p11, $sub.i32(0, 1));
  assume {:sourceloc "../../stub_model/source/simple_tcp.c", 52, 2} true;
  assume {:verifier.code 0} true;
  $p12 := $load.ref($M.42, $p3);
  assume {:sourceloc "../../stub_model/source/simple_tcp.c", 52, 6} true;
  assume {:verifier.code 0} true;
  $p13 := $add.ref($add.ref($p12, $mul.ref(0, 784)), $mul.ref(448, 1));
  assume {:sourceloc "../../stub_model/source/simple_tcp.c", 52, 19} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.i32($M.1, $p13, 2147483647);
  assume {:sourceloc "../../stub_model/source/simple_tcp.c", 53, 2} true;
  assume {:verifier.code 0} true;
  $p14 := $load.ref($M.42, $p3);
  assume {:sourceloc "../../stub_model/source/simple_tcp.c", 53, 6} true;
  assume {:verifier.code 0} true;
  $p15 := $add.ref($add.ref($p14, $mul.ref(0, 784)), $mul.ref(460, 1));
  assume {:sourceloc "../../stub_model/source/simple_tcp.c", 53, 21} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.i32($M.1, $p15, $sub.i32(0, 1));
  assume {:sourceloc "../../stub_model/source/simple_tcp.c", 54, 2} true;
  assume {:verifier.code 0} true;
  $p16 := $load.ref($M.42, $p3);
  assume {:sourceloc "../../stub_model/source/simple_tcp.c", 54, 6} true;
  assume {:verifier.code 0} true;
  $p17 := $add.ref($add.ref($p16, $mul.ref(0, 784)), $mul.ref(292, 1));
  assume {:sourceloc "../../stub_model/source/simple_tcp.c", 54, 16} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.i32($M.1, $p17, 536);
  assume {:sourceloc "../../stub_model/source/simple_tcp.c", 56, 28} true;
  assume {:verifier.code 0} true;
  $p18 := $load.ref($M.40, $p1);
  assume {:sourceloc "../../stub_model/source/simple_tcp.c", 56, 19} true;
  assume {:verifier.code 0} true;
  call $p19 := sock_net($p18);
  assume {:sourceloc "../../stub_model/source/simple_tcp.c", 56, 33} true;
  assume {:verifier.code 0} true;
  $p20 := $add.ref($add.ref($p19, $mul.ref(0, 160)), $mul.ref(0, 1));
  $p21 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 160)), $mul.ref(0, 1)), $mul.ref(112, 1));
  assume {:sourceloc "../../stub_model/source/simple_tcp.c", 56, 38} true;
  assume {:verifier.code 0} true;
  $i22 := $load.i32($M.30, $p21);
  assume {:sourceloc "../../stub_model/source/simple_tcp.c", 56, 2} true;
  assume {:verifier.code 0} true;
  $p23 := $load.ref($M.42, $p3);
  assume {:sourceloc "../../stub_model/source/simple_tcp.c", 56, 6} true;
  assume {:verifier.code 0} true;
  $p24 := $add.ref($add.ref($p23, $mul.ref(0, 784)), $mul.ref(408, 1));
  assume {:sourceloc "../../stub_model/source/simple_tcp.c", 56, 17} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.i32($M.1, $p24, $i22);
  assume {:sourceloc "../../stub_model/source/simple_tcp.c", 57, 32} true;
  assume {:verifier.code 0} true;
  $p25 := $load.ref($M.40, $p1);
  assume {:sourceloc "../../stub_model/source/simple_tcp.c", 57, 2} true;
  assume {:verifier.code 0} true;
  call tcp_assign_congestion_control($p25);
  assume {:sourceloc "../../stub_model/source/simple_tcp.c", 59, 2} true;
  assume {:verifier.code 0} true;
  $p26 := $load.ref($M.42, $p3);
  assume {:sourceloc "../../stub_model/source/simple_tcp.c", 59, 6} true;
  assume {:verifier.code 0} true;
  $p27 := $add.ref($add.ref($p26, $mul.ref(0, 784)), $mul.ref(276, 1));
  assume {:sourceloc "../../stub_model/source/simple_tcp.c", 59, 15} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.i32($M.1, $p27, 0);
  assume {:sourceloc "../../stub_model/source/simple_tcp.c", 61, 2} true;
  assume {:verifier.code 0} true;
  $p28 := $load.ref($M.40, $p1);
  assume {:sourceloc "../../stub_model/source/simple_tcp.c", 61, 6} true;
  assume {:verifier.code 0} true;
  $p29 := $add.ref($add.ref($p28, $mul.ref(0, 32)), $mul.ref(0, 1));
  $p30 := $add.ref($add.ref($add.ref($p28, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(0, 1));
  assume {:sourceloc "../../stub_model/source/simple_tcp.c", 61, 15} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.i8($M.1, $p30, 7);
  assume {:sourceloc "../../stub_model/source/simple_tcp.c", 64, 16} true;
  assume {:verifier.code 0} true;
  $p31 := $load.ref($M.40, $p1);
  assume {:sourceloc "../../stub_model/source/simple_tcp.c", 64, 2} true;
  assume {:verifier.code 0} true;
  call sock_set_flag($p31, 9);
  assume {:sourceloc "../../stub_model/source/simple_tcp.c", 66, 2} true;
  assume {:verifier.code 0} true;
  $p32 := $load.ref($M.41, $p2);
  assume {:sourceloc "../../stub_model/source/simple_tcp.c", 66, 8} true;
  assume {:verifier.code 0} true;
  $p33 := $add.ref($add.ref($p32, $mul.ref(0, 200)), $mul.ref(48, 1));
  assume {:sourceloc "../../stub_model/source/simple_tcp.c", 66, 22} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.ref($M.1, $p33, tcp_sync_mss);
  assume {:sourceloc "../../stub_model/source/simple_tcp.c", 68, 18} true;
  assume {:verifier.code 0} true;
  $i34 := $load.i32($M.43, $add.ref($add.ref(sysctl_tcp_wmem, $mul.ref(0, 12)), $mul.ref(1, 4)));
  assume {:sourceloc "../../stub_model/source/simple_tcp.c", 68, 2} true;
  assume {:verifier.code 0} true;
  $p35 := $load.ref($M.40, $p1);
  assume {:sourceloc "../../stub_model/source/simple_tcp.c", 68, 6} true;
  assume {:verifier.code 0} true;
  $p36 := $add.ref($add.ref($p35, $mul.ref(0, 32)), $mul.ref(28, 1));
  assume {:sourceloc "../../stub_model/source/simple_tcp.c", 68, 16} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.i32($M.1, $p36, $i34);
  assume {:sourceloc "../../stub_model/source/simple_tcp.c", 69, 18} true;
  assume {:verifier.code 0} true;
  $i37 := $load.i32($M.44, $add.ref($add.ref(sysctl_tcp_rmem, $mul.ref(0, 12)), $mul.ref(1, 4)));
  assume {:sourceloc "../../stub_model/source/simple_tcp.c", 69, 2} true;
  assume {:verifier.code 0} true;
  $p38 := $load.ref($M.40, $p1);
  assume {:sourceloc "../../stub_model/source/simple_tcp.c", 69, 6} true;
  assume {:verifier.code 0} true;
  $p39 := $add.ref($add.ref($p38, $mul.ref(0, 32)), $mul.ref(24, 1));
  assume {:sourceloc "../../stub_model/source/simple_tcp.c", 69, 16} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.i32($M.1, $p39, $i37);
  assume {:sourceloc "../../stub_model/source/simple_tcp.c", 72, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const sock_net: ref;
axiom (sock_net == $sub.ref(0, 70725));
procedure  sock_net($p0: ref)
  returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
$bb0:
  assume {:sourceloc "../../stub_model/header/simple_sock.h", 68, 20} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  call $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  $M.45 := $store.ref($M.45, $p1, $p0);
  assume true;
  assume {:sourceloc "../../stub_model/header/simple_sock.h", 68, 20} true;
  assume {:verifier.code 0} true;
  $p2 := $load.ref($M.45, $p1);
  assume {:sourceloc "../../stub_model/header/simple_sock.h", 68, 24} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 1));
  $p4 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(8, 1));
  assume {:sourceloc "../../stub_model/header/simple_sock.h", 68, 9} true;
  assume {:verifier.code 0} true;
  call $p5 := read_pnet($p4);
  assume {:sourceloc "../../stub_model/header/simple_sock.h", 68, 2} true;
  assume {:verifier.code 0} true;
  $r := $p5;
  $exn := false;
  return;
}
const sock_set_flag: ref;
axiom (sock_set_flag == $sub.ref(0, 71757));
procedure  sock_set_flag($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
$bb0:
  assume {:sourceloc "../../stub_model/header/simple_sock.h", 73, 12} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  call $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  $M.46 := $store.ref($M.46, $p2, $p0);
  assume true;
  assume {:verifier.code 0} true;
  $M.47 := $store.i32($M.47, $p3, $i1);
  assume true;
  assume {:sourceloc "../../stub_model/header/simple_sock.h", 73, 12} true;
  assume {:verifier.code 0} true;
  $i4 := $load.i32($M.47, $p3);
  assume {:sourceloc "../../stub_model/header/simple_sock.h", 73, 19} true;
  assume {:verifier.code 0} true;
  $p5 := $load.ref($M.46, $p2);
  assume {:sourceloc "../../stub_model/header/simple_sock.h", 73, 23} true;
  assume {:verifier.code 0} true;
  $p6 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(0, 1));
  $p7 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(0, 1)), $mul.ref(16, 1));
  assume {:sourceloc "../../stub_model/header/simple_sock.h", 73, 18} true;
  assume {:verifier.code 0} true;
  $p8 := $bitcast.ref.ref($p7);
  assume {:sourceloc "../../stub_model/header/simple_sock.h", 73, 2} true;
  assume {:verifier.code 0} true;
  call __set_bit($i4, $p8);
  assume {:sourceloc "../../stub_model/header/simple_sock.h", 74, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __set_bit: ref;
axiom (__set_bit == $sub.ref(0, 72789));
procedure  __set_bit($i0: i32, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i64;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
$bb0:
  assume {:sourceloc "../../stub_model/header/simple_bitops.h", 26, 42} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  call $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  $M.48 := $store.i32($M.48, $p2, $i0);
  assume true;
  assume {:verifier.code 0} true;
  $M.49 := $store.ref($M.49, $p3, $p1);
  assume true;
  assume {:sourceloc "../../stub_model/header/simple_bitops.h", 26, 42} true;
  assume {:verifier.code 0} true;
  $i4 := $load.i32($M.48, $p2);
  assume {:sourceloc "../../stub_model/header/simple_bitops.h", 26, 45} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: ../../stub_model/header/simple_bitops.h:26:45: warning: over-approximating bitwise operation and;
  $i5 := $and.i32($i4, 31);
  assume {:sourceloc "../../stub_model/header/simple_bitops.h", 26, 38} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: ../../stub_model/header/simple_bitops.h:26:38: warning: over-approximating bitwise operation shl;
  $i6 := $shl.i32(1, $i5);
  assume {:sourceloc "../../stub_model/header/simple_bitops.h", 26, 14} true;
  assume {:verifier.code 0} true;
  $p7 := $load.ref($M.49, $p3);
  assume {:sourceloc "../../stub_model/header/simple_bitops.h", 26, 4} true;
  assume {:verifier.code 0} true;
  $p8 := $bitcast.ref.ref($p7);
  assume {:sourceloc "../../stub_model/header/simple_bitops.h", 26, 22} true;
  assume {:verifier.code 0} true;
  $i9 := $load.i32($M.48, $p2);
  assume {:sourceloc "../../stub_model/header/simple_bitops.h", 26, 25} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: ../../stub_model/header/simple_bitops.h:26:25: warning: over-approximating bitwise operation ashr;
  $i10 := $ashr.i32($i9, 5);
  assume {:sourceloc "../../stub_model/header/simple_bitops.h", 26, 19} true;
  assume {:verifier.code 0} true;
  $i11 := $sext.i32.i64($i10);
  assume {:sourceloc "../../stub_model/header/simple_bitops.h", 26, 19} true;
  assume {:verifier.code 0} true;
  $p12 := $add.ref($p8, $mul.ref($i11, 4));
  assume {:sourceloc "../../stub_model/header/simple_bitops.h", 26, 32} true;
  assume {:verifier.code 0} true;
  $i13 := $load.i32($M.1, $p12);
  assume {:sourceloc "../../stub_model/header/simple_bitops.h", 26, 32} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: ../../stub_model/header/simple_bitops.h:26:32: warning: over-approximating bitwise operation or;
  $i14 := $or.i32($i13, $i6);
  assume {:sourceloc "../../stub_model/header/simple_bitops.h", 26, 32} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.i32($M.1, $p12, $i14);
  assume {:sourceloc "../../stub_model/header/simple_bitops.h", 27, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const read_pnet: ref;
axiom (read_pnet == $sub.ref(0, 73821));
procedure  read_pnet($p0: ref)
  returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
$bb0:
  assume {:sourceloc "../../stub_model/header/simple_net_namespace.h", 27, 9} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  call $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  $M.50 := $store.ref($M.50, $p1, $p0);
  assume true;
  assume {:sourceloc "../../stub_model/header/simple_net_namespace.h", 27, 9} true;
  assume {:verifier.code 0} true;
  $p2 := $load.ref($M.50, $p1);
  assume {:sourceloc "../../stub_model/header/simple_net_namespace.h", 27, 15} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
  assume {:sourceloc "../../stub_model/header/simple_net_namespace.h", 27, 15} true;
  assume {:verifier.code 0} true;
  $p4 := $load.ref($M.1, $p3);
  assume {:sourceloc "../../stub_model/header/simple_net_namespace.h", 27, 2} true;
  assume {:verifier.code 0} true;
  $r := $p4;
  $exn := false;
  return;
}
const tcp_set_ca_state: ref;
axiom (tcp_set_ca_state == $sub.ref(0, 74853));
procedure  tcp_set_ca_state($p0: ref, $i1: i8)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i8;
  var $i20: i8;
  var $p21: ref;
  var $p22: ref;
  var $i23: i8;
  var $i24: i8;
  var $i25: i8;
  var $i26: i8;
$bb0:
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 427, 47} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  call $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p3 := $alloc($mul.ref(1, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  $M.51 := $store.ref($M.51, $p2, $p0);
  assume true;
  assume {:verifier.code 0} true;
  $M.52 := $store.i8($M.52, $p3, $i1);
  assume true;
  assume true;
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 427, 47} true;
  assume {:verifier.code 0} true;
  $p5 := $load.ref($M.51, $p2);
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 427, 38} true;
  assume {:verifier.code 0} true;
  call $p6 := inet_csk($p5);
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 427, 31} true;
  assume {:verifier.code 0} true;
  $M.53 := $store.ref($M.53, $p4, $p6);
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 429, 6} true;
  assume {:verifier.code 0} true;
  $p7 := $load.ref($M.53, $p4);
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 429, 12} true;
  assume {:verifier.code 0} true;
  $p8 := $add.ref($add.ref($p7, $mul.ref(0, 200)), $mul.ref(40, 1));
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 429, 12} true;
  assume {:verifier.code 0} true;
  $p9 := $load.ref($M.1, $p8);
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 429, 25} true;
  assume {:verifier.code 0} true;
  $p10 := $add.ref($add.ref($p9, $mul.ref(0, 136)), $mul.ref(40, 1));
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 429, 25} true;
  assume {:verifier.code 0} true;
  $p11 := $load.ref($M.30, $p10);
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 429, 6} true;
  assume {:verifier.code 0} true;
  $i12 := $ne.ref($p11, $0.ref);
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 429, 6} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i12} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i12 == 1);
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 430, 3} true;
  assume {:verifier.code 0} true;
  $p13 := $load.ref($M.53, $p4);
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 430, 9} true;
  assume {:verifier.code 0} true;
  $p14 := $add.ref($add.ref($p13, $mul.ref(0, 200)), $mul.ref(40, 1));
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 430, 9} true;
  assume {:verifier.code 0} true;
  $p15 := $load.ref($M.1, $p14);
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 430, 22} true;
  assume {:verifier.code 0} true;
  $p16 := $add.ref($add.ref($p15, $mul.ref(0, 136)), $mul.ref(40, 1));
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 430, 22} true;
  assume {:verifier.code 0} true;
  $p17 := $load.ref($M.30, $p16);
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 430, 32} true;
  assume {:verifier.code 0} true;
  $p18 := $load.ref($M.51, $p2);
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 430, 36} true;
  assume {:verifier.code 0} true;
  $i19 := $load.i8($M.52, $p3);
  call devirtbounce.1($p17, $p18, $i19);
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 430, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 429, 6} true;
  assume {:verifier.code 0} true;
  assume !(($i12 == 1));
  goto $bb3;
$bb3:
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 431, 24} true;
  assume {:verifier.code 0} true;
  $i20 := $load.i8($M.52, $p3);
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 431, 2} true;
  assume {:verifier.code 0} true;
  $p21 := $load.ref($M.53, $p4);
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 431, 8} true;
  assume {:verifier.code 0} true;
  $p22 := $add.ref($add.ref($p21, $mul.ref(0, 200)), $mul.ref(56, 1));
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 431, 22} true;
  assume {:verifier.code 0} true;
  $i23 := $load.i8($M.1, $p22);
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 431, 22} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: ../../stub_model/header/simple_tcp.h:431:22: warning: over-approximating bitwise operation and;
  $i24 := $and.i8($i20, 63);
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 431, 22} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: ../../stub_model/header/simple_tcp.h:431:22: warning: over-approximating bitwise operation and;
  $i25 := $and.i8($i23, $sub.i8(0, 64));
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 431, 22} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: ../../stub_model/header/simple_tcp.h:431:22: warning: over-approximating bitwise operation or;
  $i26 := $or.i8($i25, $i24);
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 431, 22} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.i8($M.1, $p22, $i26);
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 432, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const tcp_in_cwnd_reduction: ref;
axiom (tcp_in_cwnd_reduction == $sub.ref(0, 75885));
procedure  tcp_in_cwnd_reduction($p0: ref)
  returns ($r: i1)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i8;
  var $i6: i8;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
$bb0:
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 467, 18} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  call $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  $M.54 := $store.ref($M.54, $p1, $p0);
  assume true;
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 467, 18} true;
  assume {:verifier.code 0} true;
  $p2 := $load.ref($M.54, $p1);
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 467, 9} true;
  assume {:verifier.code 0} true;
  call $p3 := inet_csk($p2);
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 467, 23} true;
  assume {:verifier.code 0} true;
  $p4 := $add.ref($add.ref($p3, $mul.ref(0, 200)), $mul.ref(56, 1));
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 467, 23} true;
  assume {:verifier.code 0} true;
  $i5 := $load.i8($M.1, $p4);
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 467, 23} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: ../../stub_model/header/simple_tcp.h:467:23: warning: over-approximating bitwise operation and;
  $i6 := $and.i8($i5, 63);
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 467, 9} true;
  assume {:verifier.code 0} true;
  $i7 := $zext.i8.i32($i6);
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 467, 6} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: ../../stub_model/header/simple_tcp.h:467:6: warning: over-approximating bitwise operation shl;
  $i8 := $shl.i32(1, $i7);
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 466, 42} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: ../../stub_model/header/simple_tcp.h:466:42: warning: over-approximating bitwise operation and;
  $i9 := $and.i32(12, $i8);
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 466, 9} true;
  assume {:verifier.code 0} true;
  $i10 := $ne.i32($i9, 0);
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 466, 2} true;
  assume {:verifier.code 0} true;
  $r := $i10;
  $exn := false;
  return;
}
const tcp_current_ssthresh: ref;
axiom (tcp_current_ssthresh == $sub.ref(0, 76917));
procedure  tcp_current_ssthresh($p0: ref)
  returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;
$bb0:
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 476, 37} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  call $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  $M.55 := $store.ref($M.55, $p2, $p0);
  assume true;
  assume true;
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 476, 37} true;
  assume {:verifier.code 0} true;
  $p4 := $load.ref($M.55, $p2);
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 476, 30} true;
  assume {:verifier.code 0} true;
  call $p5 := tcp_sk($p4);
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 476, 25} true;
  assume {:verifier.code 0} true;
  $M.56 := $store.ref($M.56, $p3, $p5);
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 478, 28} true;
  assume {:verifier.code 0} true;
  $p6 := $load.ref($M.55, $p2);
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 478, 6} true;
  assume {:verifier.code 0} true;
  call $i7 := tcp_in_cwnd_reduction($p6);
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 478, 6} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i7} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i7 == 1);
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 479, 10} true;
  assume {:verifier.code 0} true;
  $p8 := $load.ref($M.56, $p3);
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 479, 14} true;
  assume {:verifier.code 0} true;
  $p9 := $add.ref($add.ref($p8, $mul.ref(0, 784)), $mul.ref(448, 1));
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 479, 14} true;
  assume {:verifier.code 0} true;
  $i10 := $load.i32($M.1, $p9);
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 479, 3} true;
  assume {:verifier.code 0} true;
  $M.57 := $store.i32($M.57, $p1, $i10);
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 479, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume !(($i7 == 1));
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 481, 10} true;
  assume {:verifier.code 0} true;
  $p11 := $load.ref($M.56, $p3);
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 481, 10} true;
  assume {:verifier.code 0} true;
  $p12 := $add.ref($add.ref($p11, $mul.ref(0, 784)), $mul.ref(448, 1));
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 481, 10} true;
  assume {:verifier.code 0} true;
  $i13 := $load.i32($M.1, $p12);
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 481, 10} true;
  assume {:verifier.code 0} true;
  $p14 := $load.ref($M.56, $p3);
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 481, 10} true;
  assume {:verifier.code 0} true;
  $p15 := $add.ref($add.ref($p14, $mul.ref(0, 784)), $mul.ref(452, 1));
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 481, 10} true;
  assume {:verifier.code 0} true;
  $i16 := $load.i32($M.1, $p15);
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 481, 10} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: ../../stub_model/header/simple_tcp.h:481:10: warning: over-approximating bitwise operation lshr;
  $i17 := $lshr.i32($i16, 1);
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 481, 10} true;
  assume {:verifier.code 0} true;
  $p18 := $load.ref($M.56, $p3);
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 481, 10} true;
  assume {:verifier.code 0} true;
  $p19 := $add.ref($add.ref($p18, $mul.ref(0, 784)), $mul.ref(452, 1));
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 481, 10} true;
  assume {:verifier.code 0} true;
  $i20 := $load.i32($M.1, $p19);
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 481, 10} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: ../../stub_model/header/simple_tcp.h:481:10: warning: over-approximating bitwise operation lshr;
  $i21 := $lshr.i32($i20, 2);
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 481, 10} true;
  assume {:verifier.code 0} true;
  $i22 := $add.i32($i17, $i21);
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 481, 10} true;
  assume {:verifier.code 0} true;
  call $i23 := max_func($i13, $i22);
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 481, 3} true;
  assume {:verifier.code 0} true;
  $M.57 := $store.i32($M.57, $p1, $i23);
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 481, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb3:
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 484, 1} true;
  assume {:verifier.code 0} true;
  $i24 := $load.i32($M.57, $p1);
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 484, 1} true;
  assume {:verifier.code 0} true;
  $r := $i24;
  $exn := false;
  return;
}
const main: ref;
axiom (main == $sub.ref(0, 77949));
procedure {:entrypoint} main()
  returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i32;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i1;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i32;
  var $p58: ref;
  var $p59: ref;
  var $i60: i32;
  var $i61: i32;
  var $i62: i32;
  var $p63: ref;
  var $p64: ref;
  var $i65: i32;
  var $p66: ref;
  var $p67: ref;
  var $i68: i32;
  var $i69: i64;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $i75: i1;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $i83: i8;
  var $i84: i8;
  var $p85: ref;
  var $p86: ref;
  var $i87: i8;
  var $i88: i8;
  var $i89: i8;
  var $i90: i8;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $i95: i32;
  var $p96: ref;
  var $p97: ref;
  var $i98: i32;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $i103: i32;
  var $i104: i32;
  var $i105: i1;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $i111: i1;
  var $p112: ref;
  var $i113: i32;
  var $p114: ref;
  var $p115: ref;
  var $i116: i32;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $i126: i32;
  var $p127: ref;
  var $p128: ref;
  var $i129: i32;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $i134: i32;
  var $i135: i32;
  var $i136: i32;
  var $i137: i32;
  var $p138: ref;
  var $p139: ref;
  var $i140: i32;
  var $i141: i32;
  var $i142: i1;
  var $i143: i32;
  var $i144: i32;
  var $i145: i32;
  var $p146: ref;
  var $p147: ref;
  var $i148: i32;
  var $p149: ref;
  var $p150: ref;
  var $i151: i32;
  var $p152: ref;
  var $p153: ref;
  var $p154: ref;
  var $p155: ref;
  var $p156: ref;
  var $p157: ref;
  var $i158: i32;
  var $p159: ref;
  var $p160: ref;
  var $p161: ref;
  var $p162: ref;
  var $i163: i32;
  var $p164: ref;
  var $p165: ref;
  var $p166: ref;
  var $p167: ref;
  var $p168: ref;
  var $p169: ref;
  var $p170: ref;
  var $i171: i32;
  var $p172: ref;
  var $p173: ref;
  var $p174: ref;
  var $p175: ref;
  var $i176: i32;
  var $p177: ref;
  var $p178: ref;
  var $p179: ref;
  var $p180: ref;
  var $p181: ref;
  var $p182: ref;
  var $p183: ref;
  var $i184: i32;
  var $p185: ref;
  var $p186: ref;
  var $p187: ref;
  var $p188: ref;
  var $i189: i32;
  var $p190: ref;
  var $p191: ref;
  var $i192: i32;
  var $i193: i1;
  var $p194: ref;
  var $p195: ref;
  var $i196: i32;
  var $p197: ref;
  var $p198: ref;
  var $p199: ref;
  var $p200: ref;
  var $i201: i32;
  var $i202: i32;
  var $i203: i1;
  var $i204: i32;
  var $p205: ref;
  var $p206: ref;
  var $i207: i32;
  var $i208: i32;
$bb0:
  call $initialize();
  assume {:sourceloc "main_reno_undo.c", 9, 19} true;
  assume {:verifier.code 0} true;
  call {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
  assume {:verifier.code 0} true;
  call $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p1 := $alloc($mul.ref(784, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p5 := $alloc($mul.ref(1, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p6 := $alloc($mul.ref(160, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p7 := $alloc($mul.ref(4, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p8 := $alloc($mul.ref(4, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p9 := $alloc($mul.ref(4, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p10 := $alloc($mul.ref(4, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p11 := $alloc($mul.ref(12, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  $M.58 := $store.i32($M.58, $p0, 0);
  assume true;
  assume true;
  assume {:sourceloc "main_reno_undo.c", 9, 19} true;
  assume {:verifier.code 0} true;
  $M.59 := $store.ref($M.59, $p2, $p1);
  assume true;
  assume {:sourceloc "main_reno_undo.c", 10, 31} true;
  assume {:verifier.code 0} true;
  $p12 := $load.ref($M.59, $p2);
  assume {:sourceloc "main_reno_undo.c", 10, 31} true;
  assume {:verifier.code 0} true;
  $p13 := $bitcast.ref.ref($p12);
  assume {:sourceloc "main_reno_undo.c", 10, 24} true;
  assume {:verifier.code 0} true;
  call $p14 := tcp_sk($p13);
  assume {:sourceloc "main_reno_undo.c", 10, 19} true;
  assume {:verifier.code 0} true;
  $M.60 := $store.ref($M.60, $p3, $p14);
  assume true;
  assume {:sourceloc "main_reno_undo.c", 11, 47} true;
  assume {:verifier.code 0} true;
  $p15 := $load.ref($M.59, $p2);
  assume {:sourceloc "main_reno_undo.c", 11, 47} true;
  assume {:verifier.code 0} true;
  $p16 := $bitcast.ref.ref($p15);
  assume {:sourceloc "main_reno_undo.c", 11, 38} true;
  assume {:verifier.code 0} true;
  call $p17 := inet_csk($p16);
  assume {:sourceloc "main_reno_undo.c", 11, 31} true;
  assume {:verifier.code 0} true;
  $M.61 := $store.ref($M.61, $p4, $p17);
  assume true;
  assume {:sourceloc "main_reno_undo.c", 15, 2} true;
  assume {:verifier.code 0} true;
  $p18 := $bitcast.ref.ref($p1);
  assume {:sourceloc "main_reno_undo.c", 15, 2} true;
  assume {:verifier.code 0} true;
  call $M.1 := $memset.i8($M.1, $p18, 0, 784, false);
  assume {:sourceloc "main_reno_undo.c", 16, 29} true;
  assume {:verifier.code 0} true;
  $p19 := $load.ref($M.59, $p2);
  assume {:sourceloc "main_reno_undo.c", 16, 29} true;
  assume {:verifier.code 0} true;
  $p20 := $bitcast.ref.ref($p19);
  assume {:sourceloc "main_reno_undo.c", 16, 2} true;
  assume {:verifier.code 0} true;
  call $i21 := tcp_set_congestion_control($p20, tcp_reno);
  assume true;
  assume {:sourceloc "main_reno_undo.c", 18, 2} true;
  assume {:verifier.code 0} true;
  $p22 := $bitcast.ref.ref($p6);
  assume {:sourceloc "main_reno_undo.c", 18, 2} true;
  assume {:verifier.code 0} true;
  call $M.30 := $memset.i8($M.30, $p22, 0, 160, false);
  assume {:sourceloc "main_reno_undo.c", 19, 2} true;
  assume {:verifier.code 0} true;
  $p23 := $load.ref($M.59, $p2);
  assume {:sourceloc "main_reno_undo.c", 19, 6} true;
  assume {:verifier.code 0} true;
  $p24 := $add.ref($add.ref($p23, $mul.ref(0, 784)), $mul.ref(0, 1));
  $p25 := $add.ref($add.ref($add.ref($p23, $mul.ref(0, 784)), $mul.ref(0, 1)), $mul.ref(0, 1));
  $p26 := $add.ref($add.ref($add.ref($add.ref($p23, $mul.ref(0, 784)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
  $p27 := $add.ref($add.ref($add.ref($add.ref($add.ref($p23, $mul.ref(0, 784)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
  $p28 := $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($p23, $mul.ref(0, 784)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1));
  $p29 := $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($p23, $mul.ref(0, 784)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(0, 1));
  assume {:sourceloc "main_reno_undo.c", 19, 40} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.ref($M.1, $p29, $p6);
  assume {:sourceloc "main_reno_undo.c", 20, 2} true;
  assume {:verifier.code 0} true;
  call $i30 := tcp_sk_init($p6);
  assume {:sourceloc "main_reno_undo.c", 22, 75} true;
  assume {:verifier.code 0} true;
  $p31 := $load.ref($M.60, $p3);
  assume {:sourceloc "main_reno_undo.c", 22, 79} true;
  assume {:verifier.code 0} true;
  $p32 := $add.ref($add.ref($p31, $mul.ref(0, 784)), $mul.ref(452, 1));
  assume {:sourceloc "main_reno_undo.c", 22, 79} true;
  assume {:verifier.code 0} true;
  $i33 := $load.i32($M.1, $p32);
  assume {:sourceloc "main_reno_undo.c", 22, 89} true;
  assume {:verifier.code 0} true;
  $p34 := $load.ref($M.60, $p3);
  assume {:sourceloc "main_reno_undo.c", 22, 93} true;
  assume {:verifier.code 0} true;
  $p35 := $add.ref($add.ref($p34, $mul.ref(0, 784)), $mul.ref(448, 1));
  assume {:sourceloc "main_reno_undo.c", 22, 93} true;
  assume {:verifier.code 0} true;
  $i36 := $load.i32($M.1, $p35);
  assume {:sourceloc "main_reno_undo.c", 22, 2} true;
  assume {:verifier.code 0} true;
  call $i37 := printf.ref.i32.i32(.str.6, $i33, $i36);
  assume {:sourceloc "main_reno_undo.c", 24, 16} true;
  assume {:verifier.code 0} true;
  $p38 := $load.ref($M.59, $p2);
  assume {:sourceloc "main_reno_undo.c", 24, 16} true;
  assume {:verifier.code 0} true;
  $p39 := $bitcast.ref.ref($p38);
  assume {:sourceloc "main_reno_undo.c", 24, 2} true;
  assume {:verifier.code 0} true;
  call tcp_init_sock($p39);
  assume {:sourceloc "main_reno_undo.c", 26, 6} true;
  assume {:verifier.code 0} true;
  $p40 := $load.ref($M.61, $p4);
  assume {:sourceloc "main_reno_undo.c", 26, 12} true;
  assume {:verifier.code 0} true;
  $p41 := $add.ref($add.ref($p40, $mul.ref(0, 200)), $mul.ref(40, 1));
  assume {:sourceloc "main_reno_undo.c", 26, 12} true;
  assume {:verifier.code 0} true;
  $p42 := $load.ref($M.1, $p41);
  assume {:sourceloc "main_reno_undo.c", 26, 25} true;
  assume {:verifier.code 0} true;
  $p43 := $add.ref($add.ref($p42, $mul.ref(0, 136)), $mul.ref(8, 1));
  assume {:sourceloc "main_reno_undo.c", 26, 25} true;
  assume {:verifier.code 0} true;
  $p44 := $load.ref($M.30, $p43);
  assume {:sourceloc "main_reno_undo.c", 26, 6} true;
  assume {:verifier.code 0} true;
  $i45 := $ne.ref($p44, $0.ref);
  assume {:sourceloc "main_reno_undo.c", 26, 6} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i45} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i45 == 1);
  assume {:sourceloc "main_reno_undo.c", 27, 3} true;
  assume {:verifier.code 0} true;
  $p46 := $load.ref($M.61, $p4);
  assume {:sourceloc "main_reno_undo.c", 27, 9} true;
  assume {:verifier.code 0} true;
  $p47 := $add.ref($add.ref($p46, $mul.ref(0, 200)), $mul.ref(40, 1));
  assume {:sourceloc "main_reno_undo.c", 27, 9} true;
  assume {:verifier.code 0} true;
  $p48 := $load.ref($M.1, $p47);
  assume {:sourceloc "main_reno_undo.c", 27, 22} true;
  assume {:verifier.code 0} true;
  $p49 := $add.ref($add.ref($p48, $mul.ref(0, 136)), $mul.ref(8, 1));
  assume {:sourceloc "main_reno_undo.c", 27, 22} true;
  assume {:verifier.code 0} true;
  $p50 := $load.ref($M.30, $p49);
  assume {:sourceloc "main_reno_undo.c", 27, 27} true;
  assume {:verifier.code 0} true;
  $p51 := $load.ref($M.59, $p2);
  assume {:sourceloc "main_reno_undo.c", 27, 27} true;
  assume {:verifier.code 0} true;
  $p52 := $bitcast.ref.ref($p51);
  call devirtbounce($p50, $p52);
  assume {:sourceloc "main_reno_undo.c", 27, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume {:sourceloc "main_reno_undo.c", 26, 6} true;
  assume {:verifier.code 0} true;
  assume !(($i45 == 1));
  goto $bb3;
$bb3:
  assume {:sourceloc "main_reno_undo.c", 28, 15} true;
  assume {:verifier.code 0} true;
  $p53 := $load.ref($M.59, $p2);
  assume {:sourceloc "main_reno_undo.c", 28, 15} true;
  assume {:verifier.code 0} true;
  $p54 := $bitcast.ref.ref($p53);
  assume {:sourceloc "main_reno_undo.c", 28, 2} true;
  assume {:verifier.code 0} true;
  call tcp_ca_event($p54, 0);
  assume {:sourceloc "main_reno_undo.c", 31, 74} true;
  assume {:verifier.code 0} true;
  $p55 := $load.ref($M.60, $p3);
  assume {:sourceloc "main_reno_undo.c", 31, 78} true;
  assume {:verifier.code 0} true;
  $p56 := $add.ref($add.ref($p55, $mul.ref(0, 784)), $mul.ref(452, 1));
  assume {:sourceloc "main_reno_undo.c", 31, 78} true;
  assume {:verifier.code 0} true;
  $i57 := $load.i32($M.1, $p56);
  assume {:sourceloc "main_reno_undo.c", 31, 88} true;
  assume {:verifier.code 0} true;
  $p58 := $load.ref($M.60, $p3);
  assume {:sourceloc "main_reno_undo.c", 31, 92} true;
  assume {:verifier.code 0} true;
  $p59 := $add.ref($add.ref($p58, $mul.ref(0, 784)), $mul.ref(448, 1));
  assume {:sourceloc "main_reno_undo.c", 31, 92} true;
  assume {:verifier.code 0} true;
  $i60 := $load.i32($M.1, $p59);
  assume {:sourceloc "main_reno_undo.c", 31, 2} true;
  assume {:verifier.code 0} true;
  call $i61 := printf.ref.i32.i32(.str.7, $i57, $i60);
  assume {:sourceloc "main_reno_undo.c", 33, 17} true;
  assume {:verifier.code 1} true;
  call $i62 := __VERIFIER_nondet_uint();
  call {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i62);
  assume {:sourceloc "main_reno_undo.c", 33, 2} true;
  assume {:verifier.code 0} true;
  $p63 := $load.ref($M.60, $p3);
  assume {:sourceloc "main_reno_undo.c", 33, 6} true;
  assume {:verifier.code 0} true;
  $p64 := $add.ref($add.ref($p63, $mul.ref(0, 784)), $mul.ref(452, 1));
  assume {:sourceloc "main_reno_undo.c", 33, 15} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.i32($M.1, $p64, $i62);
  assume {:sourceloc "main_reno_undo.c", 35, 21} true;
  assume {:verifier.code 1} true;
  call $i65 := __VERIFIER_nondet_uint();
  call {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i65);
  assume {:sourceloc "main_reno_undo.c", 35, 2} true;
  assume {:verifier.code 0} true;
  $p66 := $load.ref($M.60, $p3);
  assume {:sourceloc "main_reno_undo.c", 35, 6} true;
  assume {:verifier.code 0} true;
  $p67 := $add.ref($add.ref($p66, $mul.ref(0, 784)), $mul.ref(448, 1));
  assume {:sourceloc "main_reno_undo.c", 35, 19} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.i32($M.1, $p67, $i65);
  assume {:sourceloc "main_reno_undo.c", 36, 12} true;
  assume {:verifier.code 1} true;
  call $i68 := __VERIFIER_nondet_uint();
  call {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i68);
  assume {:sourceloc "main_reno_undo.c", 36, 12} true;
  assume {:verifier.code 0} true;
  $i69 := $zext.i32.i64($i68);
  assume {:sourceloc "main_reno_undo.c", 36, 10} true;
  assume {:verifier.code 0} true;
  $M.62 := $i69;
  call {:cexpr "jiffies"} boogie_si_record_i64($i69);
  assume {:sourceloc "main_reno_undo.c", 39, 11} true;
  assume {:verifier.code 0} true;
  $M.63 := $store.i8($M.63, $p5, 0);
  assume {:sourceloc "main_reno_undo.c", 40, 6} true;
  assume {:verifier.code 0} true;
  $p70 := $load.ref($M.61, $p4);
  assume {:sourceloc "main_reno_undo.c", 40, 12} true;
  assume {:verifier.code 0} true;
  $p71 := $add.ref($add.ref($p70, $mul.ref(0, 200)), $mul.ref(40, 1));
  assume {:sourceloc "main_reno_undo.c", 40, 12} true;
  assume {:verifier.code 0} true;
  $p72 := $load.ref($M.1, $p71);
  assume {:sourceloc "main_reno_undo.c", 40, 25} true;
  assume {:verifier.code 0} true;
  $p73 := $add.ref($add.ref($p72, $mul.ref(0, 136)), $mul.ref(40, 1));
  assume {:sourceloc "main_reno_undo.c", 40, 25} true;
  assume {:verifier.code 0} true;
  $p74 := $load.ref($M.30, $p73);
  assume {:sourceloc "main_reno_undo.c", 40, 6} true;
  assume {:verifier.code 0} true;
  $i75 := $ne.ref($p74, $0.ref);
  assume {:sourceloc "main_reno_undo.c", 40, 6} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i75} true;
  goto $bb4, $bb5;
$bb4:
  assume ($i75 == 1);
  assume {:sourceloc "main_reno_undo.c", 41, 3} true;
  assume {:verifier.code 0} true;
  $p76 := $load.ref($M.61, $p4);
  assume {:sourceloc "main_reno_undo.c", 41, 9} true;
  assume {:verifier.code 0} true;
  $p77 := $add.ref($add.ref($p76, $mul.ref(0, 200)), $mul.ref(40, 1));
  assume {:sourceloc "main_reno_undo.c", 41, 9} true;
  assume {:verifier.code 0} true;
  $p78 := $load.ref($M.1, $p77);
  assume {:sourceloc "main_reno_undo.c", 41, 22} true;
  assume {:verifier.code 0} true;
  $p79 := $add.ref($add.ref($p78, $mul.ref(0, 136)), $mul.ref(40, 1));
  assume {:sourceloc "main_reno_undo.c", 41, 22} true;
  assume {:verifier.code 0} true;
  $p80 := $load.ref($M.30, $p79);
  assume {:sourceloc "main_reno_undo.c", 41, 32} true;
  assume {:verifier.code 0} true;
  $p81 := $load.ref($M.59, $p2);
  assume {:sourceloc "main_reno_undo.c", 41, 32} true;
  assume {:verifier.code 0} true;
  $p82 := $bitcast.ref.ref($p81);
  assume {:sourceloc "main_reno_undo.c", 41, 36} true;
  assume {:verifier.code 0} true;
  $i83 := $load.i8($M.63, $p5);
  call devirtbounce.1($p80, $p82, $i83);
  assume {:sourceloc "main_reno_undo.c", 41, 3} true;
  assume {:verifier.code 0} true;
  goto $bb6;
$bb5:
  assume {:sourceloc "main_reno_undo.c", 40, 6} true;
  assume {:verifier.code 0} true;
  assume !(($i75 == 1));
  goto $bb6;
$bb6:
  assume {:sourceloc "main_reno_undo.c", 42, 24} true;
  assume {:verifier.code 0} true;
  $i84 := $load.i8($M.63, $p5);
  assume {:sourceloc "main_reno_undo.c", 42, 2} true;
  assume {:verifier.code 0} true;
  $p85 := $load.ref($M.61, $p4);
  assume {:sourceloc "main_reno_undo.c", 42, 8} true;
  assume {:verifier.code 0} true;
  $p86 := $add.ref($add.ref($p85, $mul.ref(0, 200)), $mul.ref(56, 1));
  assume {:sourceloc "main_reno_undo.c", 42, 22} true;
  assume {:verifier.code 0} true;
  $i87 := $load.i8($M.1, $p86);
  assume {:sourceloc "main_reno_undo.c", 42, 22} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: main_reno_undo.c:42:22: warning: over-approximating bitwise operation and;
  $i88 := $and.i8($i84, 63);
  assume {:sourceloc "main_reno_undo.c", 42, 22} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: main_reno_undo.c:42:22: warning: over-approximating bitwise operation and;
  $i89 := $and.i8($i87, $sub.i8(0, 64));
  assume {:sourceloc "main_reno_undo.c", 42, 22} true;
  assume {:verifier.code 0} true;
  // llvm2bpl: main_reno_undo.c:42:22: warning: over-approximating bitwise operation or;
  $i90 := $or.i8($i89, $i88);
  assume {:sourceloc "main_reno_undo.c", 42, 22} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.i8($M.1, $p86, $i90);
  assume {:sourceloc "main_reno_undo.c", 44, 19} true;
  assume {:verifier.code 0} true;
  $p91 := $load.ref($M.59, $p2);
  assume {:sourceloc "main_reno_undo.c", 44, 19} true;
  assume {:verifier.code 0} true;
  $p92 := $bitcast.ref.ref($p91);
  assume {:sourceloc "main_reno_undo.c", 44, 2} true;
  assume {:verifier.code 0} true;
  call tcp_set_ca_state($p92, 0);
  assume {:sourceloc "main_reno_undo.c", 45, 15} true;
  assume {:verifier.code 0} true;
  $p93 := $load.ref($M.59, $p2);
  assume {:sourceloc "main_reno_undo.c", 45, 15} true;
  assume {:verifier.code 0} true;
  $p94 := $bitcast.ref.ref($p93);
  assume {:sourceloc "main_reno_undo.c", 45, 2} true;
  assume {:verifier.code 0} true;
  call tcp_ca_event($p94, 2);
  assume true;
  assume {:sourceloc "main_reno_undo.c", 47, 6} true;
  assume {:verifier.code 0} true;
  $M.64 := $store.i32($M.64, $p7, 1);
  assume true;
  assume {:sourceloc "main_reno_undo.c", 48, 6} true;
  assume {:verifier.code 0} true;
  $M.65 := $store.i32($M.65, $p8, 1024);
  assume {:sourceloc "main_reno_undo.c", 50, 2} true;
  assume {:verifier.code 0} true;
  call $i95 := printf.ref(.str.8);
  assume {:sourceloc "main_reno_undo.c", 51, 21} true;
  assume {:verifier.code 0} true;
  $p96 := $load.ref($M.60, $p3);
  assume {:sourceloc "main_reno_undo.c", 51, 25} true;
  assume {:verifier.code 0} true;
  $p97 := $add.ref($add.ref($p96, $mul.ref(0, 784)), $mul.ref(452, 1));
  assume {:sourceloc "main_reno_undo.c", 51, 25} true;
  assume {:verifier.code 0} true;
  $i98 := $load.i32($M.1, $p97);
  assume {:sourceloc "main_reno_undo.c", 51, 2} true;
  assume {:verifier.code 0} true;
  $p99 := $load.ref($M.60, $p3);
  assume {:sourceloc "main_reno_undo.c", 51, 6} true;
  assume {:verifier.code 0} true;
  $p100 := $add.ref($add.ref($p99, $mul.ref(0, 784)), $mul.ref(456, 1));
  assume {:sourceloc "main_reno_undo.c", 51, 19} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.i32($M.1, $p100, $i98);
  assume true;
  assume {:sourceloc "main_reno_undo.c", 52, 19} true;
  assume {:verifier.code 0} true;
  $p101 := $load.ref($M.60, $p3);
  assume {:sourceloc "main_reno_undo.c", 52, 23} true;
  assume {:verifier.code 0} true;
  $p102 := $add.ref($add.ref($p101, $mul.ref(0, 784)), $mul.ref(452, 1));
  assume {:sourceloc "main_reno_undo.c", 52, 23} true;
  assume {:verifier.code 0} true;
  $i103 := $load.i32($M.1, $p102);
  assume {:sourceloc "main_reno_undo.c", 52, 6} true;
  assume {:verifier.code 0} true;
  $M.66 := $store.i32($M.66, $p9, $i103);
  assume true;
  assume {:sourceloc "main_reno_undo.c", 54, 11} true;
  assume {:verifier.code 0} true;
  $M.67 := $store.i32($M.67, $p10, 0);
  assume {:sourceloc "main_reno_undo.c", 54, 7} true;
  assume {:verifier.code 0} true;
  goto $bb7;
$bb7:
  assume {:sourceloc "main_reno_undo.c", 54, 18} true;
  assume {:verifier.code 0} true;
  $i104 := $load.i32($M.67, $p10);
  assume {:sourceloc "main_reno_undo.c", 54, 20} true;
  assume {:verifier.code 0} true;
  $i105 := $slt.i32($i104, 100);
  assume {:sourceloc "main_reno_undo.c", 54, 2} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i105} true;
  goto $bb8, $bb9;
$bb8:
  assume ($i105 == 1);
  assume {:sourceloc "main_reno_undo.c", 56, 7} true;
  assume {:verifier.code 0} true;
  $p106 := $load.ref($M.61, $p4);
  assume {:sourceloc "main_reno_undo.c", 56, 13} true;
  assume {:verifier.code 0} true;
  $p107 := $add.ref($add.ref($p106, $mul.ref(0, 200)), $mul.ref(40, 1));
  assume {:sourceloc "main_reno_undo.c", 56, 13} true;
  assume {:verifier.code 0} true;
  $p108 := $load.ref($M.1, $p107);
  assume {:sourceloc "main_reno_undo.c", 56, 26} true;
  assume {:verifier.code 0} true;
  $p109 := $add.ref($add.ref($p108, $mul.ref(0, 136)), $mul.ref(72, 1));
  assume {:sourceloc "main_reno_undo.c", 56, 26} true;
  assume {:verifier.code 0} true;
  $p110 := $load.ref($M.30, $p109);
  assume {:sourceloc "main_reno_undo.c", 56, 7} true;
  assume {:verifier.code 0} true;
  $i111 := $ne.ref($p110, $0.ref);
  assume {:sourceloc "main_reno_undo.c", 56, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i111} true;
  goto $bb10, $bb11;
$bb9:
  assume !(($i105 == 1));
  assume {:sourceloc "main_reno_undo.c", 74, 19} true;
  assume {:verifier.code 0} true;
  $p146 := $load.ref($M.59, $p2);
  assume {:sourceloc "main_reno_undo.c", 74, 19} true;
  assume {:verifier.code 0} true;
  $p147 := $bitcast.ref.ref($p146);
  assume {:sourceloc "main_reno_undo.c", 74, 2} true;
  assume {:verifier.code 0} true;
  call tcp_set_ca_state($p147, 1);
  assume {:sourceloc "main_reno_undo.c", 76, 2} true;
  assume {:verifier.code 0} true;
  call $i148 := printf.ref(.str.9);
  assume {:sourceloc "main_reno_undo.c", 77, 44} true;
  assume {:verifier.code 0} true;
  $p149 := $load.ref($M.59, $p2);
  assume {:sourceloc "main_reno_undo.c", 77, 44} true;
  assume {:verifier.code 0} true;
  $p150 := $bitcast.ref.ref($p149);
  assume {:sourceloc "main_reno_undo.c", 77, 23} true;
  assume {:verifier.code 0} true;
  call $i151 := tcp_current_ssthresh($p150);
  assume {:sourceloc "main_reno_undo.c", 77, 2} true;
  assume {:verifier.code 0} true;
  $p152 := $load.ref($M.60, $p3);
  assume {:sourceloc "main_reno_undo.c", 77, 6} true;
  assume {:verifier.code 0} true;
  $p153 := $add.ref($add.ref($p152, $mul.ref(0, 784)), $mul.ref(668, 1));
  assume {:sourceloc "main_reno_undo.c", 77, 21} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.i32($M.1, $p153, $i151);
  assume {:sourceloc "main_reno_undo.c", 78, 2} true;
  assume {:verifier.code 0} true;
  $p154 := $load.ref($M.60, $p3);
  assume {:sourceloc "main_reno_undo.c", 78, 6} true;
  assume {:verifier.code 0} true;
  $p155 := $add.ref($add.ref($p154, $mul.ref(0, 784)), $mul.ref(456, 1));
  assume {:sourceloc "main_reno_undo.c", 78, 19} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.i32($M.1, $p155, 0);
  assume {:sourceloc "main_reno_undo.c", 79, 19} true;
  assume {:verifier.code 0} true;
  $p156 := $load.ref($M.60, $p3);
  assume {:sourceloc "main_reno_undo.c", 79, 23} true;
  assume {:verifier.code 0} true;
  $p157 := $add.ref($add.ref($p156, $mul.ref(0, 784)), $mul.ref(452, 1));
  assume {:sourceloc "main_reno_undo.c", 79, 23} true;
  assume {:verifier.code 0} true;
  $i158 := $load.i32($M.1, $p157);
  assume {:sourceloc "main_reno_undo.c", 79, 2} true;
  assume {:verifier.code 0} true;
  $p159 := $load.ref($M.60, $p3);
  assume {:sourceloc "main_reno_undo.c", 79, 6} true;
  assume {:verifier.code 0} true;
  $p160 := $add.ref($add.ref($p159, $mul.ref(0, 784)), $mul.ref(472, 1));
  assume {:sourceloc "main_reno_undo.c", 79, 17} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.i32($M.1, $p160, $i158);
  assume {:sourceloc "main_reno_undo.c", 80, 15} true;
  assume {:verifier.code 0} true;
  $p161 := $load.ref($M.60, $p3);
  assume {:sourceloc "main_reno_undo.c", 80, 19} true;
  assume {:verifier.code 0} true;
  $p162 := $add.ref($add.ref($p161, $mul.ref(0, 784)), $mul.ref(452, 1));
  assume {:sourceloc "main_reno_undo.c", 80, 19} true;
  assume {:verifier.code 0} true;
  $i163 := $load.i32($M.1, $p162);
  assume {:sourceloc "main_reno_undo.c", 80, 13} true;
  assume {:verifier.code 0} true;
  $M.66 := $store.i32($M.66, $p9, $i163);
  assume {:sourceloc "main_reno_undo.c", 81, 21} true;
  assume {:verifier.code 0} true;
  $p164 := $load.ref($M.61, $p4);
  assume {:sourceloc "main_reno_undo.c", 81, 27} true;
  assume {:verifier.code 0} true;
  $p165 := $add.ref($add.ref($p164, $mul.ref(0, 200)), $mul.ref(40, 1));
  assume {:sourceloc "main_reno_undo.c", 81, 27} true;
  assume {:verifier.code 0} true;
  $p166 := $load.ref($M.1, $p165);
  assume {:sourceloc "main_reno_undo.c", 81, 40} true;
  assume {:verifier.code 0} true;
  $p167 := $add.ref($add.ref($p166, $mul.ref(0, 136)), $mul.ref(24, 1));
  assume {:sourceloc "main_reno_undo.c", 81, 40} true;
  assume {:verifier.code 0} true;
  $p168 := $load.ref($M.30, $p167);
  assume {:sourceloc "main_reno_undo.c", 81, 49} true;
  assume {:verifier.code 0} true;
  $p169 := $load.ref($M.59, $p2);
  assume {:sourceloc "main_reno_undo.c", 81, 49} true;
  assume {:verifier.code 0} true;
  $p170 := $bitcast.ref.ref($p169);
  call $i171 := devirtbounce.3($p168, $p170);
  assume {:sourceloc "main_reno_undo.c", 81, 2} true;
  assume {:verifier.code 0} true;
  $p172 := $load.ref($M.60, $p3);
  assume {:sourceloc "main_reno_undo.c", 81, 6} true;
  assume {:verifier.code 0} true;
  $p173 := $add.ref($add.ref($p172, $mul.ref(0, 784)), $mul.ref(448, 1));
  assume {:sourceloc "main_reno_undo.c", 81, 19} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.i32($M.1, $p173, $i171);
  assume {:sourceloc "main_reno_undo.c", 83, 19} true;
  assume {:verifier.code 0} true;
  $p174 := $load.ref($M.59, $p2);
  assume {:sourceloc "main_reno_undo.c", 83, 19} true;
  assume {:verifier.code 0} true;
  $p175 := $bitcast.ref.ref($p174);
  assume {:sourceloc "main_reno_undo.c", 83, 2} true;
  assume {:verifier.code 0} true;
  call tcp_set_ca_state($p175, 3);
  assume {:sourceloc "main_reno_undo.c", 85, 2} true;
  assume {:verifier.code 0} true;
  call $i176 := printf.ref(.str.10);
  assume {:sourceloc "main_reno_undo.c", 86, 17} true;
  assume {:verifier.code 0} true;
  $p177 := $load.ref($M.61, $p4);
  assume {:sourceloc "main_reno_undo.c", 86, 23} true;
  assume {:verifier.code 0} true;
  $p178 := $add.ref($add.ref($p177, $mul.ref(0, 200)), $mul.ref(40, 1));
  assume {:sourceloc "main_reno_undo.c", 86, 23} true;
  assume {:verifier.code 0} true;
  $p179 := $load.ref($M.1, $p178);
  assume {:sourceloc "main_reno_undo.c", 86, 36} true;
  assume {:verifier.code 0} true;
  $p180 := $add.ref($add.ref($p179, $mul.ref(0, 136)), $mul.ref(64, 1));
  assume {:sourceloc "main_reno_undo.c", 86, 36} true;
  assume {:verifier.code 0} true;
  $p181 := $load.ref($M.30, $p180);
  assume {:sourceloc "main_reno_undo.c", 86, 46} true;
  assume {:verifier.code 0} true;
  $p182 := $load.ref($M.59, $p2);
  assume {:sourceloc "main_reno_undo.c", 86, 46} true;
  assume {:verifier.code 0} true;
  $p183 := $bitcast.ref.ref($p182);
  call $i184 := devirtbounce.3($p181, $p183);
  assume {:sourceloc "main_reno_undo.c", 86, 2} true;
  assume {:verifier.code 0} true;
  $p185 := $load.ref($M.60, $p3);
  assume {:sourceloc "main_reno_undo.c", 86, 6} true;
  assume {:verifier.code 0} true;
  $p186 := $add.ref($add.ref($p185, $mul.ref(0, 784)), $mul.ref(452, 1));
  assume {:sourceloc "main_reno_undo.c", 86, 15} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.i32($M.1, $p186, $i184);
  assume {:sourceloc "main_reno_undo.c", 87, 6} true;
  assume {:verifier.code 0} true;
  $p187 := $load.ref($M.60, $p3);
  assume {:sourceloc "main_reno_undo.c", 87, 10} true;
  assume {:verifier.code 0} true;
  $p188 := $add.ref($add.ref($p187, $mul.ref(0, 784)), $mul.ref(668, 1));
  assume {:sourceloc "main_reno_undo.c", 87, 10} true;
  assume {:verifier.code 0} true;
  $i189 := $load.i32($M.1, $p188);
  assume {:sourceloc "main_reno_undo.c", 87, 27} true;
  assume {:verifier.code 0} true;
  $p190 := $load.ref($M.60, $p3);
  assume {:sourceloc "main_reno_undo.c", 87, 31} true;
  assume {:verifier.code 0} true;
  $p191 := $add.ref($add.ref($p190, $mul.ref(0, 784)), $mul.ref(448, 1));
  assume {:sourceloc "main_reno_undo.c", 87, 31} true;
  assume {:verifier.code 0} true;
  $i192 := $load.i32($M.1, $p191);
  assume {:sourceloc "main_reno_undo.c", 87, 25} true;
  assume {:verifier.code 0} true;
  $i193 := $ugt.i32($i189, $i192);
  assume {:sourceloc "main_reno_undo.c", 87, 6} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i193} true;
  goto $bb14, $bb15;
$bb10:
  assume ($i111 == 1);
  assume true;
  assume {:sourceloc "main_reno_undo.c", 58, 31} true;
  assume {:verifier.code 0} true;
  $p112 := $add.ref($add.ref($p11, $mul.ref(0, 12)), $mul.ref(0, 1));
  assume {:sourceloc "main_reno_undo.c", 58, 47} true;
  assume {:verifier.code 0} true;
  $i113 := $load.i32($M.64, $p7);
  assume {:sourceloc "main_reno_undo.c", 58, 31} true;
  assume {:verifier.code 0} true;
  $M.68 := $store.i32($M.68, $p112, $i113);
  assume {:sourceloc "main_reno_undo.c", 58, 31} true;
  assume {:verifier.code 0} true;
  $p114 := $add.ref($add.ref($p11, $mul.ref(0, 12)), $mul.ref(4, 1));
  assume {:sourceloc "main_reno_undo.c", 58, 31} true;
  assume {:verifier.code 0} true;
  $M.69 := $store.i32($M.69, $p114, 100);
  assume {:sourceloc "main_reno_undo.c", 58, 31} true;
  assume {:verifier.code 0} true;
  $p115 := $add.ref($add.ref($p11, $mul.ref(0, 12)), $mul.ref(8, 1));
  assume {:sourceloc "main_reno_undo.c", 60, 25} true;
  assume {:verifier.code 0} true;
  $i116 := $load.i32($M.65, $p8);
  assume {:sourceloc "main_reno_undo.c", 58, 31} true;
  assume {:verifier.code 0} true;
  $M.70 := $store.i32($M.70, $p115, $i116);
  assume {:sourceloc "main_reno_undo.c", 62, 4} true;
  assume {:verifier.code 0} true;
  $p117 := $load.ref($M.61, $p4);
  assume {:sourceloc "main_reno_undo.c", 62, 10} true;
  assume {:verifier.code 0} true;
  $p118 := $add.ref($add.ref($p117, $mul.ref(0, 200)), $mul.ref(40, 1));
  assume {:sourceloc "main_reno_undo.c", 62, 10} true;
  assume {:verifier.code 0} true;
  $p119 := $load.ref($M.1, $p118);
  assume {:sourceloc "main_reno_undo.c", 62, 23} true;
  assume {:verifier.code 0} true;
  $p120 := $add.ref($add.ref($p119, $mul.ref(0, 136)), $mul.ref(72, 1));
  assume {:sourceloc "main_reno_undo.c", 62, 23} true;
  assume {:verifier.code 0} true;
  $p121 := $load.ref($M.30, $p120);
  assume {:sourceloc "main_reno_undo.c", 62, 34} true;
  assume {:verifier.code 0} true;
  $p122 := $load.ref($M.59, $p2);
  assume {:sourceloc "main_reno_undo.c", 62, 34} true;
  assume {:verifier.code 0} true;
  $p123 := $bitcast.ref.ref($p122);
  call devirtbounce.2($p121, $p123, $p11);
  assume {:sourceloc "main_reno_undo.c", 63, 3} true;
  assume {:verifier.code 0} true;
  goto $bb12;
$bb11:
  assume {:sourceloc "main_reno_undo.c", 56, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i111 == 1));
  goto $bb12;
$bb12:
  assume {:sourceloc "main_reno_undo.c", 65, 16} true;
  assume {:verifier.code 0} true;
  $p124 := $load.ref($M.60, $p3);
  assume {:sourceloc "main_reno_undo.c", 65, 20} true;
  assume {:verifier.code 0} true;
  $p125 := $add.ref($add.ref($p124, $mul.ref(0, 784)), $mul.ref(452, 1));
  assume {:sourceloc "main_reno_undo.c", 65, 20} true;
  assume {:verifier.code 0} true;
  $i126 := $load.i32($M.1, $p125);
  assume {:sourceloc "main_reno_undo.c", 65, 14} true;
  assume {:verifier.code 0} true;
  $M.66 := $store.i32($M.66, $p9, $i126);
  assume {:sourceloc "main_reno_undo.c", 66, 25} true;
  assume {:verifier.code 0} true;
  $p127 := $load.ref($M.60, $p3);
  assume {:sourceloc "main_reno_undo.c", 66, 29} true;
  assume {:verifier.code 0} true;
  $p128 := $add.ref($add.ref($p127, $mul.ref(0, 784)), $mul.ref(452, 1));
  assume {:sourceloc "main_reno_undo.c", 66, 29} true;
  assume {:verifier.code 0} true;
  $i129 := $load.i32($M.1, $p128);
  assume {:sourceloc "main_reno_undo.c", 66, 3} true;
  assume {:verifier.code 0} true;
  $p130 := $load.ref($M.60, $p3);
  assume {:sourceloc "main_reno_undo.c", 66, 7} true;
  assume {:verifier.code 0} true;
  $p131 := $add.ref($add.ref($p130, $mul.ref(0, 784)), $mul.ref(396, 1));
  assume {:sourceloc "main_reno_undo.c", 66, 23} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.i32($M.1, $p131, $i129);
  assume {:sourceloc "main_reno_undo.c", 67, 18} true;
  assume {:verifier.code 0} true;
  $p132 := $load.ref($M.59, $p2);
  assume {:sourceloc "main_reno_undo.c", 67, 18} true;
  assume {:verifier.code 0} true;
  $p133 := $bitcast.ref.ref($p132);
  assume {:sourceloc "main_reno_undo.c", 67, 22} true;
  assume {:verifier.code 0} true;
  $i134 := $load.i32($M.64, $p7);
  assume {:sourceloc "main_reno_undo.c", 67, 27} true;
  assume {:verifier.code 0} true;
  $i135 := $load.i32($M.65, $p8);
  assume {:sourceloc "main_reno_undo.c", 67, 3} true;
  assume {:verifier.code 0} true;
  call tcp_cong_avoid($p133, $i134, $i135);
  assume {:sourceloc "main_reno_undo.c", 68, 6} true;
  assume {:verifier.code 0} true;
  $i136 := $load.i32($M.64, $p7);
  assume {:sourceloc "main_reno_undo.c", 68, 6} true;
  assume {:verifier.code 0} true;
  $i137 := $add.i32($i136, 1);
  assume {:sourceloc "main_reno_undo.c", 68, 6} true;
  assume {:verifier.code 0} true;
  $M.64 := $store.i32($M.64, $p7, $i137);
  assume {:sourceloc "main_reno_undo.c", 70, 3} true;
  assume {:verifier.code 1} true;
  $p138 := $load.ref($M.60, $p3);
  assume {:sourceloc "main_reno_undo.c", 70, 3} true;
  assume {:verifier.code 1} true;
  $p139 := $add.ref($add.ref($p138, $mul.ref(0, 784)), $mul.ref(452, 1));
  assume {:sourceloc "main_reno_undo.c", 70, 3} true;
  assume {:verifier.code 1} true;
  $i140 := $load.i32($M.1, $p139);
  assume {:sourceloc "main_reno_undo.c", 70, 3} true;
  assume {:verifier.code 1} true;
  $i141 := $load.i32($M.66, $p9);
  assume {:sourceloc "main_reno_undo.c", 70, 3} true;
  assume {:verifier.code 1} true;
  $i142 := $ugt.i32($i140, $i141);
  assume {:sourceloc "main_reno_undo.c", 70, 3} true;
  assume {:verifier.code 1} true;
  $i143 := $zext.i1.i32($i142);
  assume {:sourceloc "main_reno_undo.c", 70, 3} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_assert($i143);
  assume {:sourceloc "main_reno_undo.c", 71, 2} true;
  assume {:verifier.code 0} true;
  goto $bb13;
$bb13:
  assume {:sourceloc "main_reno_undo.c", 54, 28} true;
  assume {:verifier.code 0} true;
  $i144 := $load.i32($M.67, $p10);
  assume {:sourceloc "main_reno_undo.c", 54, 28} true;
  assume {:verifier.code 0} true;
  $i145 := $add.i32($i144, 1);
  assume {:sourceloc "main_reno_undo.c", 54, 28} true;
  assume {:verifier.code 0} true;
  $M.67 := $store.i32($M.67, $p10, $i145);
  assume {:sourceloc "main_reno_undo.c", 54, 2} true;
  assume {:verifier.code 0} true;
  goto $bb7;
$bb14:
  assume ($i193 == 1);
  assume {:sourceloc "main_reno_undo.c", 88, 22} true;
  assume {:verifier.code 0} true;
  $p194 := $load.ref($M.60, $p3);
  assume {:sourceloc "main_reno_undo.c", 88, 26} true;
  assume {:verifier.code 0} true;
  $p195 := $add.ref($add.ref($p194, $mul.ref(0, 784)), $mul.ref(668, 1));
  assume {:sourceloc "main_reno_undo.c", 88, 26} true;
  assume {:verifier.code 0} true;
  $i196 := $load.i32($M.1, $p195);
  assume {:sourceloc "main_reno_undo.c", 88, 3} true;
  assume {:verifier.code 0} true;
  $p197 := $load.ref($M.60, $p3);
  assume {:sourceloc "main_reno_undo.c", 88, 7} true;
  assume {:verifier.code 0} true;
  $p198 := $add.ref($add.ref($p197, $mul.ref(0, 784)), $mul.ref(448, 1));
  assume {:sourceloc "main_reno_undo.c", 88, 20} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.i32($M.1, $p198, $i196);
  assume {:sourceloc "main_reno_undo.c", 89, 2} true;
  assume {:verifier.code 0} true;
  goto $bb16;
$bb15:
  assume {:sourceloc "main_reno_undo.c", 87, 6} true;
  assume {:verifier.code 0} true;
  assume !(($i193 == 1));
  goto $bb16;
$bb16:
  assume {:sourceloc "main_reno_undo.c", 91, 2} true;
  assume {:verifier.code 1} true;
  $p199 := $load.ref($M.60, $p3);
  assume {:sourceloc "main_reno_undo.c", 91, 2} true;
  assume {:verifier.code 1} true;
  $p200 := $add.ref($add.ref($p199, $mul.ref(0, 784)), $mul.ref(452, 1));
  assume {:sourceloc "main_reno_undo.c", 91, 2} true;
  assume {:verifier.code 1} true;
  $i201 := $load.i32($M.1, $p200);
  assume {:sourceloc "main_reno_undo.c", 91, 2} true;
  assume {:verifier.code 1} true;
  $i202 := $load.i32($M.66, $p9);
  assume {:sourceloc "main_reno_undo.c", 91, 2} true;
  assume {:verifier.code 1} true;
  $i203 := $eq.i32($i201, $i202);
  assume {:sourceloc "main_reno_undo.c", 91, 2} true;
  assume {:verifier.code 1} true;
  $i204 := $zext.i1.i32($i203);
  assume {:sourceloc "main_reno_undo.c", 91, 2} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_assert($i204);
  assume {:sourceloc "main_reno_undo.c", 93, 30} true;
  assume {:verifier.code 0} true;
  $p205 := $load.ref($M.60, $p3);
  assume {:sourceloc "main_reno_undo.c", 93, 34} true;
  assume {:verifier.code 0} true;
  $p206 := $add.ref($add.ref($p205, $mul.ref(0, 784)), $mul.ref(452, 1));
  assume {:sourceloc "main_reno_undo.c", 93, 34} true;
  assume {:verifier.code 0} true;
  $i207 := $load.i32($M.1, $p206);
  assume {:sourceloc "main_reno_undo.c", 93, 2} true;
  assume {:verifier.code 0} true;
  call $i208 := printf.ref.i32(.str.11, $i207);
  assume {:sourceloc "main_reno_undo.c", 94, 2} true;
  assume {:verifier.code 0} true;
  $r := 0;
  $exn := false;
  return;
}
const tcp_sk_init: ref;
axiom (tcp_sk_init == $sub.ref(0, 78981));
procedure  tcp_sk_init($p0: ref)
  returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i32;
  var $i62: i32;
$bb0:
  assume {:sourceloc "../../stub_model/source/simple_tcp_ipv4.c", 40, 2} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  call $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p5 := $alloc($mul.ref(4, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  $M.71 := $store.ref($M.71, $p2, $p0);
  assume true;
  assume true;
  assume true;
  assume true;
  assume {:sourceloc "../../stub_model/source/simple_tcp_ipv4.c", 40, 2} true;
  assume {:verifier.code 0} true;
  $p6 := $load.ref($M.71, $p2);
  assume {:sourceloc "../../stub_model/source/simple_tcp_ipv4.c", 40, 7} true;
  assume {:verifier.code 0} true;
  $p7 := $add.ref($add.ref($p6, $mul.ref(0, 160)), $mul.ref(0, 1));
  $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 160)), $mul.ref(0, 1)), $mul.ref(24, 1));
  assume {:sourceloc "../../stub_model/source/simple_tcp_ipv4.c", 40, 27} true;
  assume {:verifier.code 0} true;
  $M.30 := $store.i32($M.30, $p8, 2);
  assume {:sourceloc "../../stub_model/source/simple_tcp_ipv4.c", 41, 2} true;
  assume {:verifier.code 0} true;
  $p9 := $load.ref($M.71, $p2);
  assume {:sourceloc "../../stub_model/source/simple_tcp_ipv4.c", 41, 7} true;
  assume {:verifier.code 0} true;
  $p10 := $add.ref($add.ref($p9, $mul.ref(0, 160)), $mul.ref(0, 1));
  $p11 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 160)), $mul.ref(0, 1)), $mul.ref(28, 1));
  assume {:sourceloc "../../stub_model/source/simple_tcp_ipv4.c", 41, 36} true;
  assume {:verifier.code 0} true;
  $M.30 := $store.i32($M.30, $p11, 1);
  assume {:sourceloc "../../stub_model/source/simple_tcp_ipv4.c", 43, 2} true;
  assume {:verifier.code 0} true;
  $p12 := $load.ref($M.71, $p2);
  assume {:sourceloc "../../stub_model/source/simple_tcp_ipv4.c", 43, 7} true;
  assume {:verifier.code 0} true;
  $p13 := $add.ref($add.ref($p12, $mul.ref(0, 160)), $mul.ref(0, 1));
  $p14 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 160)), $mul.ref(0, 1)), $mul.ref(76, 1));
  assume {:sourceloc "../../stub_model/source/simple_tcp_ipv4.c", 43, 32} true;
  assume {:verifier.code 0} true;
  $M.30 := $store.i32($M.30, $p14, 1024);
  assume {:sourceloc "../../stub_model/source/simple_tcp_ipv4.c", 44, 2} true;
  assume {:verifier.code 0} true;
  $p15 := $load.ref($M.71, $p2);
  assume {:sourceloc "../../stub_model/source/simple_tcp_ipv4.c", 44, 7} true;
  assume {:verifier.code 0} true;
  $p16 := $add.ref($add.ref($p15, $mul.ref(0, 160)), $mul.ref(0, 1));
  $p17 := $add.ref($add.ref($add.ref($p15, $mul.ref(0, 160)), $mul.ref(0, 1)), $mul.ref(80, 1));
  assume {:sourceloc "../../stub_model/source/simple_tcp_ipv4.c", 44, 39} true;
  assume {:verifier.code 0} true;
  $M.30 := $store.i32($M.30, $p17, 8);
  assume {:sourceloc "../../stub_model/source/simple_tcp_ipv4.c", 45, 2} true;
  assume {:verifier.code 0} true;
  $p18 := $load.ref($M.71, $p2);
  assume {:sourceloc "../../stub_model/source/simple_tcp_ipv4.c", 45, 7} true;
  assume {:verifier.code 0} true;
  $p19 := $add.ref($add.ref($p18, $mul.ref(0, 160)), $mul.ref(0, 1));
  $p20 := $add.ref($add.ref($add.ref($p18, $mul.ref(0, 160)), $mul.ref(0, 1)), $mul.ref(84, 1));
  assume {:sourceloc "../../stub_model/source/simple_tcp_ipv4.c", 45, 38} true;
  assume {:verifier.code 0} true;
  $M.30 := $store.i32($M.30, $p20, 600);
  assume {:sourceloc "../../stub_model/source/simple_tcp_ipv4.c", 47, 2} true;
  assume {:verifier.code 0} true;
  $p21 := $load.ref($M.71, $p2);
  assume {:sourceloc "../../stub_model/source/simple_tcp_ipv4.c", 47, 7} true;
  assume {:verifier.code 0} true;
  $p22 := $add.ref($add.ref($p21, $mul.ref(0, 160)), $mul.ref(0, 1));
  $p23 := $add.ref($add.ref($add.ref($p21, $mul.ref(0, 160)), $mul.ref(0, 1)), $mul.ref(88, 1));
  assume {:sourceloc "../../stub_model/source/simple_tcp_ipv4.c", 47, 38} true;
  assume {:verifier.code 0} true;
  $M.30 := $store.i32($M.30, $p23, 7200000);
  assume {:sourceloc "../../stub_model/source/simple_tcp_ipv4.c", 48, 2} true;
  assume {:verifier.code 0} true;
  $p24 := $load.ref($M.71, $p2);
  assume {:sourceloc "../../stub_model/source/simple_tcp_ipv4.c", 48, 7} true;
  assume {:verifier.code 0} true;
  $p25 := $add.ref($add.ref($p24, $mul.ref(0, 160)), $mul.ref(0, 1));
  $p26 := $add.ref($add.ref($add.ref($p24, $mul.ref(0, 160)), $mul.ref(0, 1)), $mul.ref(92, 1));
  assume {:sourceloc "../../stub_model/source/simple_tcp_ipv4.c", 48, 40} true;
  assume {:verifier.code 0} true;
  $M.30 := $store.i32($M.30, $p26, 9);
  assume {:sourceloc "../../stub_model/source/simple_tcp_ipv4.c", 49, 2} true;
  assume {:verifier.code 0} true;
  $p27 := $load.ref($M.71, $p2);
  assume {:sourceloc "../../stub_model/source/simple_tcp_ipv4.c", 49, 7} true;
  assume {:verifier.code 0} true;
  $p28 := $add.ref($add.ref($p27, $mul.ref(0, 160)), $mul.ref(0, 1));
  $p29 := $add.ref($add.ref($add.ref($p27, $mul.ref(0, 160)), $mul.ref(0, 1)), $mul.ref(96, 1));
  assume {:sourceloc "../../stub_model/source/simple_tcp_ipv4.c", 49, 39} true;
  assume {:verifier.code 0} true;
  $M.30 := $store.i32($M.30, $p29, 75000);
  assume {:sourceloc "../../stub_model/source/simple_tcp_ipv4.c", 51, 2} true;
  assume {:verifier.code 0} true;
  $p30 := $load.ref($M.71, $p2);
  assume {:sourceloc "../../stub_model/source/simple_tcp_ipv4.c", 51, 7} true;
  assume {:verifier.code 0} true;
  $p31 := $add.ref($add.ref($p30, $mul.ref(0, 160)), $mul.ref(0, 1));
  $p32 := $add.ref($add.ref($add.ref($p30, $mul.ref(0, 160)), $mul.ref(0, 1)), $mul.ref(100, 1));
  assume {:sourceloc "../../stub_model/source/simple_tcp_ipv4.c", 51, 35} true;
  assume {:verifier.code 0} true;
  $M.30 := $store.i32($M.30, $p32, 6);
  assume {:sourceloc "../../stub_model/source/simple_tcp_ipv4.c", 52, 2} true;
  assume {:verifier.code 0} true;
  $p33 := $load.ref($M.71, $p2);
  assume {:sourceloc "../../stub_model/source/simple_tcp_ipv4.c", 52, 7} true;
  assume {:verifier.code 0} true;
  $p34 := $add.ref($add.ref($p33, $mul.ref(0, 160)), $mul.ref(0, 1));
  $p35 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 160)), $mul.ref(0, 1)), $mul.ref(104, 1));
  assume {:sourceloc "../../stub_model/source/simple_tcp_ipv4.c", 52, 38} true;
  assume {:verifier.code 0} true;
  $M.30 := $store.i32($M.30, $p35, 5);
  assume {:sourceloc "../../stub_model/source/simple_tcp_ipv4.c", 53, 2} true;
  assume {:verifier.code 0} true;
  $p36 := $load.ref($M.71, $p2);
  assume {:sourceloc "../../stub_model/source/simple_tcp_ipv4.c", 53, 7} true;
  assume {:verifier.code 0} true;
  $p37 := $add.ref($add.ref($p36, $mul.ref(0, 160)), $mul.ref(0, 1));
  $p38 := $add.ref($add.ref($add.ref($p36, $mul.ref(0, 160)), $mul.ref(0, 1)), $mul.ref(108, 1));
  assume {:sourceloc "../../stub_model/source/simple_tcp_ipv4.c", 53, 34} true;
  assume {:verifier.code 0} true;
  $M.30 := $store.i32($M.30, $p38, 1);
  assume {:sourceloc "../../stub_model/source/simple_tcp_ipv4.c", 54, 2} true;
  assume {:verifier.code 0} true;
  $p39 := $load.ref($M.71, $p2);
  assume {:sourceloc "../../stub_model/source/simple_tcp_ipv4.c", 54, 7} true;
  assume {:verifier.code 0} true;
  $p40 := $add.ref($add.ref($p39, $mul.ref(0, 160)), $mul.ref(0, 1));
  $p41 := $add.ref($add.ref($add.ref($p39, $mul.ref(0, 160)), $mul.ref(0, 1)), $mul.ref(112, 1));
  assume {:sourceloc "../../stub_model/source/simple_tcp_ipv4.c", 54, 34} true;
  assume {:verifier.code 0} true;
  $M.30 := $store.i32($M.30, $p41, 3);
  assume {:sourceloc "../../stub_model/source/simple_tcp_ipv4.c", 55, 2} true;
  assume {:verifier.code 0} true;
  $p42 := $load.ref($M.71, $p2);
  assume {:sourceloc "../../stub_model/source/simple_tcp_ipv4.c", 55, 7} true;
  assume {:verifier.code 0} true;
  $p43 := $add.ref($add.ref($p42, $mul.ref(0, 160)), $mul.ref(0, 1));
  $p44 := $add.ref($add.ref($add.ref($p42, $mul.ref(0, 160)), $mul.ref(0, 1)), $mul.ref(116, 1));
  assume {:sourceloc "../../stub_model/source/simple_tcp_ipv4.c", 55, 32} true;
  assume {:verifier.code 0} true;
  $M.30 := $store.i32($M.30, $p44, 3);
  assume {:sourceloc "../../stub_model/source/simple_tcp_ipv4.c", 56, 2} true;
  assume {:verifier.code 0} true;
  $p45 := $load.ref($M.71, $p2);
  assume {:sourceloc "../../stub_model/source/simple_tcp_ipv4.c", 56, 7} true;
  assume {:verifier.code 0} true;
  $p46 := $add.ref($add.ref($p45, $mul.ref(0, 160)), $mul.ref(0, 1));
  $p47 := $add.ref($add.ref($add.ref($p45, $mul.ref(0, 160)), $mul.ref(0, 1)), $mul.ref(120, 1));
  assume {:sourceloc "../../stub_model/source/simple_tcp_ipv4.c", 56, 32} true;
  assume {:verifier.code 0} true;
  $M.30 := $store.i32($M.30, $p47, 15);
  assume {:sourceloc "../../stub_model/source/simple_tcp_ipv4.c", 57, 2} true;
  assume {:verifier.code 0} true;
  $p48 := $load.ref($M.71, $p2);
  assume {:sourceloc "../../stub_model/source/simple_tcp_ipv4.c", 57, 7} true;
  assume {:verifier.code 0} true;
  $p49 := $add.ref($add.ref($p48, $mul.ref(0, 160)), $mul.ref(0, 1));
  $p50 := $add.ref($add.ref($add.ref($p48, $mul.ref(0, 160)), $mul.ref(0, 1)), $mul.ref(124, 1));
  assume {:sourceloc "../../stub_model/source/simple_tcp_ipv4.c", 57, 38} true;
  assume {:verifier.code 0} true;
  $M.30 := $store.i32($M.30, $p50, 0);
  assume {:sourceloc "../../stub_model/source/simple_tcp_ipv4.c", 58, 2} true;
  assume {:verifier.code 0} true;
  $p51 := $load.ref($M.71, $p2);
  assume {:sourceloc "../../stub_model/source/simple_tcp_ipv4.c", 58, 7} true;
  assume {:verifier.code 0} true;
  $p52 := $add.ref($add.ref($p51, $mul.ref(0, 160)), $mul.ref(0, 1));
  $p53 := $add.ref($add.ref($add.ref($p51, $mul.ref(0, 160)), $mul.ref(0, 1)), $mul.ref(128, 1));
  assume {:sourceloc "../../stub_model/source/simple_tcp_ipv4.c", 58, 35} true;
  assume {:verifier.code 0} true;
  $M.30 := $store.i32($M.30, $p53, 60000);
  assume {:sourceloc "../../stub_model/source/simple_tcp_ipv4.c", 59, 2} true;
  assume {:verifier.code 0} true;
  $p54 := $load.ref($M.71, $p2);
  assume {:sourceloc "../../stub_model/source/simple_tcp_ipv4.c", 59, 7} true;
  assume {:verifier.code 0} true;
  $p55 := $add.ref($add.ref($p54, $mul.ref(0, 160)), $mul.ref(0, 1));
  $p56 := $add.ref($add.ref($add.ref($p54, $mul.ref(0, 160)), $mul.ref(0, 1)), $mul.ref(132, 1));
  assume {:sourceloc "../../stub_model/source/simple_tcp_ipv4.c", 59, 37} true;
  assume {:verifier.code 0} true;
  $M.30 := $store.i32($M.30, $p56, $sub.i32(0, 1));
  assume {:sourceloc "../../stub_model/source/simple_tcp_ipv4.c", 60, 2} true;
  assume {:verifier.code 0} true;
  $p57 := $load.ref($M.71, $p2);
  assume {:sourceloc "../../stub_model/source/simple_tcp_ipv4.c", 60, 7} true;
  assume {:verifier.code 0} true;
  $p58 := $add.ref($add.ref($p57, $mul.ref(0, 160)), $mul.ref(0, 1));
  $p59 := $add.ref($add.ref($add.ref($p57, $mul.ref(0, 160)), $mul.ref(0, 1)), $mul.ref(136, 1));
  assume {:sourceloc "../../stub_model/source/simple_tcp_ipv4.c", 60, 32} true;
  assume {:verifier.code 0} true;
  $M.30 := $store.i32($M.30, $p59, 0);
  assume {:sourceloc "../../stub_model/source/simple_tcp_ipv4.c", 68, 2} true;
  assume {:verifier.code 0} true;
  $M.72 := $store.i32($M.72, $p1, 0);
  assume {:sourceloc "../../stub_model/source/simple_tcp_ipv4.c", 68, 2} true;
  assume {:verifier.code 0} true;
  goto $bb1;
$bb1:
  assume {:sourceloc "../../stub_model/source/simple_tcp_ipv4.c", 73, 1} true;
  assume {:verifier.code 0} true;
  $i62 := $load.i32($M.72, $p1);
  assume {:sourceloc "../../stub_model/source/simple_tcp_ipv4.c", 73, 1} true;
  assume {:verifier.code 0} true;
  $r := $i62;
  $exn := false;
  return;
$bb2:
  assume {:sourceloc "../../stub_model/source/simple_tcp_ipv4.c", 70, 14} true;
  assume {:verifier.code 0} true;
  $p60 := $load.ref($M.71, $p2);
  assume {:sourceloc "../../stub_model/source/simple_tcp_ipv4.c", 70, 2} true;
  assume {:verifier.code 0} true;
  call tcp_sk_exit($p60);
  assume {:sourceloc "../../stub_model/source/simple_tcp_ipv4.c", 72, 9} true;
  assume {:verifier.code 0} true;
  $i61 := $load.i32($M.73, $p3);
  assume {:sourceloc "../../stub_model/source/simple_tcp_ipv4.c", 72, 2} true;
  assume {:verifier.code 0} true;
  $M.72 := $store.i32($M.72, $p1, $i61);
  assume {:sourceloc "../../stub_model/source/simple_tcp_ipv4.c", 72, 2} true;
  assume {:verifier.code 0} true;
  goto $bb1;
}
const tcp_ca_event: ref;
axiom (tcp_ca_event == $sub.ref(0, 80013));
procedure  tcp_ca_event($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
$bb0:
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 436, 53} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  call $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  $M.74 := $store.ref($M.74, $p2, $p0);
  assume true;
  assume {:verifier.code 0} true;
  $M.75 := $store.i32($M.75, $p3, $i1);
  assume true;
  assume true;
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 436, 53} true;
  assume {:verifier.code 0} true;
  $p5 := $load.ref($M.74, $p2);
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 436, 44} true;
  assume {:verifier.code 0} true;
  call $p6 := inet_csk($p5);
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 436, 37} true;
  assume {:verifier.code 0} true;
  $M.76 := $store.ref($M.76, $p4, $p6);
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 438, 6} true;
  assume {:verifier.code 0} true;
  $p7 := $load.ref($M.76, $p4);
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 438, 12} true;
  assume {:verifier.code 0} true;
  $p8 := $add.ref($add.ref($p7, $mul.ref(0, 200)), $mul.ref(40, 1));
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 438, 12} true;
  assume {:verifier.code 0} true;
  $p9 := $load.ref($M.1, $p8);
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 438, 25} true;
  assume {:verifier.code 0} true;
  $p10 := $add.ref($add.ref($p9, $mul.ref(0, 136)), $mul.ref(48, 1));
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 438, 25} true;
  assume {:verifier.code 0} true;
  $p11 := $load.ref($M.30, $p10);
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 438, 6} true;
  assume {:verifier.code 0} true;
  $i12 := $ne.ref($p11, $0.ref);
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 438, 6} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i12} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i12 == 1);
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 439, 3} true;
  assume {:verifier.code 0} true;
  $p13 := $load.ref($M.76, $p4);
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 439, 9} true;
  assume {:verifier.code 0} true;
  $p14 := $add.ref($add.ref($p13, $mul.ref(0, 200)), $mul.ref(40, 1));
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 439, 9} true;
  assume {:verifier.code 0} true;
  $p15 := $load.ref($M.1, $p14);
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 439, 22} true;
  assume {:verifier.code 0} true;
  $p16 := $add.ref($add.ref($p15, $mul.ref(0, 136)), $mul.ref(48, 1));
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 439, 22} true;
  assume {:verifier.code 0} true;
  $p17 := $load.ref($M.30, $p16);
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 439, 33} true;
  assume {:verifier.code 0} true;
  $p18 := $load.ref($M.74, $p2);
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 439, 37} true;
  assume {:verifier.code 0} true;
  $i19 := $load.i32($M.75, $p3);
  call devirtbounce.4($p17, $p18, $i19);
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 439, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb2:
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 438, 6} true;
  assume {:verifier.code 0} true;
  assume !(($i12 == 1));
  goto $bb3;
$bb3:
  assume {:sourceloc "../../stub_model/header/simple_tcp.h", 440, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const tcp_cong_avoid: ref;
axiom (tcp_cong_avoid == $sub.ref(0, 81045));
procedure  tcp_cong_avoid($p0: ref, $i1: i32, $i2: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $i17: i64;
  var $i18: i32;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
$bb0:
  assume {:sourceloc "../../stub_model/source/simple_tcp_input.c", 1023, 53} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  call $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p5 := $alloc($mul.ref(4, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  call $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  $M.77 := $store.ref($M.77, $p3, $p0);
  assume true;
  assume {:verifier.code 0} true;
  $M.78 := $store.i32($M.78, $p4, $i1);
  assume true;
  assume {:verifier.code 0} true;
  $M.79 := $store.i32($M.79, $p5, $i2);
  assume true;
  assume true;
  assume {:sourceloc "../../stub_model/source/simple_tcp_input.c", 1023, 53} true;
  assume {:verifier.code 0} true;
  $p7 := $load.ref($M.77, $p3);
  assume {:sourceloc "../../stub_model/source/simple_tcp_input.c", 1023, 44} true;
  assume {:verifier.code 0} true;
  call $p8 := inet_csk($p7);
  assume {:sourceloc "../../stub_model/source/simple_tcp_input.c", 1023, 37} true;
  assume {:verifier.code 0} true;
  $M.80 := $store.ref($M.80, $p6, $p8);
  assume {:sourceloc "../../stub_model/source/simple_tcp_input.c", 1025, 2} true;
  assume {:verifier.code 0} true;
  $p9 := $load.ref($M.80, $p6);
  assume {:sourceloc "../../stub_model/source/simple_tcp_input.c", 1025, 8} true;
  assume {:verifier.code 0} true;
  $p10 := $add.ref($add.ref($p9, $mul.ref(0, 200)), $mul.ref(40, 1));
  assume {:sourceloc "../../stub_model/source/simple_tcp_input.c", 1025, 8} true;
  assume {:verifier.code 0} true;
  $p11 := $load.ref($M.1, $p10);
  assume {:sourceloc "../../stub_model/source/simple_tcp_input.c", 1025, 21} true;
  assume {:verifier.code 0} true;
  $p12 := $add.ref($add.ref($p11, $mul.ref(0, 136)), $mul.ref(32, 1));
  assume {:sourceloc "../../stub_model/source/simple_tcp_input.c", 1025, 21} true;
  assume {:verifier.code 0} true;
  $p13 := $load.ref($M.30, $p12);
  assume {:sourceloc "../../stub_model/source/simple_tcp_input.c", 1025, 32} true;
  assume {:verifier.code 0} true;
  $p14 := $load.ref($M.77, $p3);
  assume {:sourceloc "../../stub_model/source/simple_tcp_input.c", 1025, 36} true;
  assume {:verifier.code 0} true;
  $i15 := $load.i32($M.78, $p4);
  assume {:sourceloc "../../stub_model/source/simple_tcp_input.c", 1025, 41} true;
  assume {:verifier.code 0} true;
  $i16 := $load.i32($M.79, $p5);
  call devirtbounce.5($p13, $p14, $i15, $i16);
  assume {:sourceloc "../../stub_model/source/simple_tcp_input.c", 1026, 31} true;
  assume {:verifier.code 0} true;
  $i17 := $M.62;
  assume {:sourceloc "../../stub_model/source/simple_tcp_input.c", 1026, 31} true;
  assume {:verifier.code 0} true;
  $i18 := $trunc.i64.i32($i17);
  assume {:sourceloc "../../stub_model/source/simple_tcp_input.c", 1026, 9} true;
  assume {:verifier.code 0} true;
  $p19 := $load.ref($M.77, $p3);
  assume {:sourceloc "../../stub_model/source/simple_tcp_input.c", 1026, 2} true;
  assume {:verifier.code 0} true;
  call $p20 := tcp_sk($p19);
  assume {:sourceloc "../../stub_model/source/simple_tcp_input.c", 1026, 14} true;
  assume {:verifier.code 0} true;
  $p21 := $add.ref($add.ref($p20, $mul.ref(0, 784)), $mul.ref(468, 1));
  assume {:sourceloc "../../stub_model/source/simple_tcp_input.c", 1026, 29} true;
  assume {:verifier.code 0} true;
  $M.1 := $store.i32($M.1, $p21, $i18);
  assume {:sourceloc "../../stub_model/source/simple_tcp_input.c", 1027, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const tcp_sk_exit: ref;
axiom (tcp_sk_exit == $sub.ref(0, 82077));
procedure  tcp_sk_exit($p0: ref)
{
  var $p1: ref;
$bb0:
  assume {:sourceloc "../../stub_model/source/simple_tcp_ipv4.c", 18, 2} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  call $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  $M.81 := $store.ref($M.81, $p1, $p0);
  assume true;
  assume {:sourceloc "../../stub_model/source/simple_tcp_ipv4.c", 18, 2} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __VERIFIER_assume: ref;
axiom (__VERIFIER_assume == $sub.ref(0, 83109));
procedure  __VERIFIER_assume($i0: i32)
{
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 258, 29} true;
  assume {:verifier.code 1} true;
  call {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 258, 29} true;
  assume {:verifier.code 1} true;
  assume true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 38, 3} true;
  assume {:verifier.code 1} true;
  assume $i0 != $0;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 39, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __SMACK_code: ref;
axiom (__SMACK_code == $sub.ref(0, 84141));
procedure  __SMACK_code.ref($p0: ref);
procedure  __SMACK_code.ref.i32($p0: ref, p.1: i32);
const __SMACK_dummy: ref;
axiom (__SMACK_dummy == $sub.ref(0, 85173));
procedure  __SMACK_dummy($i0: i32)
{
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 258, 29} true;
  assume {:verifier.code 1} true;
  call {:cexpr "__SMACK_dummy:arg:v"} boogie_si_record_i32($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 258, 29} true;
  assume {:verifier.code 1} true;
  assume true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 258, 59} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __VERIFIER_assert: ref;
axiom (__VERIFIER_assert == $sub.ref(0, 86205));
procedure  __VERIFIER_assert($i0: i32)
{
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 258, 29} true;
  assume {:verifier.code 1} true;
  call {:cexpr "__VERIFIER_assert:arg:x"} boogie_si_record_i32($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 258, 29} true;
  assume {:verifier.code 1} true;
  assume true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 45, 3} true;
  assume {:verifier.code 1} true;
  assert $i0 != $0;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 47, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __SMACK_check_overflow: ref;
axiom (__SMACK_check_overflow == $sub.ref(0, 87237));
procedure  __SMACK_check_overflow($i0: i32)
{
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 258, 29} true;
  assume {:verifier.code 1} true;
  call {:cexpr "__SMACK_check_overflow:arg:flag"} boogie_si_record_i32($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 258, 29} true;
  assume {:verifier.code 1} true;
  assume true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 63, 3} true;
  assume {:verifier.code 1} true;
  assert {:overflow} $i0 == $0;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 64, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __SMACK_nondet_char: ref;
axiom (__SMACK_nondet_char == $sub.ref(0, 88269));
procedure  __SMACK_nondet_char()
  returns ($r: i8);
const __SMACK_nondet_signed_char: ref;
axiom (__SMACK_nondet_signed_char == $sub.ref(0, 89301));
procedure  __SMACK_nondet_signed_char()
  returns ($r: i8);
const __SMACK_nondet_unsigned_char: ref;
axiom (__SMACK_nondet_unsigned_char == $sub.ref(0, 90333));
procedure  __SMACK_nondet_unsigned_char()
  returns ($r: i8);
const __SMACK_nondet_short: ref;
axiom (__SMACK_nondet_short == $sub.ref(0, 91365));
procedure  __SMACK_nondet_short()
  returns ($r: i16);
const __SMACK_nondet_signed_short: ref;
axiom (__SMACK_nondet_signed_short == $sub.ref(0, 92397));
procedure  __SMACK_nondet_signed_short()
  returns ($r: i16);
const __SMACK_nondet_signed_short_int: ref;
axiom (__SMACK_nondet_signed_short_int == $sub.ref(0, 93429));
procedure  __SMACK_nondet_signed_short_int()
  returns ($r: i16);
const __SMACK_nondet_unsigned_short: ref;
axiom (__SMACK_nondet_unsigned_short == $sub.ref(0, 94461));
procedure  __SMACK_nondet_unsigned_short()
  returns ($r: i16);
const __SMACK_nondet_unsigned_short_int: ref;
axiom (__SMACK_nondet_unsigned_short_int == $sub.ref(0, 95493));
procedure  __SMACK_nondet_unsigned_short_int()
  returns ($r: i16);
const __SMACK_nondet_int: ref;
axiom (__SMACK_nondet_int == $sub.ref(0, 96525));
procedure  __SMACK_nondet_int()
  returns ($r: i32);
const __SMACK_nondet_signed_int: ref;
axiom (__SMACK_nondet_signed_int == $sub.ref(0, 97557));
procedure  __SMACK_nondet_signed_int()
  returns ($r: i32);
const __SMACK_nondet_unsigned: ref;
axiom (__SMACK_nondet_unsigned == $sub.ref(0, 98589));
procedure  __SMACK_nondet_unsigned()
  returns ($r: i32);
const __VERIFIER_nondet_unsigned_int: ref;
axiom (__VERIFIER_nondet_unsigned_int == $sub.ref(0, 99621));
procedure  __VERIFIER_nondet_unsigned_int()
  returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 136, 20} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 136, 20} true;
  assume {:verifier.code 1} true;
  call $i0 := __SMACK_nondet_unsigned_int();
  call {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i0);
  call {:cexpr "x"} boogie_si_record_i32($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 137, 22} true;
  assume {:verifier.code 1} true;
  call $i1 := __SMACK_nondet_unsigned_int();
  call {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i1);
  call {:cexpr "min"} boogie_si_record_i32($i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 138, 22} true;
  assume {:verifier.code 1} true;
  call $i2 := __SMACK_nondet_unsigned_int();
  call {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i2);
  call {:cexpr "max"} boogie_si_record_i32($i2);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 139, 25} true;
  assume {:verifier.code 0} true;
  $i3 := $eq.i32($i1, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 139, 30} true;
  assume {:verifier.code 0} true;
  $i4 := 0;
  assume {:branchcond $i3} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i3 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 139, 37} true;
  assume {:verifier.code 0} true;
  $i5 := $uge.i32($i2, 4294967295);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 139, 49} true;
  assume {:verifier.code 0} true;
  $i4 := 0;
  assume {:branchcond $i5} true;
  goto $bb4, $bb5;
$bb2:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 139, 30} true;
  assume {:verifier.code 0} true;
  assume !(($i3 == 1));
  goto $bb3;
$bb3:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 139, 49} true;
  assume {:verifier.code 1} true;
  $i7 := $zext.i1.i32($i4);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 139, 3} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_assume($i7);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 140, 23} true;
  assume {:verifier.code 0} true;
  $i8 := $uge.i32($i0, $i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 140, 30} true;
  assume {:verifier.code 0} true;
  $i9 := 0;
  assume {:branchcond $i8} true;
  goto $bb6, $bb7;
$bb4:
  assume ($i5 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 139, 56} true;
  assume {:verifier.code 1} true;
  $i6 := $ule.i32($i2, 4294967295);
  assume {:verifier.code 0} true;
  $i4 := $i6;
  goto $bb3;
$bb5:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 139, 49} true;
  assume {:verifier.code 0} true;
  assume !(($i5 == 1));
  goto $bb3;
$bb6:
  assume ($i8 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 140, 35} true;
  assume {:verifier.code 1} true;
  $i10 := $ule.i32($i0, $i2);
  assume {:verifier.code 0} true;
  $i9 := $i10;
  goto $bb8;
$bb7:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 140, 30} true;
  assume {:verifier.code 0} true;
  assume !(($i8 == 1));
  goto $bb8;
$bb8:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 140, 30} true;
  assume {:verifier.code 1} true;
  $i11 := $zext.i1.i32($i9);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 140, 3} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_assume($i11);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 141, 3} true;
  assume {:verifier.code 0} true;
  $r := $i0;
  $exn := false;
  return;
}
const __SMACK_nondet_unsigned_int: ref;
axiom (__SMACK_nondet_unsigned_int == $sub.ref(0, 100653));
procedure  __SMACK_nondet_unsigned_int()
  returns ($r: i32);
const __SMACK_nondet_long: ref;
axiom (__SMACK_nondet_long == $sub.ref(0, 101685));
procedure  __SMACK_nondet_long()
  returns ($r: i64);
const __SMACK_nondet_long_int: ref;
axiom (__SMACK_nondet_long_int == $sub.ref(0, 102717));
procedure  __SMACK_nondet_long_int()
  returns ($r: i64);
const __SMACK_nondet_signed_long: ref;
axiom (__SMACK_nondet_signed_long == $sub.ref(0, 103749));
procedure  __SMACK_nondet_signed_long()
  returns ($r: i64);
const __SMACK_nondet_signed_long_int: ref;
axiom (__SMACK_nondet_signed_long_int == $sub.ref(0, 104781));
procedure  __SMACK_nondet_signed_long_int()
  returns ($r: i64);
const __SMACK_nondet_unsigned_long: ref;
axiom (__SMACK_nondet_unsigned_long == $sub.ref(0, 105813));
procedure  __SMACK_nondet_unsigned_long()
  returns ($r: i64);
const __SMACK_nondet_unsigned_long_int: ref;
axiom (__SMACK_nondet_unsigned_long_int == $sub.ref(0, 106845));
procedure  __SMACK_nondet_unsigned_long_int()
  returns ($r: i64);
const __SMACK_nondet_long_long: ref;
axiom (__SMACK_nondet_long_long == $sub.ref(0, 107877));
procedure  __SMACK_nondet_long_long()
  returns ($r: i64);
const __SMACK_nondet_long_long_int: ref;
axiom (__SMACK_nondet_long_long_int == $sub.ref(0, 108909));
procedure  __SMACK_nondet_long_long_int()
  returns ($r: i64);
const __SMACK_nondet_signed_long_long: ref;
axiom (__SMACK_nondet_signed_long_long == $sub.ref(0, 109941));
procedure  __SMACK_nondet_signed_long_long()
  returns ($r: i64);
const __SMACK_nondet_signed_long_long_int: ref;
axiom (__SMACK_nondet_signed_long_long_int == $sub.ref(0, 110973));
procedure  __SMACK_nondet_signed_long_long_int()
  returns ($r: i64);
const __SMACK_nondet_unsigned_long_long: ref;
axiom (__SMACK_nondet_unsigned_long_long == $sub.ref(0, 112005));
procedure  __SMACK_nondet_unsigned_long_long()
  returns ($r: i64);
const __SMACK_nondet_unsigned_long_long_int: ref;
axiom (__SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 113037));
procedure  __SMACK_nondet_unsigned_long_long_int()
  returns ($r: i64);
const __VERIFIER_nondet_uint: ref;
axiom (__VERIFIER_nondet_uint == $sub.ref(0, 114069));
procedure  __VERIFIER_nondet_uint()
  returns ($r: i32)
{
  var $i0: i32;
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 247, 20} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 247, 20} true;
  assume {:verifier.code 1} true;
  call $i0 := __VERIFIER_nondet_unsigned_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_int"} boogie_si_record_i32($i0);
  call {:cexpr "x"} boogie_si_record_i32($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 248, 3} true;
  assume {:verifier.code 0} true;
  $r := $i0;
  $exn := false;
  return;
}
const __SMACK_decls: ref;
axiom (__SMACK_decls == $sub.ref(0, 115101));
type $mop;
procedure  boogie_si_record_mop(m: $mop);
const $MOP: $mop;
var $exn: bool;
var $exnv: int;
procedure  $alloc(n: ref) returns (p: ref)
{
  call p := $$alloc(n);
}

procedure  $malloc(n: ref) returns (p: ref)
{
  call p := $$alloc(n);
}

var $CurrAddr:ref;

procedure {:inline 1} $$alloc(n: ref) returns (p: ref)
modifies $CurrAddr;
{
  assume $sge.ref.bool(n, $0.ref);
  if ($sgt.ref.bool(n, $0.ref)) {
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
  } else {
    p := $0.ref;
  }
}

procedure  $free(p: ref);

const __SMACK_top_decl: ref;
axiom (__SMACK_top_decl == $sub.ref(0, 116133));
procedure  __SMACK_top_decl.ref($p0: ref);
const __SMACK_init_func_memory_model: ref;
axiom (__SMACK_init_func_memory_model == $sub.ref(0, 117165));
procedure  __SMACK_init_func_memory_model()
{
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 521, 3} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 521, 3} true;
  assume {:verifier.code 1} true;
  $CurrAddr := $1024.ref;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 526, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const llvm.dbg.value: ref;
axiom (llvm.dbg.value == $sub.ref(0, 118197));
procedure  llvm.dbg.value($p0: ref, $p1: ref, $p2: ref);
const __SMACK_static_init: ref;
axiom (__SMACK_static_init == $sub.ref(0, 119229));
procedure  __SMACK_static_init()
{
$bb0:
  $M.62 := 100;
  call {:cexpr "jiffies"} boogie_si_record_i64(100);
  $M.30 := $store.i32($M.30, tcp_reno, 0);
  $M.30 := $store.i32($M.30, $add.ref($add.ref(tcp_reno, $mul.ref(0, 136)), $mul.ref(4, 1)), 1);
  $M.30 := $store.ref($M.30, $add.ref($add.ref(tcp_reno, $mul.ref(0, 136)), $mul.ref(8, 1)), $0.ref);
  $M.30 := $store.ref($M.30, $add.ref($add.ref(tcp_reno, $mul.ref(0, 136)), $mul.ref(16, 1)), $0.ref);
  $M.30 := $store.ref($M.30, $add.ref($add.ref(tcp_reno, $mul.ref(0, 136)), $mul.ref(24, 1)), tcp_reno_ssthresh);
  $M.30 := $store.ref($M.30, $add.ref($add.ref(tcp_reno, $mul.ref(0, 136)), $mul.ref(32, 1)), tcp_reno_cong_avoid);
  $M.30 := $store.ref($M.30, $add.ref($add.ref(tcp_reno, $mul.ref(0, 136)), $mul.ref(40, 1)), $0.ref);
  $M.30 := $store.ref($M.30, $add.ref($add.ref(tcp_reno, $mul.ref(0, 136)), $mul.ref(48, 1)), $0.ref);
  $M.30 := $store.ref($M.30, $add.ref($add.ref(tcp_reno, $mul.ref(0, 136)), $mul.ref(56, 1)), $0.ref);
  $M.30 := $store.ref($M.30, $add.ref($add.ref(tcp_reno, $mul.ref(0, 136)), $mul.ref(64, 1)), tcp_reno_undo_cwnd);
  $M.30 := $store.ref($M.30, $add.ref($add.ref(tcp_reno, $mul.ref(0, 136)), $mul.ref(72, 1)), $0.ref);
  $M.30 := $store.ref($M.30, $add.ref($add.ref(tcp_reno, $mul.ref(0, 136)), $mul.ref(80, 1)), $0.ref);
  $M.30 := $store.ref($M.30, $add.ref($add.ref(tcp_reno, $mul.ref(0, 136)), $mul.ref(88, 1)), $0.ref);
  $M.30 := $store.ref($M.30, $add.ref($add.ref(tcp_reno, $mul.ref(0, 136)), $mul.ref(96, 1)), $0.ref);
  $M.30 := $store.ref($M.30, $add.ref($add.ref(tcp_reno, $mul.ref(0, 136)), $mul.ref(104, 1)), $0.ref);
  $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref(tcp_reno, $mul.ref(0, 136)), $mul.ref(112, 1)), $mul.ref(0, 1)), 114);
  $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref(tcp_reno, $mul.ref(0, 136)), $mul.ref(112, 1)), $mul.ref(1, 1)), 101);
  $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref(tcp_reno, $mul.ref(0, 136)), $mul.ref(112, 1)), $mul.ref(2, 1)), 110);
  $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref(tcp_reno, $mul.ref(0, 136)), $mul.ref(112, 1)), $mul.ref(3, 1)), 111);
  $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref(tcp_reno, $mul.ref(0, 136)), $mul.ref(112, 1)), $mul.ref(4, 1)), 0);
  $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref(tcp_reno, $mul.ref(0, 136)), $mul.ref(112, 1)), $mul.ref(5, 1)), 0);
  $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref(tcp_reno, $mul.ref(0, 136)), $mul.ref(112, 1)), $mul.ref(6, 1)), 0);
  $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref(tcp_reno, $mul.ref(0, 136)), $mul.ref(112, 1)), $mul.ref(7, 1)), 0);
  $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref(tcp_reno, $mul.ref(0, 136)), $mul.ref(112, 1)), $mul.ref(8, 1)), 0);
  $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref(tcp_reno, $mul.ref(0, 136)), $mul.ref(112, 1)), $mul.ref(9, 1)), 0);
  $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref(tcp_reno, $mul.ref(0, 136)), $mul.ref(112, 1)), $mul.ref(10, 1)), 0);
  $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref(tcp_reno, $mul.ref(0, 136)), $mul.ref(112, 1)), $mul.ref(11, 1)), 0);
  $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref(tcp_reno, $mul.ref(0, 136)), $mul.ref(112, 1)), $mul.ref(12, 1)), 0);
  $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref(tcp_reno, $mul.ref(0, 136)), $mul.ref(112, 1)), $mul.ref(13, 1)), 0);
  $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref(tcp_reno, $mul.ref(0, 136)), $mul.ref(112, 1)), $mul.ref(14, 1)), 0);
  $M.30 := $store.i8($M.30, $add.ref($add.ref($add.ref(tcp_reno, $mul.ref(0, 136)), $mul.ref(112, 1)), $mul.ref(15, 1)), 0);
  $M.30 := $store.ref($M.30, $add.ref($add.ref(tcp_reno, $mul.ref(0, 136)), $mul.ref(128, 1)), $0.ref);
  $M.82 := $store.i8($M.82, .str.2, 91);
  $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.2, $mul.ref(0, 83)), $mul.ref(1, 1)), 70);
  $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.2, $mul.ref(0, 83)), $mul.ref(2, 1)), 117);
  $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.2, $mul.ref(0, 83)), $mul.ref(3, 1)), 110);
  $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.2, $mul.ref(0, 83)), $mul.ref(4, 1)), 99);
  $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.2, $mul.ref(0, 83)), $mul.ref(5, 1)), 58);
  $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.2, $mul.ref(0, 83)), $mul.ref(6, 1)), 32);
  $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.2, $mul.ref(0, 83)), $mul.ref(7, 1)), 116);
  $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.2, $mul.ref(0, 83)), $mul.ref(8, 1)), 99);
  $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.2, $mul.ref(0, 83)), $mul.ref(9, 1)), 112);
  $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.2, $mul.ref(0, 83)), $mul.ref(10, 1)), 95);
  $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.2, $mul.ref(0, 83)), $mul.ref(11, 1)), 114);
  $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.2, $mul.ref(0, 83)), $mul.ref(12, 1)), 101);
  $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.2, $mul.ref(0, 83)), $mul.ref(13, 1)), 110);
  $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.2, $mul.ref(0, 83)), $mul.ref(14, 1)), 111);
  $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.2, $mul.ref(0, 83)), $mul.ref(15, 1)), 95);
  $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.2, $mul.ref(0, 83)), $mul.ref(16, 1)), 99);
  $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.2, $mul.ref(0, 83)), $mul.ref(17, 1)), 111);
  $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.2, $mul.ref(0, 83)), $mul.ref(18, 1)), 110);
  $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.2, $mul.ref(0, 83)), $mul.ref(19, 1)), 103);
  $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.2, $mul.ref(0, 83)), $mul.ref(20, 1)), 95);
  $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.2, $mul.ref(0, 83)), $mul.ref(21, 1)), 97);
  $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.2, $mul.ref(0, 83)), $mul.ref(22, 1)), 118);
  $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.2, $mul.ref(0, 83)), $mul.ref(23, 1)), 111);
  $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.2, $mul.ref(0, 83)), $mul.ref(24, 1)), 105);
  $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.2, $mul.ref(0, 83)), $mul.ref(25, 1)), 100);
  $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.2, $mul.ref(0, 83)), $mul.ref(26, 1)), 93);
  $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.2, $mul.ref(0, 83)), $mul.ref(27, 1)), 32);
  $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.2, $mul.ref(0, 83)), $mul.ref(28, 1)), 97);
  $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.2, $mul.ref(0, 83)), $mul.ref(29, 1)), 99);
  $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.2, $mul.ref(0, 83)), $mul.ref(30, 1)), 107);
  $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.2, $mul.ref(0, 83)), $mul.ref(31, 1)), 58);
  $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.2, $mul.ref(0, 83)), $mul.ref(32, 1)), 37);
  $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.2, $mul.ref(0, 83)), $mul.ref(33, 1)), 117);
  $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.2, $mul.ref(0, 83)), $mul.ref(34, 1)), 44);
  $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.2, $mul.ref(0, 83)), $mul.ref(35, 1)), 32);
  $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.2, $mul.ref(0, 83)), $mul.ref(36, 1)), 97);
  $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.2, $mul.ref(0, 83)), $mul.ref(37, 1)), 99);
  $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.2, $mul.ref(0, 83)), $mul.ref(38, 1)), 107);
  $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.2, $mul.ref(0, 83)), $mul.ref(39, 1)), 101);
  $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.2, $mul.ref(0, 83)), $mul.ref(40, 1)), 100);
  $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.2, $mul.ref(0, 83)), $mul.ref(41, 1)), 58);
  $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.2, $mul.ref(0, 83)), $mul.ref(42, 1)), 37);
  $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.2, $mul.ref(0, 83)), $mul.ref(43, 1)), 117);
  $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.2, $mul.ref(0, 83)), $mul.ref(44, 1)), 44);
  $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.2, $mul.ref(0, 83)), $mul.ref(45, 1)), 32);
  $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.2, $mul.ref(0, 83)), $mul.ref(46, 1)), 115);
  $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.2, $mul.ref(0, 83)), $mul.ref(47, 1)), 110);
  $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.2, $mul.ref(0, 83)), $mul.ref(48, 1)), 100);
  $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.2, $mul.ref(0, 83)), $mul.ref(49, 1)), 95);
  $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.2, $mul.ref(0, 83)), $mul.ref(50, 1)), 99);
  $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.2, $mul.ref(0, 83)), $mul.ref(51, 1)), 119);
  $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.2, $mul.ref(0, 83)), $mul.ref(52, 1)), 110);
  $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.2, $mul.ref(0, 83)), $mul.ref(53, 1)), 100);
  $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.2, $mul.ref(0, 83)), $mul.ref(54, 1)), 95);
  $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.2, $mul.ref(0, 83)), $mul.ref(55, 1)), 99);
  $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.2, $mul.ref(0, 83)), $mul.ref(56, 1)), 110);
  $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.2, $mul.ref(0, 83)), $mul.ref(57, 1)), 116);
  $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.2, $mul.ref(0, 83)), $mul.ref(58, 1)), 58);
  $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.2, $mul.ref(0, 83)), $mul.ref(59, 1)), 37);
  $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.2, $mul.ref(0, 83)), $mul.ref(60, 1)), 117);
  $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.2, $mul.ref(0, 83)), $mul.ref(61, 1)), 44);
  $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.2, $mul.ref(0, 83)), $mul.ref(62, 1)), 32);
  $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.2, $mul.ref(0, 83)), $mul.ref(63, 1)), 109);
  $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.2, $mul.ref(0, 83)), $mul.ref(64, 1)), 97);
  $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.2, $mul.ref(0, 83)), $mul.ref(65, 1)), 120);
  $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.2, $mul.ref(0, 83)), $mul.ref(66, 1)), 95);
  $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.2, $mul.ref(0, 83)), $mul.ref(67, 1)), 112);
  $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.2, $mul.ref(0, 83)), $mul.ref(68, 1)), 97);
  $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.2, $mul.ref(0, 83)), $mul.ref(69, 1)), 99);
  $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.2, $mul.ref(0, 83)), $mul.ref(70, 1)), 107);
  $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.2, $mul.ref(0, 83)), $mul.ref(71, 1)), 101);
  $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.2, $mul.ref(0, 83)), $mul.ref(72, 1)), 116);
  $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.2, $mul.ref(0, 83)), $mul.ref(73, 1)), 115);
  $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.2, $mul.ref(0, 83)), $mul.ref(74, 1)), 95);
  $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.2, $mul.ref(0, 83)), $mul.ref(75, 1)), 111);
  $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.2, $mul.ref(0, 83)), $mul.ref(76, 1)), 117);
  $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.2, $mul.ref(0, 83)), $mul.ref(77, 1)), 116);
  $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.2, $mul.ref(0, 83)), $mul.ref(78, 1)), 58);
  $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.2, $mul.ref(0, 83)), $mul.ref(79, 1)), 37);
  $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.2, $mul.ref(0, 83)), $mul.ref(80, 1)), 117);
  $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.2, $mul.ref(0, 83)), $mul.ref(81, 1)), 10);
  $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.2, $mul.ref(0, 83)), $mul.ref(82, 1)), 0);
  $M.83 := $store.i8($M.83, .str.3, 68);
  $M.83 := $store.i8($M.83, $add.ref($add.ref(.str.3, $mul.ref(0, 16)), $mul.ref(1, 1)), 97);
  $M.83 := $store.i8($M.83, $add.ref($add.ref(.str.3, $mul.ref(0, 16)), $mul.ref(2, 1)), 110);
  $M.83 := $store.i8($M.83, $add.ref($add.ref(.str.3, $mul.ref(0, 16)), $mul.ref(3, 1)), 103);
  $M.83 := $store.i8($M.83, $add.ref($add.ref(.str.3, $mul.ref(0, 16)), $mul.ref(4, 1)), 101);
  $M.83 := $store.i8($M.83, $add.ref($add.ref(.str.3, $mul.ref(0, 16)), $mul.ref(5, 1)), 114);
  $M.83 := $store.i8($M.83, $add.ref($add.ref(.str.3, $mul.ref(0, 16)), $mul.ref(6, 1)), 111);
  $M.83 := $store.i8($M.83, $add.ref($add.ref(.str.3, $mul.ref(0, 16)), $mul.ref(7, 1)), 117);
  $M.83 := $store.i8($M.83, $add.ref($add.ref(.str.3, $mul.ref(0, 16)), $mul.ref(8, 1)), 115);
  $M.83 := $store.i8($M.83, $add.ref($add.ref(.str.3, $mul.ref(0, 16)), $mul.ref(9, 1)), 32);
  $M.83 := $store.i8($M.83, $add.ref($add.ref(.str.3, $mul.ref(0, 16)), $mul.ref(10, 1)), 97);
  $M.83 := $store.i8($M.83, $add.ref($add.ref(.str.3, $mul.ref(0, 16)), $mul.ref(11, 1)), 114);
  $M.83 := $store.i8($M.83, $add.ref($add.ref(.str.3, $mul.ref(0, 16)), $mul.ref(12, 1)), 101);
  $M.83 := $store.i8($M.83, $add.ref($add.ref(.str.3, $mul.ref(0, 16)), $mul.ref(13, 1)), 97);
  $M.83 := $store.i8($M.83, $add.ref($add.ref(.str.3, $mul.ref(0, 16)), $mul.ref(14, 1)), 10);
  $M.83 := $store.i8($M.83, $add.ref($add.ref(.str.3, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
  $M.84 := $store.i8($M.84, .str.1, 91);
  $M.84 := $store.i8($M.84, $add.ref($add.ref(.str.1, $mul.ref(0, 59)), $mul.ref(1, 1)), 70);
  $M.84 := $store.i8($M.84, $add.ref($add.ref(.str.1, $mul.ref(0, 59)), $mul.ref(2, 1)), 117);
  $M.84 := $store.i8($M.84, $add.ref($add.ref(.str.1, $mul.ref(0, 59)), $mul.ref(3, 1)), 110);
  $M.84 := $store.i8($M.84, $add.ref($add.ref(.str.1, $mul.ref(0, 59)), $mul.ref(4, 1)), 99);
  $M.84 := $store.i8($M.84, $add.ref($add.ref(.str.1, $mul.ref(0, 59)), $mul.ref(5, 1)), 58);
  $M.84 := $store.i8($M.84, $add.ref($add.ref(.str.1, $mul.ref(0, 59)), $mul.ref(6, 1)), 32);
  $M.84 := $store.i8($M.84, $add.ref($add.ref(.str.1, $mul.ref(0, 59)), $mul.ref(7, 1)), 116);
  $M.84 := $store.i8($M.84, $add.ref($add.ref(.str.1, $mul.ref(0, 59)), $mul.ref(8, 1)), 99);
  $M.84 := $store.i8($M.84, $add.ref($add.ref(.str.1, $mul.ref(0, 59)), $mul.ref(9, 1)), 112);
  $M.84 := $store.i8($M.84, $add.ref($add.ref(.str.1, $mul.ref(0, 59)), $mul.ref(10, 1)), 95);
  $M.84 := $store.i8($M.84, $add.ref($add.ref(.str.1, $mul.ref(0, 59)), $mul.ref(11, 1)), 99);
  $M.84 := $store.i8($M.84, $add.ref($add.ref(.str.1, $mul.ref(0, 59)), $mul.ref(12, 1)), 111);
  $M.84 := $store.i8($M.84, $add.ref($add.ref(.str.1, $mul.ref(0, 59)), $mul.ref(13, 1)), 110);
  $M.84 := $store.i8($M.84, $add.ref($add.ref(.str.1, $mul.ref(0, 59)), $mul.ref(14, 1)), 103);
  $M.84 := $store.i8($M.84, $add.ref($add.ref(.str.1, $mul.ref(0, 59)), $mul.ref(15, 1)), 95);
  $M.84 := $store.i8($M.84, $add.ref($add.ref(.str.1, $mul.ref(0, 59)), $mul.ref(16, 1)), 97);
  $M.84 := $store.i8($M.84, $add.ref($add.ref(.str.1, $mul.ref(0, 59)), $mul.ref(17, 1)), 118);
  $M.84 := $store.i8($M.84, $add.ref($add.ref(.str.1, $mul.ref(0, 59)), $mul.ref(18, 1)), 111);
  $M.84 := $store.i8($M.84, $add.ref($add.ref(.str.1, $mul.ref(0, 59)), $mul.ref(19, 1)), 105);
  $M.84 := $store.i8($M.84, $add.ref($add.ref(.str.1, $mul.ref(0, 59)), $mul.ref(20, 1)), 100);
  $M.84 := $store.i8($M.84, $add.ref($add.ref(.str.1, $mul.ref(0, 59)), $mul.ref(21, 1)), 95);
  $M.84 := $store.i8($M.84, $add.ref($add.ref(.str.1, $mul.ref(0, 59)), $mul.ref(22, 1)), 97);
  $M.84 := $store.i8($M.84, $add.ref($add.ref(.str.1, $mul.ref(0, 59)), $mul.ref(23, 1)), 105);
  $M.84 := $store.i8($M.84, $add.ref($add.ref(.str.1, $mul.ref(0, 59)), $mul.ref(24, 1)), 93);
  $M.84 := $store.i8($M.84, $add.ref($add.ref(.str.1, $mul.ref(0, 59)), $mul.ref(25, 1)), 32);
  $M.84 := $store.i8($M.84, $add.ref($add.ref(.str.1, $mul.ref(0, 59)), $mul.ref(26, 1)), 119);
  $M.84 := $store.i8($M.84, $add.ref($add.ref(.str.1, $mul.ref(0, 59)), $mul.ref(27, 1)), 58);
  $M.84 := $store.i8($M.84, $add.ref($add.ref(.str.1, $mul.ref(0, 59)), $mul.ref(28, 1)), 37);
  $M.84 := $store.i8($M.84, $add.ref($add.ref(.str.1, $mul.ref(0, 59)), $mul.ref(29, 1)), 117);
  $M.84 := $store.i8($M.84, $add.ref($add.ref(.str.1, $mul.ref(0, 59)), $mul.ref(30, 1)), 44);
  $M.84 := $store.i8($M.84, $add.ref($add.ref(.str.1, $mul.ref(0, 59)), $mul.ref(31, 1)), 32);
  $M.84 := $store.i8($M.84, $add.ref($add.ref(.str.1, $mul.ref(0, 59)), $mul.ref(32, 1)), 97);
  $M.84 := $store.i8($M.84, $add.ref($add.ref(.str.1, $mul.ref(0, 59)), $mul.ref(33, 1)), 99);
  $M.84 := $store.i8($M.84, $add.ref($add.ref(.str.1, $mul.ref(0, 59)), $mul.ref(34, 1)), 107);
  $M.84 := $store.i8($M.84, $add.ref($add.ref(.str.1, $mul.ref(0, 59)), $mul.ref(35, 1)), 101);
  $M.84 := $store.i8($M.84, $add.ref($add.ref(.str.1, $mul.ref(0, 59)), $mul.ref(36, 1)), 100);
  $M.84 := $store.i8($M.84, $add.ref($add.ref(.str.1, $mul.ref(0, 59)), $mul.ref(37, 1)), 58);
  $M.84 := $store.i8($M.84, $add.ref($add.ref(.str.1, $mul.ref(0, 59)), $mul.ref(38, 1)), 37);
  $M.84 := $store.i8($M.84, $add.ref($add.ref(.str.1, $mul.ref(0, 59)), $mul.ref(39, 1)), 117);
  $M.84 := $store.i8($M.84, $add.ref($add.ref(.str.1, $mul.ref(0, 59)), $mul.ref(40, 1)), 44);
  $M.84 := $store.i8($M.84, $add.ref($add.ref(.str.1, $mul.ref(0, 59)), $mul.ref(41, 1)), 32);
  $M.84 := $store.i8($M.84, $add.ref($add.ref(.str.1, $mul.ref(0, 59)), $mul.ref(42, 1)), 115);
  $M.84 := $store.i8($M.84, $add.ref($add.ref(.str.1, $mul.ref(0, 59)), $mul.ref(43, 1)), 110);
  $M.84 := $store.i8($M.84, $add.ref($add.ref(.str.1, $mul.ref(0, 59)), $mul.ref(44, 1)), 100);
  $M.84 := $store.i8($M.84, $add.ref($add.ref(.str.1, $mul.ref(0, 59)), $mul.ref(45, 1)), 95);
  $M.84 := $store.i8($M.84, $add.ref($add.ref(.str.1, $mul.ref(0, 59)), $mul.ref(46, 1)), 99);
  $M.84 := $store.i8($M.84, $add.ref($add.ref(.str.1, $mul.ref(0, 59)), $mul.ref(47, 1)), 119);
  $M.84 := $store.i8($M.84, $add.ref($add.ref(.str.1, $mul.ref(0, 59)), $mul.ref(48, 1)), 110);
  $M.84 := $store.i8($M.84, $add.ref($add.ref(.str.1, $mul.ref(0, 59)), $mul.ref(49, 1)), 100);
  $M.84 := $store.i8($M.84, $add.ref($add.ref(.str.1, $mul.ref(0, 59)), $mul.ref(50, 1)), 95);
  $M.84 := $store.i8($M.84, $add.ref($add.ref(.str.1, $mul.ref(0, 59)), $mul.ref(51, 1)), 99);
  $M.84 := $store.i8($M.84, $add.ref($add.ref(.str.1, $mul.ref(0, 59)), $mul.ref(52, 1)), 110);
  $M.84 := $store.i8($M.84, $add.ref($add.ref(.str.1, $mul.ref(0, 59)), $mul.ref(53, 1)), 116);
  $M.84 := $store.i8($M.84, $add.ref($add.ref(.str.1, $mul.ref(0, 59)), $mul.ref(54, 1)), 58);
  $M.84 := $store.i8($M.84, $add.ref($add.ref(.str.1, $mul.ref(0, 59)), $mul.ref(55, 1)), 37);
  $M.84 := $store.i8($M.84, $add.ref($add.ref(.str.1, $mul.ref(0, 59)), $mul.ref(56, 1)), 117);
  $M.84 := $store.i8($M.84, $add.ref($add.ref(.str.1, $mul.ref(0, 59)), $mul.ref(57, 1)), 10);
  $M.84 := $store.i8($M.84, $add.ref($add.ref(.str.1, $mul.ref(0, 59)), $mul.ref(58, 1)), 0);
  $M.85 := $store.i8($M.85, .str, 91);
  $M.85 := $store.i8($M.85, $add.ref($add.ref(.str, $mul.ref(0, 74)), $mul.ref(1, 1)), 70);
  $M.85 := $store.i8($M.85, $add.ref($add.ref(.str, $mul.ref(0, 74)), $mul.ref(2, 1)), 117);
  $M.85 := $store.i8($M.85, $add.ref($add.ref(.str, $mul.ref(0, 74)), $mul.ref(3, 1)), 110);
  $M.85 := $store.i8($M.85, $add.ref($add.ref(.str, $mul.ref(0, 74)), $mul.ref(4, 1)), 99);
  $M.85 := $store.i8($M.85, $add.ref($add.ref(.str, $mul.ref(0, 74)), $mul.ref(5, 1)), 58);
  $M.85 := $store.i8($M.85, $add.ref($add.ref(.str, $mul.ref(0, 74)), $mul.ref(6, 1)), 32);
  $M.85 := $store.i8($M.85, $add.ref($add.ref(.str, $mul.ref(0, 74)), $mul.ref(7, 1)), 116);
  $M.85 := $store.i8($M.85, $add.ref($add.ref(.str, $mul.ref(0, 74)), $mul.ref(8, 1)), 99);
  $M.85 := $store.i8($M.85, $add.ref($add.ref(.str, $mul.ref(0, 74)), $mul.ref(9, 1)), 112);
  $M.85 := $store.i8($M.85, $add.ref($add.ref(.str, $mul.ref(0, 74)), $mul.ref(10, 1)), 95);
  $M.85 := $store.i8($M.85, $add.ref($add.ref(.str, $mul.ref(0, 74)), $mul.ref(11, 1)), 115);
  $M.85 := $store.i8($M.85, $add.ref($add.ref(.str, $mul.ref(0, 74)), $mul.ref(12, 1)), 108);
  $M.85 := $store.i8($M.85, $add.ref($add.ref(.str, $mul.ref(0, 74)), $mul.ref(13, 1)), 111);
  $M.85 := $store.i8($M.85, $add.ref($add.ref(.str, $mul.ref(0, 74)), $mul.ref(14, 1)), 119);
  $M.85 := $store.i8($M.85, $add.ref($add.ref(.str, $mul.ref(0, 74)), $mul.ref(15, 1)), 95);
  $M.85 := $store.i8($M.85, $add.ref($add.ref(.str, $mul.ref(0, 74)), $mul.ref(16, 1)), 115);
  $M.85 := $store.i8($M.85, $add.ref($add.ref(.str, $mul.ref(0, 74)), $mul.ref(17, 1)), 116);
  $M.85 := $store.i8($M.85, $add.ref($add.ref(.str, $mul.ref(0, 74)), $mul.ref(18, 1)), 97);
  $M.85 := $store.i8($M.85, $add.ref($add.ref(.str, $mul.ref(0, 74)), $mul.ref(19, 1)), 114);
  $M.85 := $store.i8($M.85, $add.ref($add.ref(.str, $mul.ref(0, 74)), $mul.ref(20, 1)), 116);
  $M.85 := $store.i8($M.85, $add.ref($add.ref(.str, $mul.ref(0, 74)), $mul.ref(21, 1)), 93);
  $M.85 := $store.i8($M.85, $add.ref($add.ref(.str, $mul.ref(0, 74)), $mul.ref(22, 1)), 32);
  $M.85 := $store.i8($M.85, $add.ref($add.ref(.str, $mul.ref(0, 74)), $mul.ref(23, 1)), 99);
  $M.85 := $store.i8($M.85, $add.ref($add.ref(.str, $mul.ref(0, 74)), $mul.ref(24, 1)), 119);
  $M.85 := $store.i8($M.85, $add.ref($add.ref(.str, $mul.ref(0, 74)), $mul.ref(25, 1)), 110);
  $M.85 := $store.i8($M.85, $add.ref($add.ref(.str, $mul.ref(0, 74)), $mul.ref(26, 1)), 100);
  $M.85 := $store.i8($M.85, $add.ref($add.ref(.str, $mul.ref(0, 74)), $mul.ref(27, 1)), 58);
  $M.85 := $store.i8($M.85, $add.ref($add.ref(.str, $mul.ref(0, 74)), $mul.ref(28, 1)), 37);
  $M.85 := $store.i8($M.85, $add.ref($add.ref(.str, $mul.ref(0, 74)), $mul.ref(29, 1)), 117);
  $M.85 := $store.i8($M.85, $add.ref($add.ref(.str, $mul.ref(0, 74)), $mul.ref(30, 1)), 44);
  $M.85 := $store.i8($M.85, $add.ref($add.ref(.str, $mul.ref(0, 74)), $mul.ref(31, 1)), 32);
  $M.85 := $store.i8($M.85, $add.ref($add.ref(.str, $mul.ref(0, 74)), $mul.ref(32, 1)), 97);
  $M.85 := $store.i8($M.85, $add.ref($add.ref(.str, $mul.ref(0, 74)), $mul.ref(33, 1)), 99);
  $M.85 := $store.i8($M.85, $add.ref($add.ref(.str, $mul.ref(0, 74)), $mul.ref(34, 1)), 107);
  $M.85 := $store.i8($M.85, $add.ref($add.ref(.str, $mul.ref(0, 74)), $mul.ref(35, 1)), 101);
  $M.85 := $store.i8($M.85, $add.ref($add.ref(.str, $mul.ref(0, 74)), $mul.ref(36, 1)), 100);
  $M.85 := $store.i8($M.85, $add.ref($add.ref(.str, $mul.ref(0, 74)), $mul.ref(37, 1)), 58);
  $M.85 := $store.i8($M.85, $add.ref($add.ref(.str, $mul.ref(0, 74)), $mul.ref(38, 1)), 37);
  $M.85 := $store.i8($M.85, $add.ref($add.ref(.str, $mul.ref(0, 74)), $mul.ref(39, 1)), 117);
  $M.85 := $store.i8($M.85, $add.ref($add.ref(.str, $mul.ref(0, 74)), $mul.ref(40, 1)), 44);
  $M.85 := $store.i8($M.85, $add.ref($add.ref(.str, $mul.ref(0, 74)), $mul.ref(41, 1)), 32);
  $M.85 := $store.i8($M.85, $add.ref($add.ref(.str, $mul.ref(0, 74)), $mul.ref(42, 1)), 115);
  $M.85 := $store.i8($M.85, $add.ref($add.ref(.str, $mul.ref(0, 74)), $mul.ref(43, 1)), 110);
  $M.85 := $store.i8($M.85, $add.ref($add.ref(.str, $mul.ref(0, 74)), $mul.ref(44, 1)), 100);
  $M.85 := $store.i8($M.85, $add.ref($add.ref(.str, $mul.ref(0, 74)), $mul.ref(45, 1)), 95);
  $M.85 := $store.i8($M.85, $add.ref($add.ref(.str, $mul.ref(0, 74)), $mul.ref(46, 1)), 99);
  $M.85 := $store.i8($M.85, $add.ref($add.ref(.str, $mul.ref(0, 74)), $mul.ref(47, 1)), 119);
  $M.85 := $store.i8($M.85, $add.ref($add.ref(.str, $mul.ref(0, 74)), $mul.ref(48, 1)), 110);
  $M.85 := $store.i8($M.85, $add.ref($add.ref(.str, $mul.ref(0, 74)), $mul.ref(49, 1)), 100);
  $M.85 := $store.i8($M.85, $add.ref($add.ref(.str, $mul.ref(0, 74)), $mul.ref(50, 1)), 58);
  $M.85 := $store.i8($M.85, $add.ref($add.ref(.str, $mul.ref(0, 74)), $mul.ref(51, 1)), 37);
  $M.85 := $store.i8($M.85, $add.ref($add.ref(.str, $mul.ref(0, 74)), $mul.ref(52, 1)), 117);
  $M.85 := $store.i8($M.85, $add.ref($add.ref(.str, $mul.ref(0, 74)), $mul.ref(53, 1)), 44);
  $M.85 := $store.i8($M.85, $add.ref($add.ref(.str, $mul.ref(0, 74)), $mul.ref(54, 1)), 32);
  $M.85 := $store.i8($M.85, $add.ref($add.ref(.str, $mul.ref(0, 74)), $mul.ref(55, 1)), 115);
  $M.85 := $store.i8($M.85, $add.ref($add.ref(.str, $mul.ref(0, 74)), $mul.ref(56, 1)), 110);
  $M.85 := $store.i8($M.85, $add.ref($add.ref(.str, $mul.ref(0, 74)), $mul.ref(57, 1)), 100);
  $M.85 := $store.i8($M.85, $add.ref($add.ref(.str, $mul.ref(0, 74)), $mul.ref(58, 1)), 95);
  $M.85 := $store.i8($M.85, $add.ref($add.ref(.str, $mul.ref(0, 74)), $mul.ref(59, 1)), 99);
  $M.85 := $store.i8($M.85, $add.ref($add.ref(.str, $mul.ref(0, 74)), $mul.ref(60, 1)), 119);
  $M.85 := $store.i8($M.85, $add.ref($add.ref(.str, $mul.ref(0, 74)), $mul.ref(61, 1)), 110);
  $M.85 := $store.i8($M.85, $add.ref($add.ref(.str, $mul.ref(0, 74)), $mul.ref(62, 1)), 100);
  $M.85 := $store.i8($M.85, $add.ref($add.ref(.str, $mul.ref(0, 74)), $mul.ref(63, 1)), 95);
  $M.85 := $store.i8($M.85, $add.ref($add.ref(.str, $mul.ref(0, 74)), $mul.ref(64, 1)), 99);
  $M.85 := $store.i8($M.85, $add.ref($add.ref(.str, $mul.ref(0, 74)), $mul.ref(65, 1)), 108);
  $M.85 := $store.i8($M.85, $add.ref($add.ref(.str, $mul.ref(0, 74)), $mul.ref(66, 1)), 97);
  $M.85 := $store.i8($M.85, $add.ref($add.ref(.str, $mul.ref(0, 74)), $mul.ref(67, 1)), 109);
  $M.85 := $store.i8($M.85, $add.ref($add.ref(.str, $mul.ref(0, 74)), $mul.ref(68, 1)), 112);
  $M.85 := $store.i8($M.85, $add.ref($add.ref(.str, $mul.ref(0, 74)), $mul.ref(69, 1)), 58);
  $M.85 := $store.i8($M.85, $add.ref($add.ref(.str, $mul.ref(0, 74)), $mul.ref(70, 1)), 37);
  $M.85 := $store.i8($M.85, $add.ref($add.ref(.str, $mul.ref(0, 74)), $mul.ref(71, 1)), 117);
  $M.85 := $store.i8($M.85, $add.ref($add.ref(.str, $mul.ref(0, 74)), $mul.ref(72, 1)), 10);
  $M.85 := $store.i8($M.85, $add.ref($add.ref(.str, $mul.ref(0, 74)), $mul.ref(73, 1)), 0);
  $M.43 := $store.i32($M.43, sysctl_tcp_wmem, 0);
  $M.43 := $store.i32($M.43, $add.ref($add.ref(sysctl_tcp_wmem, $mul.ref(0, 12)), $mul.ref(1, 4)), 0);
  $M.43 := $store.i32($M.43, $add.ref($add.ref(sysctl_tcp_wmem, $mul.ref(0, 12)), $mul.ref(2, 4)), 0);
  $M.44 := $store.i32($M.44, sysctl_tcp_rmem, 0);
  $M.44 := $store.i32($M.44, $add.ref($add.ref(sysctl_tcp_rmem, $mul.ref(0, 12)), $mul.ref(1, 4)), 0);
  $M.44 := $store.i32($M.44, $add.ref($add.ref(sysctl_tcp_rmem, $mul.ref(0, 12)), $mul.ref(2, 4)), 0);
  $M.86 := 1;
  call {:cexpr "sysctl_tcp_timestamps"} boogie_si_record_i32(1);
  $M.87 := 1;
  call {:cexpr "sysctl_tcp_window_scaling"} boogie_si_record_i32(1);
  $M.88 := 1;
  call {:cexpr "sysctl_tcp_sack"} boogie_si_record_i32(1);
  $M.89 := 300;
  call {:cexpr "sysctl_tcp_max_reordering"} boogie_si_record_i32(300);
  $M.90 := 1;
  call {:cexpr "sysctl_tcp_dsack"} boogie_si_record_i32(1);
  $M.91 := 31;
  call {:cexpr "sysctl_tcp_app_win"} boogie_si_record_i32(31);
  $M.92 := 1;
  call {:cexpr "sysctl_tcp_adv_win_scale"} boogie_si_record_i32(1);
  $M.93 := 1000;
  call {:cexpr "sysctl_tcp_challenge_ack_limit"} boogie_si_record_i32(1000);
  $M.94 := 8192;
  call {:cexpr "sysctl_tcp_max_orphans"} boogie_si_record_i32(8192);
  $M.95 := 2;
  call {:cexpr "sysctl_tcp_frto"} boogie_si_record_i32(2);
  $M.96 := 300;
  call {:cexpr "sysctl_tcp_min_rtt_wlen"} boogie_si_record_i32(300);
  $M.97 := 1;
  call {:cexpr "sysctl_tcp_moderate_rcvbuf"} boogie_si_record_i32(1);
  $M.98 := 3;
  call {:cexpr "sysctl_tcp_early_retrans"} boogie_si_record_i32(3);
  $M.99 := 500;
  call {:cexpr "sysctl_tcp_invalid_ratelimit"} boogie_si_record_i32(500);
  $M.100 := 200;
  call {:cexpr "sysctl_tcp_pacing_ss_ratio"} boogie_si_record_i32(200);
  $M.101 := 120;
  call {:cexpr "sysctl_tcp_pacing_ca_ratio"} boogie_si_record_i32(120);
  $M.102 := $store.i64($M.102, sysctl_tcp_mem, 0);
  $M.102 := $store.i64($M.102, $add.ref($add.ref(sysctl_tcp_mem, $mul.ref(0, 24)), $mul.ref(1, 8)), 0);
  $M.102 := $store.i64($M.102, $add.ref($add.ref(sysctl_tcp_mem, $mul.ref(0, 24)), $mul.ref(2, 8)), 0);
  $M.103 := 0;
  call {:cexpr "sysctl_tcp_fack"} boogie_si_record_i32(0);
  $M.104 := 0;
  call {:cexpr "sysctl_tcp_stdurg"} boogie_si_record_i32(0);
  $M.105 := 0;
  call {:cexpr "sysctl_tcp_rfc1337"} boogie_si_record_i32(0);
  $M.106 := $store.i8($M.106, .str.4, 102);
  $M.106 := $store.i8($M.106, $add.ref($add.ref(.str.4, $mul.ref(0, 50)), $mul.ref(1, 1)), 105);
  $M.106 := $store.i8($M.106, $add.ref($add.ref(.str.4, $mul.ref(0, 50)), $mul.ref(2, 1)), 108);
  $M.106 := $store.i8($M.106, $add.ref($add.ref(.str.4, $mul.ref(0, 50)), $mul.ref(3, 1)), 101);
  $M.106 := $store.i8($M.106, $add.ref($add.ref(.str.4, $mul.ref(0, 50)), $mul.ref(4, 1)), 58);
  $M.106 := $store.i8($M.106, $add.ref($add.ref(.str.4, $mul.ref(0, 50)), $mul.ref(5, 1)), 37);
  $M.106 := $store.i8($M.106, $add.ref($add.ref(.str.4, $mul.ref(0, 50)), $mul.ref(6, 1)), 115);
  $M.106 := $store.i8($M.106, $add.ref($add.ref(.str.4, $mul.ref(0, 50)), $mul.ref(7, 1)), 32);
  $M.106 := $store.i8($M.106, $add.ref($add.ref(.str.4, $mul.ref(0, 50)), $mul.ref(8, 1)), 58);
  $M.106 := $store.i8($M.106, $add.ref($add.ref(.str.4, $mul.ref(0, 50)), $mul.ref(9, 1)), 32);
  $M.106 := $store.i8($M.106, $add.ref($add.ref(.str.4, $mul.ref(0, 50)), $mul.ref(10, 1)), 102);
  $M.106 := $store.i8($M.106, $add.ref($add.ref(.str.4, $mul.ref(0, 50)), $mul.ref(11, 1)), 117);
  $M.106 := $store.i8($M.106, $add.ref($add.ref(.str.4, $mul.ref(0, 50)), $mul.ref(12, 1)), 110);
  $M.106 := $store.i8($M.106, $add.ref($add.ref(.str.4, $mul.ref(0, 50)), $mul.ref(13, 1)), 99);
  $M.106 := $store.i8($M.106, $add.ref($add.ref(.str.4, $mul.ref(0, 50)), $mul.ref(14, 1)), 58);
  $M.106 := $store.i8($M.106, $add.ref($add.ref(.str.4, $mul.ref(0, 50)), $mul.ref(15, 1)), 37);
  $M.106 := $store.i8($M.106, $add.ref($add.ref(.str.4, $mul.ref(0, 50)), $mul.ref(16, 1)), 115);
  $M.106 := $store.i8($M.106, $add.ref($add.ref(.str.4, $mul.ref(0, 50)), $mul.ref(17, 1)), 44);
  $M.106 := $store.i8($M.106, $add.ref($add.ref(.str.4, $mul.ref(0, 50)), $mul.ref(18, 1)), 32);
  $M.106 := $store.i8($M.106, $add.ref($add.ref(.str.4, $mul.ref(0, 50)), $mul.ref(19, 1)), 116);
  $M.106 := $store.i8($M.106, $add.ref($add.ref(.str.4, $mul.ref(0, 50)), $mul.ref(20, 1)), 104);
  $M.106 := $store.i8($M.106, $add.ref($add.ref(.str.4, $mul.ref(0, 50)), $mul.ref(21, 1)), 101);
  $M.106 := $store.i8($M.106, $add.ref($add.ref(.str.4, $mul.ref(0, 50)), $mul.ref(22, 1)), 32);
  $M.106 := $store.i8($M.106, $add.ref($add.ref(.str.4, $mul.ref(0, 50)), $mul.ref(23, 1)), 115);
  $M.106 := $store.i8($M.106, $add.ref($add.ref(.str.4, $mul.ref(0, 50)), $mul.ref(24, 1)), 116);
  $M.106 := $store.i8($M.106, $add.ref($add.ref(.str.4, $mul.ref(0, 50)), $mul.ref(25, 1)), 117);
  $M.106 := $store.i8($M.106, $add.ref($add.ref(.str.4, $mul.ref(0, 50)), $mul.ref(26, 1)), 98);
  $M.106 := $store.i8($M.106, $add.ref($add.ref(.str.4, $mul.ref(0, 50)), $mul.ref(27, 1)), 32);
  $M.106 := $store.i8($M.106, $add.ref($add.ref(.str.4, $mul.ref(0, 50)), $mul.ref(28, 1)), 102);
  $M.106 := $store.i8($M.106, $add.ref($add.ref(.str.4, $mul.ref(0, 50)), $mul.ref(29, 1)), 117);
  $M.106 := $store.i8($M.106, $add.ref($add.ref(.str.4, $mul.ref(0, 50)), $mul.ref(30, 1)), 110);
  $M.106 := $store.i8($M.106, $add.ref($add.ref(.str.4, $mul.ref(0, 50)), $mul.ref(31, 1)), 99);
  $M.106 := $store.i8($M.106, $add.ref($add.ref(.str.4, $mul.ref(0, 50)), $mul.ref(32, 1)), 116);
  $M.106 := $store.i8($M.106, $add.ref($add.ref(.str.4, $mul.ref(0, 50)), $mul.ref(33, 1)), 105);
  $M.106 := $store.i8($M.106, $add.ref($add.ref(.str.4, $mul.ref(0, 50)), $mul.ref(34, 1)), 111);
  $M.106 := $store.i8($M.106, $add.ref($add.ref(.str.4, $mul.ref(0, 50)), $mul.ref(35, 1)), 110);
  $M.106 := $store.i8($M.106, $add.ref($add.ref(.str.4, $mul.ref(0, 50)), $mul.ref(36, 1)), 32);
  $M.106 := $store.i8($M.106, $add.ref($add.ref(.str.4, $mul.ref(0, 50)), $mul.ref(37, 1)), 105);
  $M.106 := $store.i8($M.106, $add.ref($add.ref(.str.4, $mul.ref(0, 50)), $mul.ref(38, 1)), 115);
  $M.106 := $store.i8($M.106, $add.ref($add.ref(.str.4, $mul.ref(0, 50)), $mul.ref(39, 1)), 32);
  $M.106 := $store.i8($M.106, $add.ref($add.ref(.str.4, $mul.ref(0, 50)), $mul.ref(40, 1)), 99);
  $M.106 := $store.i8($M.106, $add.ref($add.ref(.str.4, $mul.ref(0, 50)), $mul.ref(41, 1)), 97);
  $M.106 := $store.i8($M.106, $add.ref($add.ref(.str.4, $mul.ref(0, 50)), $mul.ref(42, 1)), 108);
  $M.106 := $store.i8($M.106, $add.ref($add.ref(.str.4, $mul.ref(0, 50)), $mul.ref(43, 1)), 108);
  $M.106 := $store.i8($M.106, $add.ref($add.ref(.str.4, $mul.ref(0, 50)), $mul.ref(44, 1)), 101);
  $M.106 := $store.i8($M.106, $add.ref($add.ref(.str.4, $mul.ref(0, 50)), $mul.ref(45, 1)), 100);
  $M.106 := $store.i8($M.106, $add.ref($add.ref(.str.4, $mul.ref(0, 50)), $mul.ref(46, 1)), 32);
  $M.106 := $store.i8($M.106, $add.ref($add.ref(.str.4, $mul.ref(0, 50)), $mul.ref(47, 1)), 33);
  $M.106 := $store.i8($M.106, $add.ref($add.ref(.str.4, $mul.ref(0, 50)), $mul.ref(48, 1)), 10);
  $M.106 := $store.i8($M.106, $add.ref($add.ref(.str.4, $mul.ref(0, 50)), $mul.ref(49, 1)), 0);
  $M.107 := $store.i8($M.107, .str.5, 46);
  $M.107 := $store.i8($M.107, $add.ref($add.ref(.str.5, $mul.ref(0, 43)), $mul.ref(1, 1)), 46);
  $M.107 := $store.i8($M.107, $add.ref($add.ref(.str.5, $mul.ref(0, 43)), $mul.ref(2, 1)), 47);
  $M.107 := $store.i8($M.107, $add.ref($add.ref(.str.5, $mul.ref(0, 43)), $mul.ref(3, 1)), 46);
  $M.107 := $store.i8($M.107, $add.ref($add.ref(.str.5, $mul.ref(0, 43)), $mul.ref(4, 1)), 46);
  $M.107 := $store.i8($M.107, $add.ref($add.ref(.str.5, $mul.ref(0, 43)), $mul.ref(5, 1)), 47);
  $M.107 := $store.i8($M.107, $add.ref($add.ref(.str.5, $mul.ref(0, 43)), $mul.ref(6, 1)), 115);
  $M.107 := $store.i8($M.107, $add.ref($add.ref(.str.5, $mul.ref(0, 43)), $mul.ref(7, 1)), 116);
  $M.107 := $store.i8($M.107, $add.ref($add.ref(.str.5, $mul.ref(0, 43)), $mul.ref(8, 1)), 117);
  $M.107 := $store.i8($M.107, $add.ref($add.ref(.str.5, $mul.ref(0, 43)), $mul.ref(9, 1)), 98);
  $M.107 := $store.i8($M.107, $add.ref($add.ref(.str.5, $mul.ref(0, 43)), $mul.ref(10, 1)), 95);
  $M.107 := $store.i8($M.107, $add.ref($add.ref(.str.5, $mul.ref(0, 43)), $mul.ref(11, 1)), 109);
  $M.107 := $store.i8($M.107, $add.ref($add.ref(.str.5, $mul.ref(0, 43)), $mul.ref(12, 1)), 111);
  $M.107 := $store.i8($M.107, $add.ref($add.ref(.str.5, $mul.ref(0, 43)), $mul.ref(13, 1)), 100);
  $M.107 := $store.i8($M.107, $add.ref($add.ref(.str.5, $mul.ref(0, 43)), $mul.ref(14, 1)), 101);
  $M.107 := $store.i8($M.107, $add.ref($add.ref(.str.5, $mul.ref(0, 43)), $mul.ref(15, 1)), 108);
  $M.107 := $store.i8($M.107, $add.ref($add.ref(.str.5, $mul.ref(0, 43)), $mul.ref(16, 1)), 47);
  $M.107 := $store.i8($M.107, $add.ref($add.ref(.str.5, $mul.ref(0, 43)), $mul.ref(17, 1)), 115);
  $M.107 := $store.i8($M.107, $add.ref($add.ref(.str.5, $mul.ref(0, 43)), $mul.ref(18, 1)), 111);
  $M.107 := $store.i8($M.107, $add.ref($add.ref(.str.5, $mul.ref(0, 43)), $mul.ref(19, 1)), 117);
  $M.107 := $store.i8($M.107, $add.ref($add.ref(.str.5, $mul.ref(0, 43)), $mul.ref(20, 1)), 114);
  $M.107 := $store.i8($M.107, $add.ref($add.ref(.str.5, $mul.ref(0, 43)), $mul.ref(21, 1)), 99);
  $M.107 := $store.i8($M.107, $add.ref($add.ref(.str.5, $mul.ref(0, 43)), $mul.ref(22, 1)), 101);
  $M.107 := $store.i8($M.107, $add.ref($add.ref(.str.5, $mul.ref(0, 43)), $mul.ref(23, 1)), 47);
  $M.107 := $store.i8($M.107, $add.ref($add.ref(.str.5, $mul.ref(0, 43)), $mul.ref(24, 1)), 115);
  $M.107 := $store.i8($M.107, $add.ref($add.ref(.str.5, $mul.ref(0, 43)), $mul.ref(25, 1)), 105);
  $M.107 := $store.i8($M.107, $add.ref($add.ref(.str.5, $mul.ref(0, 43)), $mul.ref(26, 1)), 109);
  $M.107 := $store.i8($M.107, $add.ref($add.ref(.str.5, $mul.ref(0, 43)), $mul.ref(27, 1)), 112);
  $M.107 := $store.i8($M.107, $add.ref($add.ref(.str.5, $mul.ref(0, 43)), $mul.ref(28, 1)), 108);
  $M.107 := $store.i8($M.107, $add.ref($add.ref(.str.5, $mul.ref(0, 43)), $mul.ref(29, 1)), 101);
  $M.107 := $store.i8($M.107, $add.ref($add.ref(.str.5, $mul.ref(0, 43)), $mul.ref(30, 1)), 95);
  $M.107 := $store.i8($M.107, $add.ref($add.ref(.str.5, $mul.ref(0, 43)), $mul.ref(31, 1)), 116);
  $M.107 := $store.i8($M.107, $add.ref($add.ref(.str.5, $mul.ref(0, 43)), $mul.ref(32, 1)), 99);
  $M.107 := $store.i8($M.107, $add.ref($add.ref(.str.5, $mul.ref(0, 43)), $mul.ref(33, 1)), 112);
  $M.107 := $store.i8($M.107, $add.ref($add.ref(.str.5, $mul.ref(0, 43)), $mul.ref(34, 1)), 95);
  $M.107 := $store.i8($M.107, $add.ref($add.ref(.str.5, $mul.ref(0, 43)), $mul.ref(35, 1)), 105);
  $M.107 := $store.i8($M.107, $add.ref($add.ref(.str.5, $mul.ref(0, 43)), $mul.ref(36, 1)), 110);
  $M.107 := $store.i8($M.107, $add.ref($add.ref(.str.5, $mul.ref(0, 43)), $mul.ref(37, 1)), 112);
  $M.107 := $store.i8($M.107, $add.ref($add.ref(.str.5, $mul.ref(0, 43)), $mul.ref(38, 1)), 117);
  $M.107 := $store.i8($M.107, $add.ref($add.ref(.str.5, $mul.ref(0, 43)), $mul.ref(39, 1)), 116);
  $M.107 := $store.i8($M.107, $add.ref($add.ref(.str.5, $mul.ref(0, 43)), $mul.ref(40, 1)), 46);
  $M.107 := $store.i8($M.107, $add.ref($add.ref(.str.5, $mul.ref(0, 43)), $mul.ref(41, 1)), 99);
  $M.107 := $store.i8($M.107, $add.ref($add.ref(.str.5, $mul.ref(0, 43)), $mul.ref(42, 1)), 0);
  $M.108 := $store.i8($M.108, __func__.tcp_skb_mark_lost_uncond_verify, 116);
  $M.108 := $store.i8($M.108, $add.ref($add.ref(__func__.tcp_skb_mark_lost_uncond_verify, $mul.ref(0, 32)), $mul.ref(1, 1)), 99);
  $M.108 := $store.i8($M.108, $add.ref($add.ref(__func__.tcp_skb_mark_lost_uncond_verify, $mul.ref(0, 32)), $mul.ref(2, 1)), 112);
  $M.108 := $store.i8($M.108, $add.ref($add.ref(__func__.tcp_skb_mark_lost_uncond_verify, $mul.ref(0, 32)), $mul.ref(3, 1)), 95);
  $M.108 := $store.i8($M.108, $add.ref($add.ref(__func__.tcp_skb_mark_lost_uncond_verify, $mul.ref(0, 32)), $mul.ref(4, 1)), 115);
  $M.108 := $store.i8($M.108, $add.ref($add.ref(__func__.tcp_skb_mark_lost_uncond_verify, $mul.ref(0, 32)), $mul.ref(5, 1)), 107);
  $M.108 := $store.i8($M.108, $add.ref($add.ref(__func__.tcp_skb_mark_lost_uncond_verify, $mul.ref(0, 32)), $mul.ref(6, 1)), 98);
  $M.108 := $store.i8($M.108, $add.ref($add.ref(__func__.tcp_skb_mark_lost_uncond_verify, $mul.ref(0, 32)), $mul.ref(7, 1)), 95);
  $M.108 := $store.i8($M.108, $add.ref($add.ref(__func__.tcp_skb_mark_lost_uncond_verify, $mul.ref(0, 32)), $mul.ref(8, 1)), 109);
  $M.108 := $store.i8($M.108, $add.ref($add.ref(__func__.tcp_skb_mark_lost_uncond_verify, $mul.ref(0, 32)), $mul.ref(9, 1)), 97);
  $M.108 := $store.i8($M.108, $add.ref($add.ref(__func__.tcp_skb_mark_lost_uncond_verify, $mul.ref(0, 32)), $mul.ref(10, 1)), 114);
  $M.108 := $store.i8($M.108, $add.ref($add.ref(__func__.tcp_skb_mark_lost_uncond_verify, $mul.ref(0, 32)), $mul.ref(11, 1)), 107);
  $M.108 := $store.i8($M.108, $add.ref($add.ref(__func__.tcp_skb_mark_lost_uncond_verify, $mul.ref(0, 32)), $mul.ref(12, 1)), 95);
  $M.108 := $store.i8($M.108, $add.ref($add.ref(__func__.tcp_skb_mark_lost_uncond_verify, $mul.ref(0, 32)), $mul.ref(13, 1)), 108);
  $M.108 := $store.i8($M.108, $add.ref($add.ref(__func__.tcp_skb_mark_lost_uncond_verify, $mul.ref(0, 32)), $mul.ref(14, 1)), 111);
  $M.108 := $store.i8($M.108, $add.ref($add.ref(__func__.tcp_skb_mark_lost_uncond_verify, $mul.ref(0, 32)), $mul.ref(15, 1)), 115);
  $M.108 := $store.i8($M.108, $add.ref($add.ref(__func__.tcp_skb_mark_lost_uncond_verify, $mul.ref(0, 32)), $mul.ref(16, 1)), 116);
  $M.108 := $store.i8($M.108, $add.ref($add.ref(__func__.tcp_skb_mark_lost_uncond_verify, $mul.ref(0, 32)), $mul.ref(17, 1)), 95);
  $M.108 := $store.i8($M.108, $add.ref($add.ref(__func__.tcp_skb_mark_lost_uncond_verify, $mul.ref(0, 32)), $mul.ref(18, 1)), 117);
  $M.108 := $store.i8($M.108, $add.ref($add.ref(__func__.tcp_skb_mark_lost_uncond_verify, $mul.ref(0, 32)), $mul.ref(19, 1)), 110);
  $M.108 := $store.i8($M.108, $add.ref($add.ref(__func__.tcp_skb_mark_lost_uncond_verify, $mul.ref(0, 32)), $mul.ref(20, 1)), 99);
  $M.108 := $store.i8($M.108, $add.ref($add.ref(__func__.tcp_skb_mark_lost_uncond_verify, $mul.ref(0, 32)), $mul.ref(21, 1)), 111);
  $M.108 := $store.i8($M.108, $add.ref($add.ref(__func__.tcp_skb_mark_lost_uncond_verify, $mul.ref(0, 32)), $mul.ref(22, 1)), 110);
  $M.108 := $store.i8($M.108, $add.ref($add.ref(__func__.tcp_skb_mark_lost_uncond_verify, $mul.ref(0, 32)), $mul.ref(23, 1)), 100);
  $M.108 := $store.i8($M.108, $add.ref($add.ref(__func__.tcp_skb_mark_lost_uncond_verify, $mul.ref(0, 32)), $mul.ref(24, 1)), 95);
  $M.108 := $store.i8($M.108, $add.ref($add.ref(__func__.tcp_skb_mark_lost_uncond_verify, $mul.ref(0, 32)), $mul.ref(25, 1)), 118);
  $M.108 := $store.i8($M.108, $add.ref($add.ref(__func__.tcp_skb_mark_lost_uncond_verify, $mul.ref(0, 32)), $mul.ref(26, 1)), 101);
  $M.108 := $store.i8($M.108, $add.ref($add.ref(__func__.tcp_skb_mark_lost_uncond_verify, $mul.ref(0, 32)), $mul.ref(27, 1)), 114);
  $M.108 := $store.i8($M.108, $add.ref($add.ref(__func__.tcp_skb_mark_lost_uncond_verify, $mul.ref(0, 32)), $mul.ref(28, 1)), 105);
  $M.108 := $store.i8($M.108, $add.ref($add.ref(__func__.tcp_skb_mark_lost_uncond_verify, $mul.ref(0, 32)), $mul.ref(29, 1)), 102);
  $M.108 := $store.i8($M.108, $add.ref($add.ref(__func__.tcp_skb_mark_lost_uncond_verify, $mul.ref(0, 32)), $mul.ref(30, 1)), 121);
  $M.108 := $store.i8($M.108, $add.ref($add.ref(__func__.tcp_skb_mark_lost_uncond_verify, $mul.ref(0, 32)), $mul.ref(31, 1)), 0);
  $M.109 := $store.i8($M.109, __func__.tcp_enter_loss, 116);
  $M.109 := $store.i8($M.109, $add.ref($add.ref(__func__.tcp_enter_loss, $mul.ref(0, 15)), $mul.ref(1, 1)), 99);
  $M.109 := $store.i8($M.109, $add.ref($add.ref(__func__.tcp_enter_loss, $mul.ref(0, 15)), $mul.ref(2, 1)), 112);
  $M.109 := $store.i8($M.109, $add.ref($add.ref(__func__.tcp_enter_loss, $mul.ref(0, 15)), $mul.ref(3, 1)), 95);
  $M.109 := $store.i8($M.109, $add.ref($add.ref(__func__.tcp_enter_loss, $mul.ref(0, 15)), $mul.ref(4, 1)), 101);
  $M.109 := $store.i8($M.109, $add.ref($add.ref(__func__.tcp_enter_loss, $mul.ref(0, 15)), $mul.ref(5, 1)), 110);
  $M.109 := $store.i8($M.109, $add.ref($add.ref(__func__.tcp_enter_loss, $mul.ref(0, 15)), $mul.ref(6, 1)), 116);
  $M.109 := $store.i8($M.109, $add.ref($add.ref(__func__.tcp_enter_loss, $mul.ref(0, 15)), $mul.ref(7, 1)), 101);
  $M.109 := $store.i8($M.109, $add.ref($add.ref(__func__.tcp_enter_loss, $mul.ref(0, 15)), $mul.ref(8, 1)), 114);
  $M.109 := $store.i8($M.109, $add.ref($add.ref(__func__.tcp_enter_loss, $mul.ref(0, 15)), $mul.ref(9, 1)), 95);
  $M.109 := $store.i8($M.109, $add.ref($add.ref(__func__.tcp_enter_loss, $mul.ref(0, 15)), $mul.ref(10, 1)), 108);
  $M.109 := $store.i8($M.109, $add.ref($add.ref(__func__.tcp_enter_loss, $mul.ref(0, 15)), $mul.ref(11, 1)), 111);
  $M.109 := $store.i8($M.109, $add.ref($add.ref(__func__.tcp_enter_loss, $mul.ref(0, 15)), $mul.ref(12, 1)), 115);
  $M.109 := $store.i8($M.109, $add.ref($add.ref(__func__.tcp_enter_loss, $mul.ref(0, 15)), $mul.ref(13, 1)), 115);
  $M.109 := $store.i8($M.109, $add.ref($add.ref(__func__.tcp_enter_loss, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
  $M.110 := $store.i8($M.110, __func__.tcp_ecn_queue_cwr, 116);
  $M.110 := $store.i8($M.110, $add.ref($add.ref(__func__.tcp_ecn_queue_cwr, $mul.ref(0, 18)), $mul.ref(1, 1)), 99);
  $M.110 := $store.i8($M.110, $add.ref($add.ref(__func__.tcp_ecn_queue_cwr, $mul.ref(0, 18)), $mul.ref(2, 1)), 112);
  $M.110 := $store.i8($M.110, $add.ref($add.ref(__func__.tcp_ecn_queue_cwr, $mul.ref(0, 18)), $mul.ref(3, 1)), 95);
  $M.110 := $store.i8($M.110, $add.ref($add.ref(__func__.tcp_ecn_queue_cwr, $mul.ref(0, 18)), $mul.ref(4, 1)), 101);
  $M.110 := $store.i8($M.110, $add.ref($add.ref(__func__.tcp_ecn_queue_cwr, $mul.ref(0, 18)), $mul.ref(5, 1)), 99);
  $M.110 := $store.i8($M.110, $add.ref($add.ref(__func__.tcp_ecn_queue_cwr, $mul.ref(0, 18)), $mul.ref(6, 1)), 110);
  $M.110 := $store.i8($M.110, $add.ref($add.ref(__func__.tcp_ecn_queue_cwr, $mul.ref(0, 18)), $mul.ref(7, 1)), 95);
  $M.110 := $store.i8($M.110, $add.ref($add.ref(__func__.tcp_ecn_queue_cwr, $mul.ref(0, 18)), $mul.ref(8, 1)), 113);
  $M.110 := $store.i8($M.110, $add.ref($add.ref(__func__.tcp_ecn_queue_cwr, $mul.ref(0, 18)), $mul.ref(9, 1)), 117);
  $M.110 := $store.i8($M.110, $add.ref($add.ref(__func__.tcp_ecn_queue_cwr, $mul.ref(0, 18)), $mul.ref(10, 1)), 101);
  $M.110 := $store.i8($M.110, $add.ref($add.ref(__func__.tcp_ecn_queue_cwr, $mul.ref(0, 18)), $mul.ref(11, 1)), 117);
  $M.110 := $store.i8($M.110, $add.ref($add.ref(__func__.tcp_ecn_queue_cwr, $mul.ref(0, 18)), $mul.ref(12, 1)), 101);
  $M.110 := $store.i8($M.110, $add.ref($add.ref(__func__.tcp_ecn_queue_cwr, $mul.ref(0, 18)), $mul.ref(13, 1)), 95);
  $M.110 := $store.i8($M.110, $add.ref($add.ref(__func__.tcp_ecn_queue_cwr, $mul.ref(0, 18)), $mul.ref(14, 1)), 99);
  $M.110 := $store.i8($M.110, $add.ref($add.ref(__func__.tcp_ecn_queue_cwr, $mul.ref(0, 18)), $mul.ref(15, 1)), 119);
  $M.110 := $store.i8($M.110, $add.ref($add.ref(__func__.tcp_ecn_queue_cwr, $mul.ref(0, 18)), $mul.ref(16, 1)), 114);
  $M.110 := $store.i8($M.110, $add.ref($add.ref(__func__.tcp_ecn_queue_cwr, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
  $M.111 := $store.i8($M.111, __func__.tcp_simple_retransmit, 116);
  $M.111 := $store.i8($M.111, $add.ref($add.ref(__func__.tcp_simple_retransmit, $mul.ref(0, 22)), $mul.ref(1, 1)), 99);
  $M.111 := $store.i8($M.111, $add.ref($add.ref(__func__.tcp_simple_retransmit, $mul.ref(0, 22)), $mul.ref(2, 1)), 112);
  $M.111 := $store.i8($M.111, $add.ref($add.ref(__func__.tcp_simple_retransmit, $mul.ref(0, 22)), $mul.ref(3, 1)), 95);
  $M.111 := $store.i8($M.111, $add.ref($add.ref(__func__.tcp_simple_retransmit, $mul.ref(0, 22)), $mul.ref(4, 1)), 115);
  $M.111 := $store.i8($M.111, $add.ref($add.ref(__func__.tcp_simple_retransmit, $mul.ref(0, 22)), $mul.ref(5, 1)), 105);
  $M.111 := $store.i8($M.111, $add.ref($add.ref(__func__.tcp_simple_retransmit, $mul.ref(0, 22)), $mul.ref(6, 1)), 109);
  $M.111 := $store.i8($M.111, $add.ref($add.ref(__func__.tcp_simple_retransmit, $mul.ref(0, 22)), $mul.ref(7, 1)), 112);
  $M.111 := $store.i8($M.111, $add.ref($add.ref(__func__.tcp_simple_retransmit, $mul.ref(0, 22)), $mul.ref(8, 1)), 108);
  $M.111 := $store.i8($M.111, $add.ref($add.ref(__func__.tcp_simple_retransmit, $mul.ref(0, 22)), $mul.ref(9, 1)), 101);
  $M.111 := $store.i8($M.111, $add.ref($add.ref(__func__.tcp_simple_retransmit, $mul.ref(0, 22)), $mul.ref(10, 1)), 95);
  $M.111 := $store.i8($M.111, $add.ref($add.ref(__func__.tcp_simple_retransmit, $mul.ref(0, 22)), $mul.ref(11, 1)), 114);
  $M.111 := $store.i8($M.111, $add.ref($add.ref(__func__.tcp_simple_retransmit, $mul.ref(0, 22)), $mul.ref(12, 1)), 101);
  $M.111 := $store.i8($M.111, $add.ref($add.ref(__func__.tcp_simple_retransmit, $mul.ref(0, 22)), $mul.ref(13, 1)), 116);
  $M.111 := $store.i8($M.111, $add.ref($add.ref(__func__.tcp_simple_retransmit, $mul.ref(0, 22)), $mul.ref(14, 1)), 114);
  $M.111 := $store.i8($M.111, $add.ref($add.ref(__func__.tcp_simple_retransmit, $mul.ref(0, 22)), $mul.ref(15, 1)), 97);
  $M.111 := $store.i8($M.111, $add.ref($add.ref(__func__.tcp_simple_retransmit, $mul.ref(0, 22)), $mul.ref(16, 1)), 110);
  $M.111 := $store.i8($M.111, $add.ref($add.ref(__func__.tcp_simple_retransmit, $mul.ref(0, 22)), $mul.ref(17, 1)), 115);
  $M.111 := $store.i8($M.111, $add.ref($add.ref(__func__.tcp_simple_retransmit, $mul.ref(0, 22)), $mul.ref(18, 1)), 109);
  $M.111 := $store.i8($M.111, $add.ref($add.ref(__func__.tcp_simple_retransmit, $mul.ref(0, 22)), $mul.ref(19, 1)), 105);
  $M.111 := $store.i8($M.111, $add.ref($add.ref(__func__.tcp_simple_retransmit, $mul.ref(0, 22)), $mul.ref(20, 1)), 116);
  $M.111 := $store.i8($M.111, $add.ref($add.ref(__func__.tcp_simple_retransmit, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
  $M.112 := $store.i8($M.112, __func__.tcp_reset, 116);
  $M.112 := $store.i8($M.112, $add.ref($add.ref(__func__.tcp_reset, $mul.ref(0, 10)), $mul.ref(1, 1)), 99);
  $M.112 := $store.i8($M.112, $add.ref($add.ref(__func__.tcp_reset, $mul.ref(0, 10)), $mul.ref(2, 1)), 112);
  $M.112 := $store.i8($M.112, $add.ref($add.ref(__func__.tcp_reset, $mul.ref(0, 10)), $mul.ref(3, 1)), 95);
  $M.112 := $store.i8($M.112, $add.ref($add.ref(__func__.tcp_reset, $mul.ref(0, 10)), $mul.ref(4, 1)), 114);
  $M.112 := $store.i8($M.112, $add.ref($add.ref(__func__.tcp_reset, $mul.ref(0, 10)), $mul.ref(5, 1)), 101);
  $M.112 := $store.i8($M.112, $add.ref($add.ref(__func__.tcp_reset, $mul.ref(0, 10)), $mul.ref(6, 1)), 115);
  $M.112 := $store.i8($M.112, $add.ref($add.ref(__func__.tcp_reset, $mul.ref(0, 10)), $mul.ref(7, 1)), 101);
  $M.112 := $store.i8($M.112, $add.ref($add.ref(__func__.tcp_reset, $mul.ref(0, 10)), $mul.ref(8, 1)), 116);
  $M.112 := $store.i8($M.112, $add.ref($add.ref(__func__.tcp_reset, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
  $M.113 := $store.i8($M.113, .str.6, 91);
  $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.6, $mul.ref(0, 62)), $mul.ref(1, 1)), 66);
  $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.6, $mul.ref(0, 62)), $mul.ref(2, 1)), 101);
  $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.6, $mul.ref(0, 62)), $mul.ref(3, 1)), 102);
  $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.6, $mul.ref(0, 62)), $mul.ref(4, 1)), 111);
  $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.6, $mul.ref(0, 62)), $mul.ref(5, 1)), 114);
  $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.6, $mul.ref(0, 62)), $mul.ref(6, 1)), 101);
  $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.6, $mul.ref(0, 62)), $mul.ref(7, 1)), 32);
  $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.6, $mul.ref(0, 62)), $mul.ref(8, 1)), 105);
  $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.6, $mul.ref(0, 62)), $mul.ref(9, 1)), 110);
  $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.6, $mul.ref(0, 62)), $mul.ref(10, 1)), 105);
  $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.6, $mul.ref(0, 62)), $mul.ref(11, 1)), 116);
  $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.6, $mul.ref(0, 62)), $mul.ref(12, 1)), 105);
  $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.6, $mul.ref(0, 62)), $mul.ref(13, 1)), 97);
  $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.6, $mul.ref(0, 62)), $mul.ref(14, 1)), 108);
  $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.6, $mul.ref(0, 62)), $mul.ref(15, 1)), 105);
  $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.6, $mul.ref(0, 62)), $mul.ref(16, 1)), 122);
  $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.6, $mul.ref(0, 62)), $mul.ref(17, 1)), 97);
  $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.6, $mul.ref(0, 62)), $mul.ref(18, 1)), 116);
  $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.6, $mul.ref(0, 62)), $mul.ref(19, 1)), 105);
  $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.6, $mul.ref(0, 62)), $mul.ref(20, 1)), 111);
  $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.6, $mul.ref(0, 62)), $mul.ref(21, 1)), 110);
  $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.6, $mul.ref(0, 62)), $mul.ref(22, 1)), 93);
  $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.6, $mul.ref(0, 62)), $mul.ref(23, 1)), 32);
  $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.6, $mul.ref(0, 62)), $mul.ref(24, 1)), 116);
  $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.6, $mul.ref(0, 62)), $mul.ref(25, 1)), 112);
  $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.6, $mul.ref(0, 62)), $mul.ref(26, 1)), 45);
  $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.6, $mul.ref(0, 62)), $mul.ref(27, 1)), 62);
  $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.6, $mul.ref(0, 62)), $mul.ref(28, 1)), 115);
  $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.6, $mul.ref(0, 62)), $mul.ref(29, 1)), 110);
  $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.6, $mul.ref(0, 62)), $mul.ref(30, 1)), 100);
  $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.6, $mul.ref(0, 62)), $mul.ref(31, 1)), 95);
  $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.6, $mul.ref(0, 62)), $mul.ref(32, 1)), 99);
  $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.6, $mul.ref(0, 62)), $mul.ref(33, 1)), 119);
  $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.6, $mul.ref(0, 62)), $mul.ref(34, 1)), 110);
  $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.6, $mul.ref(0, 62)), $mul.ref(35, 1)), 100);
  $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.6, $mul.ref(0, 62)), $mul.ref(36, 1)), 58);
  $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.6, $mul.ref(0, 62)), $mul.ref(37, 1)), 37);
  $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.6, $mul.ref(0, 62)), $mul.ref(38, 1)), 117);
  $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.6, $mul.ref(0, 62)), $mul.ref(39, 1)), 44);
  $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.6, $mul.ref(0, 62)), $mul.ref(40, 1)), 32);
  $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.6, $mul.ref(0, 62)), $mul.ref(41, 1)), 116);
  $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.6, $mul.ref(0, 62)), $mul.ref(42, 1)), 112);
  $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.6, $mul.ref(0, 62)), $mul.ref(43, 1)), 45);
  $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.6, $mul.ref(0, 62)), $mul.ref(44, 1)), 62);
  $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.6, $mul.ref(0, 62)), $mul.ref(45, 1)), 115);
  $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.6, $mul.ref(0, 62)), $mul.ref(46, 1)), 110);
  $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.6, $mul.ref(0, 62)), $mul.ref(47, 1)), 100);
  $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.6, $mul.ref(0, 62)), $mul.ref(48, 1)), 95);
  $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.6, $mul.ref(0, 62)), $mul.ref(49, 1)), 115);
  $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.6, $mul.ref(0, 62)), $mul.ref(50, 1)), 115);
  $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.6, $mul.ref(0, 62)), $mul.ref(51, 1)), 116);
  $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.6, $mul.ref(0, 62)), $mul.ref(52, 1)), 104);
  $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.6, $mul.ref(0, 62)), $mul.ref(53, 1)), 114);
  $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.6, $mul.ref(0, 62)), $mul.ref(54, 1)), 101);
  $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.6, $mul.ref(0, 62)), $mul.ref(55, 1)), 115);
  $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.6, $mul.ref(0, 62)), $mul.ref(56, 1)), 104);
  $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.6, $mul.ref(0, 62)), $mul.ref(57, 1)), 58);
  $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.6, $mul.ref(0, 62)), $mul.ref(58, 1)), 37);
  $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.6, $mul.ref(0, 62)), $mul.ref(59, 1)), 117);
  $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.6, $mul.ref(0, 62)), $mul.ref(60, 1)), 10);
  $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.6, $mul.ref(0, 62)), $mul.ref(61, 1)), 0);
  $M.114 := $store.i8($M.114, .str.7, 91);
  $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.7, $mul.ref(0, 61)), $mul.ref(1, 1)), 65);
  $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.7, $mul.ref(0, 61)), $mul.ref(2, 1)), 102);
  $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.7, $mul.ref(0, 61)), $mul.ref(3, 1)), 116);
  $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.7, $mul.ref(0, 61)), $mul.ref(4, 1)), 101);
  $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.7, $mul.ref(0, 61)), $mul.ref(5, 1)), 114);
  $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.7, $mul.ref(0, 61)), $mul.ref(6, 1)), 32);
  $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.7, $mul.ref(0, 61)), $mul.ref(7, 1)), 105);
  $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.7, $mul.ref(0, 61)), $mul.ref(8, 1)), 110);
  $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.7, $mul.ref(0, 61)), $mul.ref(9, 1)), 105);
  $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.7, $mul.ref(0, 61)), $mul.ref(10, 1)), 116);
  $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.7, $mul.ref(0, 61)), $mul.ref(11, 1)), 105);
  $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.7, $mul.ref(0, 61)), $mul.ref(12, 1)), 97);
  $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.7, $mul.ref(0, 61)), $mul.ref(13, 1)), 108);
  $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.7, $mul.ref(0, 61)), $mul.ref(14, 1)), 105);
  $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.7, $mul.ref(0, 61)), $mul.ref(15, 1)), 122);
  $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.7, $mul.ref(0, 61)), $mul.ref(16, 1)), 97);
  $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.7, $mul.ref(0, 61)), $mul.ref(17, 1)), 116);
  $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.7, $mul.ref(0, 61)), $mul.ref(18, 1)), 105);
  $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.7, $mul.ref(0, 61)), $mul.ref(19, 1)), 111);
  $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.7, $mul.ref(0, 61)), $mul.ref(20, 1)), 110);
  $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.7, $mul.ref(0, 61)), $mul.ref(21, 1)), 93);
  $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.7, $mul.ref(0, 61)), $mul.ref(22, 1)), 32);
  $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.7, $mul.ref(0, 61)), $mul.ref(23, 1)), 116);
  $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.7, $mul.ref(0, 61)), $mul.ref(24, 1)), 112);
  $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.7, $mul.ref(0, 61)), $mul.ref(25, 1)), 45);
  $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.7, $mul.ref(0, 61)), $mul.ref(26, 1)), 62);
  $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.7, $mul.ref(0, 61)), $mul.ref(27, 1)), 115);
  $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.7, $mul.ref(0, 61)), $mul.ref(28, 1)), 110);
  $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.7, $mul.ref(0, 61)), $mul.ref(29, 1)), 100);
  $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.7, $mul.ref(0, 61)), $mul.ref(30, 1)), 95);
  $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.7, $mul.ref(0, 61)), $mul.ref(31, 1)), 99);
  $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.7, $mul.ref(0, 61)), $mul.ref(32, 1)), 119);
  $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.7, $mul.ref(0, 61)), $mul.ref(33, 1)), 110);
  $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.7, $mul.ref(0, 61)), $mul.ref(34, 1)), 100);
  $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.7, $mul.ref(0, 61)), $mul.ref(35, 1)), 58);
  $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.7, $mul.ref(0, 61)), $mul.ref(36, 1)), 37);
  $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.7, $mul.ref(0, 61)), $mul.ref(37, 1)), 117);
  $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.7, $mul.ref(0, 61)), $mul.ref(38, 1)), 44);
  $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.7, $mul.ref(0, 61)), $mul.ref(39, 1)), 32);
  $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.7, $mul.ref(0, 61)), $mul.ref(40, 1)), 116);
  $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.7, $mul.ref(0, 61)), $mul.ref(41, 1)), 112);
  $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.7, $mul.ref(0, 61)), $mul.ref(42, 1)), 45);
  $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.7, $mul.ref(0, 61)), $mul.ref(43, 1)), 62);
  $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.7, $mul.ref(0, 61)), $mul.ref(44, 1)), 115);
  $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.7, $mul.ref(0, 61)), $mul.ref(45, 1)), 110);
  $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.7, $mul.ref(0, 61)), $mul.ref(46, 1)), 100);
  $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.7, $mul.ref(0, 61)), $mul.ref(47, 1)), 95);
  $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.7, $mul.ref(0, 61)), $mul.ref(48, 1)), 115);
  $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.7, $mul.ref(0, 61)), $mul.ref(49, 1)), 115);
  $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.7, $mul.ref(0, 61)), $mul.ref(50, 1)), 116);
  $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.7, $mul.ref(0, 61)), $mul.ref(51, 1)), 104);
  $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.7, $mul.ref(0, 61)), $mul.ref(52, 1)), 114);
  $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.7, $mul.ref(0, 61)), $mul.ref(53, 1)), 101);
  $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.7, $mul.ref(0, 61)), $mul.ref(54, 1)), 115);
  $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.7, $mul.ref(0, 61)), $mul.ref(55, 1)), 104);
  $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.7, $mul.ref(0, 61)), $mul.ref(56, 1)), 58);
  $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.7, $mul.ref(0, 61)), $mul.ref(57, 1)), 37);
  $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.7, $mul.ref(0, 61)), $mul.ref(58, 1)), 117);
  $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.7, $mul.ref(0, 61)), $mul.ref(59, 1)), 10);
  $M.114 := $store.i8($M.114, $add.ref($add.ref(.str.7, $mul.ref(0, 61)), $mul.ref(60, 1)), 0);
  $M.115 := $store.i8($M.115, .str.8, 67);
  $M.115 := $store.i8($M.115, $add.ref($add.ref(.str.8, $mul.ref(0, 22)), $mul.ref(1, 1)), 111);
  $M.115 := $store.i8($M.115, $add.ref($add.ref(.str.8, $mul.ref(0, 22)), $mul.ref(2, 1)), 110);
  $M.115 := $store.i8($M.115, $add.ref($add.ref(.str.8, $mul.ref(0, 22)), $mul.ref(3, 1)), 103);
  $M.115 := $store.i8($M.115, $add.ref($add.ref(.str.8, $mul.ref(0, 22)), $mul.ref(4, 1)), 101);
  $M.115 := $store.i8($M.115, $add.ref($add.ref(.str.8, $mul.ref(0, 22)), $mul.ref(5, 1)), 115);
  $M.115 := $store.i8($M.115, $add.ref($add.ref(.str.8, $mul.ref(0, 22)), $mul.ref(6, 1)), 116);
  $M.115 := $store.i8($M.115, $add.ref($add.ref(.str.8, $mul.ref(0, 22)), $mul.ref(7, 1)), 105);
  $M.115 := $store.i8($M.115, $add.ref($add.ref(.str.8, $mul.ref(0, 22)), $mul.ref(8, 1)), 111);
  $M.115 := $store.i8($M.115, $add.ref($add.ref(.str.8, $mul.ref(0, 22)), $mul.ref(9, 1)), 110);
  $M.115 := $store.i8($M.115, $add.ref($add.ref(.str.8, $mul.ref(0, 22)), $mul.ref(10, 1)), 32);
  $M.115 := $store.i8($M.115, $add.ref($add.ref(.str.8, $mul.ref(0, 22)), $mul.ref(11, 1)), 97);
  $M.115 := $store.i8($M.115, $add.ref($add.ref(.str.8, $mul.ref(0, 22)), $mul.ref(12, 1)), 118);
  $M.115 := $store.i8($M.115, $add.ref($add.ref(.str.8, $mul.ref(0, 22)), $mul.ref(13, 1)), 111);
  $M.115 := $store.i8($M.115, $add.ref($add.ref(.str.8, $mul.ref(0, 22)), $mul.ref(14, 1)), 105);
  $M.115 := $store.i8($M.115, $add.ref($add.ref(.str.8, $mul.ref(0, 22)), $mul.ref(15, 1)), 100);
  $M.115 := $store.i8($M.115, $add.ref($add.ref(.str.8, $mul.ref(0, 22)), $mul.ref(16, 1)), 97);
  $M.115 := $store.i8($M.115, $add.ref($add.ref(.str.8, $mul.ref(0, 22)), $mul.ref(17, 1)), 110);
  $M.115 := $store.i8($M.115, $add.ref($add.ref(.str.8, $mul.ref(0, 22)), $mul.ref(18, 1)), 99);
  $M.115 := $store.i8($M.115, $add.ref($add.ref(.str.8, $mul.ref(0, 22)), $mul.ref(19, 1)), 101);
  $M.115 := $store.i8($M.115, $add.ref($add.ref(.str.8, $mul.ref(0, 22)), $mul.ref(20, 1)), 10);
  $M.115 := $store.i8($M.115, $add.ref($add.ref(.str.8, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
  $M.116 := $store.i8($M.116, .str.9, 67);
  $M.116 := $store.i8($M.116, $add.ref($add.ref(.str.9, $mul.ref(0, 16)), $mul.ref(1, 1)), 119);
  $M.116 := $store.i8($M.116, $add.ref($add.ref(.str.9, $mul.ref(0, 16)), $mul.ref(2, 1)), 110);
  $M.116 := $store.i8($M.116, $add.ref($add.ref(.str.9, $mul.ref(0, 16)), $mul.ref(3, 1)), 100);
  $M.116 := $store.i8($M.116, $add.ref($add.ref(.str.9, $mul.ref(0, 16)), $mul.ref(4, 1)), 32);
  $M.116 := $store.i8($M.116, $add.ref($add.ref(.str.9, $mul.ref(0, 16)), $mul.ref(5, 1)), 114);
  $M.116 := $store.i8($M.116, $add.ref($add.ref(.str.9, $mul.ref(0, 16)), $mul.ref(6, 1)), 101);
  $M.116 := $store.i8($M.116, $add.ref($add.ref(.str.9, $mul.ref(0, 16)), $mul.ref(7, 1)), 100);
  $M.116 := $store.i8($M.116, $add.ref($add.ref(.str.9, $mul.ref(0, 16)), $mul.ref(8, 1)), 117);
  $M.116 := $store.i8($M.116, $add.ref($add.ref(.str.9, $mul.ref(0, 16)), $mul.ref(9, 1)), 99);
  $M.116 := $store.i8($M.116, $add.ref($add.ref(.str.9, $mul.ref(0, 16)), $mul.ref(10, 1)), 116);
  $M.116 := $store.i8($M.116, $add.ref($add.ref(.str.9, $mul.ref(0, 16)), $mul.ref(11, 1)), 105);
  $M.116 := $store.i8($M.116, $add.ref($add.ref(.str.9, $mul.ref(0, 16)), $mul.ref(12, 1)), 111);
  $M.116 := $store.i8($M.116, $add.ref($add.ref(.str.9, $mul.ref(0, 16)), $mul.ref(13, 1)), 110);
  $M.116 := $store.i8($M.116, $add.ref($add.ref(.str.9, $mul.ref(0, 16)), $mul.ref(14, 1)), 10);
  $M.116 := $store.i8($M.116, $add.ref($add.ref(.str.9, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
  $M.117 := $store.i8($M.117, .str.10, 85);
  $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.10, $mul.ref(0, 6)), $mul.ref(1, 1)), 110);
  $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.10, $mul.ref(0, 6)), $mul.ref(2, 1)), 100);
  $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.10, $mul.ref(0, 6)), $mul.ref(3, 1)), 111);
  $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.10, $mul.ref(0, 6)), $mul.ref(4, 1)), 10);
  $M.117 := $store.i8($M.117, $add.ref($add.ref(.str.10, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
  $M.118 := $store.i8($M.118, .str.11, 116);
  $M.118 := $store.i8($M.118, $add.ref($add.ref(.str.11, $mul.ref(0, 17)), $mul.ref(1, 1)), 112);
  $M.118 := $store.i8($M.118, $add.ref($add.ref(.str.11, $mul.ref(0, 17)), $mul.ref(2, 1)), 45);
  $M.118 := $store.i8($M.118, $add.ref($add.ref(.str.11, $mul.ref(0, 17)), $mul.ref(3, 1)), 62);
  $M.118 := $store.i8($M.118, $add.ref($add.ref(.str.11, $mul.ref(0, 17)), $mul.ref(4, 1)), 115);
  $M.118 := $store.i8($M.118, $add.ref($add.ref(.str.11, $mul.ref(0, 17)), $mul.ref(5, 1)), 110);
  $M.118 := $store.i8($M.118, $add.ref($add.ref(.str.11, $mul.ref(0, 17)), $mul.ref(6, 1)), 100);
  $M.118 := $store.i8($M.118, $add.ref($add.ref(.str.11, $mul.ref(0, 17)), $mul.ref(7, 1)), 95);
  $M.118 := $store.i8($M.118, $add.ref($add.ref(.str.11, $mul.ref(0, 17)), $mul.ref(8, 1)), 99);
  $M.118 := $store.i8($M.118, $add.ref($add.ref(.str.11, $mul.ref(0, 17)), $mul.ref(9, 1)), 119);
  $M.118 := $store.i8($M.118, $add.ref($add.ref(.str.11, $mul.ref(0, 17)), $mul.ref(10, 1)), 110);
  $M.118 := $store.i8($M.118, $add.ref($add.ref(.str.11, $mul.ref(0, 17)), $mul.ref(11, 1)), 100);
  $M.118 := $store.i8($M.118, $add.ref($add.ref(.str.11, $mul.ref(0, 17)), $mul.ref(12, 1)), 58);
  $M.118 := $store.i8($M.118, $add.ref($add.ref(.str.11, $mul.ref(0, 17)), $mul.ref(13, 1)), 37);
  $M.118 := $store.i8($M.118, $add.ref($add.ref(.str.11, $mul.ref(0, 17)), $mul.ref(14, 1)), 117);
  $M.118 := $store.i8($M.118, $add.ref($add.ref(.str.11, $mul.ref(0, 17)), $mul.ref(15, 1)), 10);
  $M.118 := $store.i8($M.118, $add.ref($add.ref(.str.11, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
  $M.119 := .str.1.28;
  $M.120 := 0;
  call {:cexpr "errno_global"} boogie_si_record_i32(0);
  $exn := false;
  return;
}
const devirtbounce: ref;
axiom (devirtbounce == $sub.ref(0, 120261));
procedure  devirtbounce(funcPtr: ref, arg: ref)
{
  var $p0: ref;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $exn := false;
  return;
}
const devirtbounce.1: ref;
axiom (devirtbounce.1 == $sub.ref(0, 121293));
procedure  devirtbounce.1(funcPtr: ref, arg: ref, arg1: i8)
{
  var $p0: ref;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $exn := false;
  return;
}
const devirtbounce.2: ref;
axiom (devirtbounce.2 == $sub.ref(0, 122325));
procedure  devirtbounce.2(funcPtr: ref, arg: ref, arg1: ref)
{
  var $p0: ref;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $exn := false;
  return;
}
const devirtbounce.3: ref;
axiom (devirtbounce.3 == $sub.ref(0, 123357));
procedure  devirtbounce.3(funcPtr: ref, arg: ref)
  returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i4: i1;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $i4 := $eq.ref(tcp_reno_undo_cwnd, $p0);
  assume {:branchcond $i4} true;
  goto $bb3, $bb5;
$bb2:
  assume ($i3 == 1);
  call $i1 := tcp_reno_ssthresh(arg);
  $r := $i1;
  $exn := false;
  return;
$bb3:
  assume ($i4 == 1);
  call $i2 := tcp_reno_undo_cwnd(arg);
  $r := $i2;
  $exn := false;
  return;
$bb4:
  assume !(($i3 == 1));
  assume false;
$bb5:
  assume !(($i4 == 1));
  $i3 := $eq.ref(tcp_reno_ssthresh, $p0);
  assume {:branchcond $i3} true;
  goto $bb2, $bb4;
}
const devirtbounce.4: ref;
axiom (devirtbounce.4 == $sub.ref(0, 124389));
procedure  devirtbounce.4(funcPtr: ref, arg: ref, arg1: i32)
{
  var $p0: ref;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $exn := false;
  return;
}
const devirtbounce.5: ref;
axiom (devirtbounce.5 == $sub.ref(0, 125421));
procedure  devirtbounce.5(funcPtr: ref, arg: ref, arg1: i32, arg2: i32)
{
  var $p0: ref;
  var $i1: i1;
$bb0:
  $p0 := $bitcast.ref.ref(funcPtr);
  goto $bb1;
$bb1:
  $i1 := $eq.ref(tcp_reno_cong_avoid, $p0);
  assume {:branchcond $i1} true;
  goto $bb2, $bb3;
$bb2:
  assume ($i1 == 1);
  call tcp_reno_cong_avoid(arg, arg1, arg2);
  $exn := false;
  return;
$bb3:
  assume !(($i1 == 1));
  assume false;
}
procedure  $memset.i8(M: [ref] i8, dst: ref, val: i8, len: ref, isvolatile: bool) returns (M.ret: [ref] i8)
{
  assume (forall x: ref :: $sle.ref.bool(dst,x) && $slt.ref.bool(x,$add.ref(dst,len)) ==> M.ret[x] == val);
  assume (forall x: ref :: $slt.ref.bool(x,dst) ==> M.ret[x] == M[x]);
  assume (forall x: ref :: $sle.ref.bool($add.ref(dst,len),x) ==> M.ret[x] == M[x]);
}

procedure  boogie_si_record_i32(x: i32);
procedure  boogie_si_record_i64(x: i64);
procedure  boogie_si_record_ref(x: ref);
procedure  $initialize()
{
  call __SMACK_static_init();
  call __SMACK_init_func_memory_model();
  return;
}
